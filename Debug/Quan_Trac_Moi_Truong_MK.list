
Quan_Trac_Moi_Truong_MK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011064  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08011178  08011178  00021178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801181c  0801181c  000302a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801181c  0801181c  0002181c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011824  08011824  000302a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011824  08011824  00021824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011828  08011828  00021828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  0801182c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019cc  200002a8  08011ad4  000302a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001c74  08011ad4  00031c74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020aca  00000000  00000000  000302d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000573b  00000000  00000000  00050d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  000564d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001960  00000000  00000000  00058088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e5bc  00000000  00000000  000599e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002480b  00000000  00000000  00077fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ead5  00000000  00000000  0009c7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b284  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008410  00000000  00000000  0013b2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a8 	.word	0x200002a8
 800012c:	00000000 	.word	0x00000000
 8000130:	0801115c 	.word	0x0801115c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002ac 	.word	0x200002ac
 800014c:	0801115c 	.word	0x0801115c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <__aeabi_ldivmod>:
 800115c:	b97b      	cbnz	r3, 800117e <__aeabi_ldivmod+0x22>
 800115e:	b972      	cbnz	r2, 800117e <__aeabi_ldivmod+0x22>
 8001160:	2900      	cmp	r1, #0
 8001162:	bfbe      	ittt	lt
 8001164:	2000      	movlt	r0, #0
 8001166:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800116a:	e006      	blt.n	800117a <__aeabi_ldivmod+0x1e>
 800116c:	bf08      	it	eq
 800116e:	2800      	cmpeq	r0, #0
 8001170:	bf1c      	itt	ne
 8001172:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001176:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800117a:	f000 b9a9 	b.w	80014d0 <__aeabi_idiv0>
 800117e:	f1ad 0c08 	sub.w	ip, sp, #8
 8001182:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001186:	2900      	cmp	r1, #0
 8001188:	db09      	blt.n	800119e <__aeabi_ldivmod+0x42>
 800118a:	2b00      	cmp	r3, #0
 800118c:	db1a      	blt.n	80011c4 <__aeabi_ldivmod+0x68>
 800118e:	f000 f835 	bl	80011fc <__udivmoddi4>
 8001192:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800119a:	b004      	add	sp, #16
 800119c:	4770      	bx	lr
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db1b      	blt.n	80011e0 <__aeabi_ldivmod+0x84>
 80011a8:	f000 f828 	bl	80011fc <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4240      	negs	r0, r0
 80011b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011bc:	4252      	negs	r2, r2
 80011be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011c2:	4770      	bx	lr
 80011c4:	4252      	negs	r2, r2
 80011c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ca:	f000 f817 	bl	80011fc <__udivmoddi4>
 80011ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d6:	b004      	add	sp, #16
 80011d8:	4240      	negs	r0, r0
 80011da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011de:	4770      	bx	lr
 80011e0:	4252      	negs	r2, r2
 80011e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e6:	f000 f809 	bl	80011fc <__udivmoddi4>
 80011ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f2:	b004      	add	sp, #16
 80011f4:	4252      	negs	r2, r2
 80011f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011fa:	4770      	bx	lr

080011fc <__udivmoddi4>:
 80011fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001200:	9e08      	ldr	r6, [sp, #32]
 8001202:	460d      	mov	r5, r1
 8001204:	4604      	mov	r4, r0
 8001206:	4688      	mov	r8, r1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d14d      	bne.n	80012a8 <__udivmoddi4+0xac>
 800120c:	428a      	cmp	r2, r1
 800120e:	4694      	mov	ip, r2
 8001210:	d968      	bls.n	80012e4 <__udivmoddi4+0xe8>
 8001212:	fab2 f282 	clz	r2, r2
 8001216:	b152      	cbz	r2, 800122e <__udivmoddi4+0x32>
 8001218:	fa01 f302 	lsl.w	r3, r1, r2
 800121c:	f1c2 0120 	rsb	r1, r2, #32
 8001220:	fa20 f101 	lsr.w	r1, r0, r1
 8001224:	fa0c fc02 	lsl.w	ip, ip, r2
 8001228:	ea41 0803 	orr.w	r8, r1, r3
 800122c:	4094      	lsls	r4, r2
 800122e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001232:	fbb8 f7f1 	udiv	r7, r8, r1
 8001236:	fa1f fe8c 	uxth.w	lr, ip
 800123a:	fb01 8817 	mls	r8, r1, r7, r8
 800123e:	fb07 f00e 	mul.w	r0, r7, lr
 8001242:	0c23      	lsrs	r3, r4, #16
 8001244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001248:	4298      	cmp	r0, r3
 800124a:	d90a      	bls.n	8001262 <__udivmoddi4+0x66>
 800124c:	eb1c 0303 	adds.w	r3, ip, r3
 8001250:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8001254:	f080 811e 	bcs.w	8001494 <__udivmoddi4+0x298>
 8001258:	4298      	cmp	r0, r3
 800125a:	f240 811b 	bls.w	8001494 <__udivmoddi4+0x298>
 800125e:	3f02      	subs	r7, #2
 8001260:	4463      	add	r3, ip
 8001262:	1a1b      	subs	r3, r3, r0
 8001264:	fbb3 f0f1 	udiv	r0, r3, r1
 8001268:	fb01 3310 	mls	r3, r1, r0, r3
 800126c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001270:	b2a4      	uxth	r4, r4
 8001272:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001276:	45a6      	cmp	lr, r4
 8001278:	d90a      	bls.n	8001290 <__udivmoddi4+0x94>
 800127a:	eb1c 0404 	adds.w	r4, ip, r4
 800127e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001282:	f080 8109 	bcs.w	8001498 <__udivmoddi4+0x29c>
 8001286:	45a6      	cmp	lr, r4
 8001288:	f240 8106 	bls.w	8001498 <__udivmoddi4+0x29c>
 800128c:	4464      	add	r4, ip
 800128e:	3802      	subs	r0, #2
 8001290:	2100      	movs	r1, #0
 8001292:	eba4 040e 	sub.w	r4, r4, lr
 8001296:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800129a:	b11e      	cbz	r6, 80012a4 <__udivmoddi4+0xa8>
 800129c:	2300      	movs	r3, #0
 800129e:	40d4      	lsrs	r4, r2
 80012a0:	e9c6 4300 	strd	r4, r3, [r6]
 80012a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a8:	428b      	cmp	r3, r1
 80012aa:	d908      	bls.n	80012be <__udivmoddi4+0xc2>
 80012ac:	2e00      	cmp	r6, #0
 80012ae:	f000 80ee 	beq.w	800148e <__udivmoddi4+0x292>
 80012b2:	2100      	movs	r1, #0
 80012b4:	e9c6 0500 	strd	r0, r5, [r6]
 80012b8:	4608      	mov	r0, r1
 80012ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012be:	fab3 f183 	clz	r1, r3
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d14a      	bne.n	800135c <__udivmoddi4+0x160>
 80012c6:	42ab      	cmp	r3, r5
 80012c8:	d302      	bcc.n	80012d0 <__udivmoddi4+0xd4>
 80012ca:	4282      	cmp	r2, r0
 80012cc:	f200 80fc 	bhi.w	80014c8 <__udivmoddi4+0x2cc>
 80012d0:	1a84      	subs	r4, r0, r2
 80012d2:	eb65 0303 	sbc.w	r3, r5, r3
 80012d6:	2001      	movs	r0, #1
 80012d8:	4698      	mov	r8, r3
 80012da:	2e00      	cmp	r6, #0
 80012dc:	d0e2      	beq.n	80012a4 <__udivmoddi4+0xa8>
 80012de:	e9c6 4800 	strd	r4, r8, [r6]
 80012e2:	e7df      	b.n	80012a4 <__udivmoddi4+0xa8>
 80012e4:	b902      	cbnz	r2, 80012e8 <__udivmoddi4+0xec>
 80012e6:	deff      	udf	#255	; 0xff
 80012e8:	fab2 f282 	clz	r2, r2
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	f040 8091 	bne.w	8001414 <__udivmoddi4+0x218>
 80012f2:	eba1 000c 	sub.w	r0, r1, ip
 80012f6:	2101      	movs	r1, #1
 80012f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012fc:	fa1f fe8c 	uxth.w	lr, ip
 8001300:	fbb0 f3f7 	udiv	r3, r0, r7
 8001304:	fb07 0013 	mls	r0, r7, r3, r0
 8001308:	0c25      	lsrs	r5, r4, #16
 800130a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800130e:	fb0e f003 	mul.w	r0, lr, r3
 8001312:	42a8      	cmp	r0, r5
 8001314:	d908      	bls.n	8001328 <__udivmoddi4+0x12c>
 8001316:	eb1c 0505 	adds.w	r5, ip, r5
 800131a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800131e:	d202      	bcs.n	8001326 <__udivmoddi4+0x12a>
 8001320:	42a8      	cmp	r0, r5
 8001322:	f200 80ce 	bhi.w	80014c2 <__udivmoddi4+0x2c6>
 8001326:	4643      	mov	r3, r8
 8001328:	1a2d      	subs	r5, r5, r0
 800132a:	fbb5 f0f7 	udiv	r0, r5, r7
 800132e:	fb07 5510 	mls	r5, r7, r0, r5
 8001332:	fb0e fe00 	mul.w	lr, lr, r0
 8001336:	b2a4      	uxth	r4, r4
 8001338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800133c:	45a6      	cmp	lr, r4
 800133e:	d908      	bls.n	8001352 <__udivmoddi4+0x156>
 8001340:	eb1c 0404 	adds.w	r4, ip, r4
 8001344:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001348:	d202      	bcs.n	8001350 <__udivmoddi4+0x154>
 800134a:	45a6      	cmp	lr, r4
 800134c:	f200 80b6 	bhi.w	80014bc <__udivmoddi4+0x2c0>
 8001350:	4628      	mov	r0, r5
 8001352:	eba4 040e 	sub.w	r4, r4, lr
 8001356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800135a:	e79e      	b.n	800129a <__udivmoddi4+0x9e>
 800135c:	f1c1 0720 	rsb	r7, r1, #32
 8001360:	408b      	lsls	r3, r1
 8001362:	fa22 fc07 	lsr.w	ip, r2, r7
 8001366:	ea4c 0c03 	orr.w	ip, ip, r3
 800136a:	fa25 fa07 	lsr.w	sl, r5, r7
 800136e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001372:	fbba f8f9 	udiv	r8, sl, r9
 8001376:	fa20 f307 	lsr.w	r3, r0, r7
 800137a:	fb09 aa18 	mls	sl, r9, r8, sl
 800137e:	408d      	lsls	r5, r1
 8001380:	fa1f fe8c 	uxth.w	lr, ip
 8001384:	431d      	orrs	r5, r3
 8001386:	fa00 f301 	lsl.w	r3, r0, r1
 800138a:	fb08 f00e 	mul.w	r0, r8, lr
 800138e:	0c2c      	lsrs	r4, r5, #16
 8001390:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001394:	42a0      	cmp	r0, r4
 8001396:	fa02 f201 	lsl.w	r2, r2, r1
 800139a:	d90b      	bls.n	80013b4 <__udivmoddi4+0x1b8>
 800139c:	eb1c 0404 	adds.w	r4, ip, r4
 80013a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80013a4:	f080 8088 	bcs.w	80014b8 <__udivmoddi4+0x2bc>
 80013a8:	42a0      	cmp	r0, r4
 80013aa:	f240 8085 	bls.w	80014b8 <__udivmoddi4+0x2bc>
 80013ae:	f1a8 0802 	sub.w	r8, r8, #2
 80013b2:	4464      	add	r4, ip
 80013b4:	1a24      	subs	r4, r4, r0
 80013b6:	fbb4 f0f9 	udiv	r0, r4, r9
 80013ba:	fb09 4410 	mls	r4, r9, r0, r4
 80013be:	fb00 fe0e 	mul.w	lr, r0, lr
 80013c2:	b2ad      	uxth	r5, r5
 80013c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013c8:	45a6      	cmp	lr, r4
 80013ca:	d908      	bls.n	80013de <__udivmoddi4+0x1e2>
 80013cc:	eb1c 0404 	adds.w	r4, ip, r4
 80013d0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80013d4:	d26c      	bcs.n	80014b0 <__udivmoddi4+0x2b4>
 80013d6:	45a6      	cmp	lr, r4
 80013d8:	d96a      	bls.n	80014b0 <__udivmoddi4+0x2b4>
 80013da:	3802      	subs	r0, #2
 80013dc:	4464      	add	r4, ip
 80013de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80013e2:	fba0 9502 	umull	r9, r5, r0, r2
 80013e6:	eba4 040e 	sub.w	r4, r4, lr
 80013ea:	42ac      	cmp	r4, r5
 80013ec:	46c8      	mov	r8, r9
 80013ee:	46ae      	mov	lr, r5
 80013f0:	d356      	bcc.n	80014a0 <__udivmoddi4+0x2a4>
 80013f2:	d053      	beq.n	800149c <__udivmoddi4+0x2a0>
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	d069      	beq.n	80014cc <__udivmoddi4+0x2d0>
 80013f8:	ebb3 0208 	subs.w	r2, r3, r8
 80013fc:	eb64 040e 	sbc.w	r4, r4, lr
 8001400:	fa22 f301 	lsr.w	r3, r2, r1
 8001404:	fa04 f707 	lsl.w	r7, r4, r7
 8001408:	431f      	orrs	r7, r3
 800140a:	40cc      	lsrs	r4, r1
 800140c:	e9c6 7400 	strd	r7, r4, [r6]
 8001410:	2100      	movs	r1, #0
 8001412:	e747      	b.n	80012a4 <__udivmoddi4+0xa8>
 8001414:	fa0c fc02 	lsl.w	ip, ip, r2
 8001418:	f1c2 0120 	rsb	r1, r2, #32
 800141c:	fa25 f301 	lsr.w	r3, r5, r1
 8001420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001424:	fa20 f101 	lsr.w	r1, r0, r1
 8001428:	4095      	lsls	r5, r2
 800142a:	430d      	orrs	r5, r1
 800142c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001430:	fb07 3311 	mls	r3, r7, r1, r3
 8001434:	fa1f fe8c 	uxth.w	lr, ip
 8001438:	0c28      	lsrs	r0, r5, #16
 800143a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800143e:	fb01 f30e 	mul.w	r3, r1, lr
 8001442:	4283      	cmp	r3, r0
 8001444:	fa04 f402 	lsl.w	r4, r4, r2
 8001448:	d908      	bls.n	800145c <__udivmoddi4+0x260>
 800144a:	eb1c 0000 	adds.w	r0, ip, r0
 800144e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8001452:	d22f      	bcs.n	80014b4 <__udivmoddi4+0x2b8>
 8001454:	4283      	cmp	r3, r0
 8001456:	d92d      	bls.n	80014b4 <__udivmoddi4+0x2b8>
 8001458:	3902      	subs	r1, #2
 800145a:	4460      	add	r0, ip
 800145c:	1ac0      	subs	r0, r0, r3
 800145e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001462:	fb07 0013 	mls	r0, r7, r3, r0
 8001466:	b2ad      	uxth	r5, r5
 8001468:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800146c:	fb03 f00e 	mul.w	r0, r3, lr
 8001470:	42a8      	cmp	r0, r5
 8001472:	d908      	bls.n	8001486 <__udivmoddi4+0x28a>
 8001474:	eb1c 0505 	adds.w	r5, ip, r5
 8001478:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800147c:	d216      	bcs.n	80014ac <__udivmoddi4+0x2b0>
 800147e:	42a8      	cmp	r0, r5
 8001480:	d914      	bls.n	80014ac <__udivmoddi4+0x2b0>
 8001482:	3b02      	subs	r3, #2
 8001484:	4465      	add	r5, ip
 8001486:	1a28      	subs	r0, r5, r0
 8001488:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800148c:	e738      	b.n	8001300 <__udivmoddi4+0x104>
 800148e:	4631      	mov	r1, r6
 8001490:	4630      	mov	r0, r6
 8001492:	e707      	b.n	80012a4 <__udivmoddi4+0xa8>
 8001494:	462f      	mov	r7, r5
 8001496:	e6e4      	b.n	8001262 <__udivmoddi4+0x66>
 8001498:	4618      	mov	r0, r3
 800149a:	e6f9      	b.n	8001290 <__udivmoddi4+0x94>
 800149c:	454b      	cmp	r3, r9
 800149e:	d2a9      	bcs.n	80013f4 <__udivmoddi4+0x1f8>
 80014a0:	ebb9 0802 	subs.w	r8, r9, r2
 80014a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014a8:	3801      	subs	r0, #1
 80014aa:	e7a3      	b.n	80013f4 <__udivmoddi4+0x1f8>
 80014ac:	4643      	mov	r3, r8
 80014ae:	e7ea      	b.n	8001486 <__udivmoddi4+0x28a>
 80014b0:	4628      	mov	r0, r5
 80014b2:	e794      	b.n	80013de <__udivmoddi4+0x1e2>
 80014b4:	4641      	mov	r1, r8
 80014b6:	e7d1      	b.n	800145c <__udivmoddi4+0x260>
 80014b8:	46d0      	mov	r8, sl
 80014ba:	e77b      	b.n	80013b4 <__udivmoddi4+0x1b8>
 80014bc:	4464      	add	r4, ip
 80014be:	3802      	subs	r0, #2
 80014c0:	e747      	b.n	8001352 <__udivmoddi4+0x156>
 80014c2:	3b02      	subs	r3, #2
 80014c4:	4465      	add	r5, ip
 80014c6:	e72f      	b.n	8001328 <__udivmoddi4+0x12c>
 80014c8:	4608      	mov	r0, r1
 80014ca:	e706      	b.n	80012da <__udivmoddi4+0xde>
 80014cc:	4631      	mov	r1, r6
 80014ce:	e6e9      	b.n	80012a4 <__udivmoddi4+0xa8>

080014d0 <__aeabi_idiv0>:
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <BMP_180_Air_Pressure_Sensor_Init>:
 * @brief BMP_180_Air_Pressure_Sensor_Init
 * 
 * @param sensor_x 
 */
void BMP_180_Air_Pressure_Sensor_Init(BMP180_Air_Pressure_Sensor_Name *sensor_x, I2C_HandleTypeDef *hi2c_x, uint16_t oversmapling_setting)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	4613      	mov	r3, r2
 80014e0:	80fb      	strh	r3, [r7, #6]
	sensor_x->hi2c_bmp180_air_pressure_sensor = hi2c_x;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	601a      	str	r2, [r3, #0]
	sensor_x->AC1 = 0;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	809a      	strh	r2, [r3, #4]
	sensor_x->AC2 = 0;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	80da      	strh	r2, [r3, #6]
	sensor_x->AC3 = 0;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	811a      	strh	r2, [r3, #8]
	sensor_x->AC4 = 0;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	82da      	strh	r2, [r3, #22]
	sensor_x->AC5 = 0;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	831a      	strh	r2, [r3, #24]
	sensor_x->B1 = 0;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	815a      	strh	r2, [r3, #10]
	sensor_x->B2 = 0;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	819a      	strh	r2, [r3, #12]
	sensor_x->B3 = 0;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
	sensor_x->B4 = 0;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
	sensor_x->B5 = 0;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	635a      	str	r2, [r3, #52]	; 0x34
	sensor_x->B6 = 0;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	639a      	str	r2, [r3, #56]	; 0x38
	sensor_x->B7 = 0;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	649a      	str	r2, [r3, #72]	; 0x48
	sensor_x->MB = 0;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	81da      	strh	r2, [r3, #14]
	sensor_x->MC = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	821a      	strh	r2, [r3, #16]
	sensor_x->MD = 0;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	825a      	strh	r2, [r3, #18]
	sensor_x->oss = oversmapling_setting;
 8001542:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	829a      	strh	r2, [r3, #20]
	sensor_x->Press = 0;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
	sensor_x->Temp = 0;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
	sensor_x->UT = 0;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
	sensor_x->UP = 0;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
	sensor_x->X1 = 0;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_x->X2 = 0;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
	sensor_x->X3 = 0;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <BMP180_Start_Read_Calliberation_Data>:
 * 
 * @param hi2c 
 * @return uint8_t 
 */
uint8_t BMP180_Start_Read_Calliberation_Data(BMP180_Air_Pressure_Sensor_Name *sensor_x)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b08c      	sub	sp, #48	; 0x30
 8001582:	af04      	add	r7, sp, #16
 8001584:	6078      	str	r0, [r7, #4]
	uint8_t Callib_Data[22] = {0};
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 800159a:	23aa      	movs	r3, #170	; 0xaa
 800159c:	83fb      	strh	r3, [r7, #30]
	HAL_I2C_Mem_Read(sensor_x->hi2c_bmp180_air_pressure_sensor, BMP180_ADDRESS, Callib_Start, 1, Callib_Data, 22, 1000);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	8bfa      	ldrh	r2, [r7, #30]
 80015a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a8:	9302      	str	r3, [sp, #8]
 80015aa:	2316      	movs	r3, #22
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	21ee      	movs	r1, #238	; 0xee
 80015b8:	f004 f824 	bl	8005604 <HAL_I2C_Mem_Read>

	sensor_x->AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 80015bc:	7a3b      	ldrb	r3, [r7, #8]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	7a7b      	ldrb	r3, [r7, #9]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	809a      	strh	r2, [r3, #4]
	sensor_x->AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 80015ce:	7abb      	ldrb	r3, [r7, #10]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	80da      	strh	r2, [r3, #6]
	sensor_x->AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 80015e0:	7b3b      	ldrb	r3, [r7, #12]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	811a      	strh	r2, [r3, #8]
	sensor_x->AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21b      	sxth	r3, r3
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	82da      	strh	r2, [r3, #22]
	sensor_x->AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001606:	7c3b      	ldrb	r3, [r7, #16]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b21a      	sxth	r2, r3
 800160c:	7c7b      	ldrb	r3, [r7, #17]
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21b      	sxth	r3, r3
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	831a      	strh	r2, [r3, #24]
	sensor_x->AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 800161a:	7cbb      	ldrb	r3, [r7, #18]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21a      	sxth	r2, r3
 8001620:	7cfb      	ldrb	r3, [r7, #19]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21b      	sxth	r3, r3
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	835a      	strh	r2, [r3, #26]
	sensor_x->B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800162e:	7d3b      	ldrb	r3, [r7, #20]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	7d7b      	ldrb	r3, [r7, #21]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21a      	sxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	815a      	strh	r2, [r3, #10]
	sensor_x->B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001640:	7dbb      	ldrb	r3, [r7, #22]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b21a      	sxth	r2, r3
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21a      	sxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	819a      	strh	r2, [r3, #12]
	sensor_x->MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001652:	7e3b      	ldrb	r3, [r7, #24]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	7e7b      	ldrb	r3, [r7, #25]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21a      	sxth	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	81da      	strh	r2, [r3, #14]
	sensor_x->MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001664:	7ebb      	ldrb	r3, [r7, #26]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	7efb      	ldrb	r3, [r7, #27]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21a      	sxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	821a      	strh	r2, [r3, #16]
	sensor_x->MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001676:	7f3b      	ldrb	r3, [r7, #28]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	b21a      	sxth	r2, r3
 800167c:	7f7b      	ldrb	r3, [r7, #29]
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21a      	sxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	825a      	strh	r2, [r3, #18]
    return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a06      	ldr	r2, [pc, #24]	; (80016bc <vApplicationGetIdleTaskMemory+0x28>)
 80016a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80016aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	200002c4 	.word	0x200002c4
 80016c0:	20000388 	.word	0x20000388

080016c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c8:	f002 faa0 	bl	8003c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016cc:	f000 f819 	bl	8001702 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d0:	f000 f9fe 	bl	8001ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016d4:	f000 f9de 	bl	8001a94 <MX_DMA_Init>
  MX_ADC1_Init();
 80016d8:	f000 f86e 	bl	80017b8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016dc:	f000 f95c 	bl	8001998 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016e0:	f000 f984 	bl	80019ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80016e4:	f000 f9ac 	bl	8001a40 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80016e8:	f000 f8bc 	bl	8001864 <MX_TIM2_Init>
  MX_I2C2_Init();
 80016ec:	f000 f88c 	bl	8001808 <MX_I2C2_Init>
  MX_TIM3_Init();
 80016f0:	f000 f904 	bl	80018fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  
  /*Init system funtion project*/
  Init_System_Funtion_Project();
 80016f4:	f006 fe18 	bl	8008328 <Init_System_Funtion_Project>

#if USE_RTOS_MACHINE_SYSTEM
  /*Start RTOS aplication*/
  Init_RTOS_System_Project();
 80016f8:	f006 fde4 	bl	80082c4 <Init_RTOS_System_Project>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /*Start system aplication no use RTOS*/
	  Routine_Machine_NotUseRTOS();
 80016fc:	f006 fea0 	bl	8008440 <Routine_Machine_NotUseRTOS>
 8001700:	e7fc      	b.n	80016fc <main+0x38>

08001702 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b094      	sub	sp, #80	; 0x50
 8001706:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170c:	2228      	movs	r2, #40	; 0x28
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f00c fed0 	bl	800e4b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001732:	2301      	movs	r3, #1
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001744:	2302      	movs	r3, #2
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800174e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001758:	4618      	mov	r0, r3
 800175a:	f004 fd01 	bl	8006160 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001764:	f000 fafa 	bl	8001d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001778:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	2102      	movs	r1, #2
 8001784:	4618      	mov	r0, r3
 8001786:	f004 ff6d 	bl	8006664 <HAL_RCC_ClockConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001790:	f000 fae4 	bl	8001d5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001794:	2302      	movs	r3, #2
 8001796:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800179c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 f927 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017ac:	f000 fad6 	bl	8001d5c <Error_Handler>
  }
}
 80017b0:	bf00      	nop
 80017b2:	3750      	adds	r7, #80	; 0x50
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_ADC1_Init+0x48>)
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <MX_ADC1_Init+0x4c>)
 80017c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_ADC1_Init+0x48>)
 80017c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <MX_ADC1_Init+0x48>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_ADC1_Init+0x48>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <MX_ADC1_Init+0x48>)
 80017d8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_ADC1_Init+0x48>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_ADC1_Init+0x48>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_ADC1_Init+0x48>)
 80017ec:	f002 fa64 	bl	8003cb8 <HAL_ADC_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80017f6:	f000 fab1 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000058c 	.word	0x2000058c
 8001804:	40012400 	.word	0x40012400

08001808 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_I2C2_Init+0x50>)
 800180e:	4a13      	ldr	r2, [pc, #76]	; (800185c <MX_I2C2_Init+0x54>)
 8001810:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_I2C2_Init+0x50>)
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <MX_I2C2_Init+0x58>)
 8001816:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_I2C2_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_I2C2_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_I2C2_Init+0x50>)
 8001826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <MX_I2C2_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_I2C2_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MX_I2C2_Init+0x50>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_I2C2_Init+0x50>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_I2C2_Init+0x50>)
 8001846:	f003 fc9b 	bl	8005180 <HAL_I2C_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001850:	f000 fa84 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000600 	.word	0x20000600
 800185c:	40005800 	.word	0x40005800
 8001860:	000186a0 	.word	0x000186a0

08001864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <MX_TIM2_Init+0x94>)
 8001882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_TIM2_Init+0x94>)
 800188a:	2247      	movs	r2, #71	; 0x47
 800188c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <MX_TIM2_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF-1;
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <MX_TIM2_Init+0x94>)
 8001896:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800189a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <MX_TIM2_Init+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018aa:	f005 fa19 	bl	8006ce0 <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018b4:	f000 fa52 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018c6:	f005 fc2d 	bl	8007124 <HAL_TIM_ConfigClockSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018d0:	f000 fa44 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018e2:	f005 fdff 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018ec:	f000 fa36 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000654 	.word	0x20000654

080018fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <MX_TIM3_Init+0x94>)
 800191a:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <MX_TIM3_Init+0x98>)
 800191c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <MX_TIM3_Init+0x94>)
 8001920:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_TIM3_Init+0x94>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <MX_TIM3_Init+0x94>)
 800192e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <MX_TIM3_Init+0x94>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_TIM3_Init+0x94>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001940:	4813      	ldr	r0, [pc, #76]	; (8001990 <MX_TIM3_Init+0x94>)
 8001942:	f005 f9cd 	bl	8006ce0 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800194c:	f000 fa06 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	4619      	mov	r1, r3
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <MX_TIM3_Init+0x94>)
 800195e:	f005 fbe1 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001968:	f000 f9f8 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_TIM3_Init+0x94>)
 800197a:	f005 fdb3 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001984:	f000 f9ea 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000069c 	.word	0x2000069c
 8001994:	40000400 	.word	0x40000400

08001998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_USART1_UART_Init+0x50>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019d0:	f005 fdf8 	bl	80075c4 <HAL_UART_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019da:	f000 f9bf 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200006e4 	.word	0x200006e4
 80019e8:	40013800 	.word	0x40013800

080019ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_USART2_UART_Init+0x4c>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <MX_USART2_UART_Init+0x50>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <MX_USART2_UART_Init+0x4c>)
 80019f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_USART2_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_USART2_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_USART2_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_USART2_UART_Init+0x4c>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MX_USART2_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_USART2_UART_Init+0x4c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_USART2_UART_Init+0x4c>)
 8001a24:	f005 fdce 	bl	80075c4 <HAL_UART_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a2e:	f000 f995 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000728 	.word	0x20000728
 8001a3c:	40004400 	.word	0x40004400

08001a40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_USART3_UART_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a78:	f005 fda4 	bl	80075c4 <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a82:	f000 f96b 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000076c 	.word	0x2000076c
 8001a90:	40004800 	.word	0x40004800

08001a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_DMA_Init+0x38>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <MX_DMA_Init+0x38>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_DMA_Init+0x38>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2107      	movs	r1, #7
 8001ab6:	200b      	movs	r0, #11
 8001ab8:	f002 fe0b 	bl	80046d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001abc:	200b      	movs	r0, #11
 8001abe:	f002 fe24 	bl	800470a <HAL_NVIC_EnableIRQ>

}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0318 	add.w	r3, r7, #24
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae4:	4b6c      	ldr	r3, [pc, #432]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a6b      	ldr	r2, [pc, #428]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a65      	ldr	r2, [pc, #404]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a5f      	ldr	r2, [pc, #380]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2c:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a59      	ldr	r2, [pc, #356]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b44:	4b54      	ldr	r3, [pc, #336]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a53      	ldr	r2, [pc, #332]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b4a:	f043 0320 	orr.w	r3, r3, #32
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <MX_GPIO_Init+0x1c8>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SR_Data_Pin|SR_CLK_Pin|SR_LAT_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b62:	484e      	ldr	r0, [pc, #312]	; (8001c9c <MX_GPIO_Init+0x1cc>)
 8001b64:	f003 fadb 	bl	800511e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C1_Select1_GPIO_Port, I2C1_Select1_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2180      	movs	r1, #128	; 0x80
 8001b6c:	484c      	ldr	r0, [pc, #304]	; (8001ca0 <MX_GPIO_Init+0x1d0>)
 8001b6e:	f003 fad6 	bl	800511e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ctl_AI_Dust_Sensor_Pin|SR_RST_Pin, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	f240 2102 	movw	r1, #514	; 0x202
 8001b78:	484a      	ldr	r0, [pc, #296]	; (8001ca4 <MX_GPIO_Init+0x1d4>)
 8001b7a:	f003 fad0 	bl	800511e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RELAY_01_Pin|RELAY_02_Pin|Buzz_Pin|Led_MCH_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f240 1183 	movw	r1, #387	; 0x183
 8001b84:	4848      	ldr	r0, [pc, #288]	; (8001ca8 <MX_GPIO_Init+0x1d8>)
 8001b86:	f003 faca 	bl	800511e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, So2_Hx711_Clk_Pin|LED_SST3_Pin|LED_SST2_Pin|LED_SST1_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f244 0107 	movw	r1, #16391	; 0x4007
 8001b90:	4846      	ldr	r0, [pc, #280]	; (8001cac <MX_GPIO_Init+0x1dc>)
 8001b92:	f003 fac4 	bl	800511e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SR_Data_Pin SR_CLK_Pin SR_LAT_Pin */
  GPIO_InitStruct.Pin = SR_Data_Pin|SR_CLK_Pin|SR_LAT_Pin;
 8001b96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba8:	f107 0318 	add.w	r3, r7, #24
 8001bac:	4619      	mov	r1, r3
 8001bae:	483b      	ldr	r0, [pc, #236]	; (8001c9c <MX_GPIO_Init+0x1cc>)
 8001bb0:	f003 f91a 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_Select1_Pin */
  GPIO_InitStruct.Pin = I2C1_Select1_Pin;
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2C1_Select1_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 0318 	add.w	r3, r7, #24
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4835      	ldr	r0, [pc, #212]	; (8001ca0 <MX_GPIO_Init+0x1d0>)
 8001bcc:	f003 f90c 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ctl_AI_Dust_Sensor_Pin SR_RST_Pin */
  GPIO_InitStruct.Pin = Ctl_AI_Dust_Sensor_Pin|SR_RST_Pin;
 8001bd0:	f240 2302 	movw	r3, #514	; 0x202
 8001bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2302      	movs	r3, #2
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be2:	f107 0318 	add.w	r3, r7, #24
 8001be6:	4619      	mov	r1, r3
 8001be8:	482e      	ldr	r0, [pc, #184]	; (8001ca4 <MX_GPIO_Init+0x1d4>)
 8001bea:	f003 f8fd 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Sensor_Pin */
  GPIO_InitStruct.Pin = DHT22_Sensor_Pin;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT22_Sensor_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4828      	ldr	r0, [pc, #160]	; (8001ca4 <MX_GPIO_Init+0x1d4>)
 8001c02:	f003 f8f1 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_01_Pin RELAY_02_Pin Buzz_Pin Led_MCH_Pin */
  GPIO_InitStruct.Pin = RELAY_01_Pin|RELAY_02_Pin|Buzz_Pin|Led_MCH_Pin;
 8001c06:	f240 1383 	movw	r3, #387	; 0x183
 8001c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2302      	movs	r3, #2
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4822      	ldr	r0, [pc, #136]	; (8001ca8 <MX_GPIO_Init+0x1d8>)
 8001c20:	f003 f8e2 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : So2_Hx711_Data_Pin */
  GPIO_InitStruct.Pin = So2_Hx711_Data_Pin;
 8001c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(So2_Hx711_Data_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0318 	add.w	r3, r7, #24
 8001c36:	4619      	mov	r1, r3
 8001c38:	481c      	ldr	r0, [pc, #112]	; (8001cac <MX_GPIO_Init+0x1dc>)
 8001c3a:	f003 f8d5 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : So2_Hx711_Clk_Pin LED_SST3_Pin LED_SST2_Pin LED_SST1_Pin */
  GPIO_InitStruct.Pin = So2_Hx711_Clk_Pin|LED_SST3_Pin|LED_SST2_Pin|LED_SST1_Pin;
 8001c3e:	f244 0307 	movw	r3, #16391	; 0x4007
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c50:	f107 0318 	add.w	r3, r7, #24
 8001c54:	4619      	mov	r1, r3
 8001c56:	4815      	ldr	r0, [pc, #84]	; (8001cac <MX_GPIO_Init+0x1dc>)
 8001c58:	f003 f8c6 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_05_UP_Pin BUTTON_06_DOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_05_UP_Pin|BUTTON_06_DOWN_Pin;
 8001c5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480a      	ldr	r0, [pc, #40]	; (8001c9c <MX_GPIO_Init+0x1cc>)
 8001c72:	f003 f8b9 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_01_OPTION_Pin BUTTON_02_SAVE_Pin BUTTON_03_MONITOR_Pin BUTTON_04_SET_GROUP_SENOR_Pin */
  GPIO_InitStruct.Pin = BUTTON_01_OPTION_Pin|BUTTON_02_SAVE_Pin|BUTTON_03_MONITOR_Pin|BUTTON_04_SET_GROUP_SENOR_Pin;
 8001c76:	2378      	movs	r3, #120	; 0x78
 8001c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4808      	ldr	r0, [pc, #32]	; (8001cac <MX_GPIO_Init+0x1dc>)
 8001c8a:	f003 f8ad 	bl	8004de8 <HAL_GPIO_Init>

}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40011000 	.word	0x40011000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	40011800 	.word	0x40011800
 8001cac:	40011400 	.word	0x40011400

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001cc2:	f001 ffb9 	bl	8003c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  if(htim->Instance == TIM3)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d135      	bne.n	8001d3c <HAL_TIM_PeriodElapsedCallback+0x8c>
  {
	 //HAL_GPIO_TogglePin(Led_MCH_GPIO_Port, Led_MCH_Pin);
	 Blink_Led01(&pgm_1);
 8001cd0:	481e      	ldr	r0, [pc, #120]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001cd2:	f000 fe58 	bl	8002986 <Blink_Led01>
	 time_wake_up_pump++;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001ce0:	801a      	strh	r2, [r3, #0]
	 time_reset_lora_module++;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001cec:	801a      	strh	r2, [r3, #0]
    if(time_wake_up_pump == 1)
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d103      	bne.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x4e>
    {
        Send_Data_74HC595(0xAF);
 8001cf6:	20af      	movs	r0, #175	; 0xaf
 8001cf8:	f001 ff52 	bl	8003ba0 <Send_Data_74HC595>
 8001cfc:	e016      	b.n	8001d2c <HAL_TIM_PeriodElapsedCallback+0x7c>
    }
    else if(time_wake_up_pump == 181)
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2bb5      	cmp	r3, #181	; 0xb5
 8001d04:	d106      	bne.n	8001d14 <HAL_TIM_PeriodElapsedCallback+0x64>
    {
    	  flag_system.check_start_mesurment_sensor = 1;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	709a      	strb	r2, [r3, #2]
    	  Send_Data_74HC595(0xFF);
 8001d0c:	20ff      	movs	r0, #255	; 0xff
 8001d0e:	f001 ff47 	bl	8003ba0 <Send_Data_74HC595>
 8001d12:	e00b      	b.n	8001d2c <HAL_TIM_PeriodElapsedCallback+0x7c>
    }
    else if(time_wake_up_pump == 361)
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f240 1269 	movw	r2, #361	; 0x169
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d105      	bne.n	8001d2c <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
    	 Send_Data_74HC595(0xFF);
 8001d20:	20ff      	movs	r0, #255	; 0xff
 8001d22:	f001 ff3d 	bl	8003ba0 <Send_Data_74HC595>
    	 time_wake_up_pump= 0;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	801a      	strh	r2, [r3, #0]
    }

	 if(time_reset_lora_module == 300)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d34:	d102      	bne.n	8001d3c <HAL_TIM_PeriodElapsedCallback+0x8c>
	 {
		 //Init_Cmd_Transmit_Lora();
		 time_reset_lora_module = 0;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	801a      	strh	r2, [r3, #0]
	 }
  }

  /* USER CODE END Callback 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	2000083c 	.word	0x2000083c
 8001d50:	20000588 	.word	0x20000588
 8001d54:	2000058a 	.word	0x2000058a
 8001d58:	20001c2c 	.word	0x20001c2c

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <Error_Handler+0x8>
	...

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_MspInit+0x68>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_MspInit+0x68>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6193      	str	r3, [r2, #24]
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_MspInit+0x68>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_MspInit+0x68>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_MspInit+0x68>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_MspInit+0x68>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	210f      	movs	r1, #15
 8001da2:	f06f 0001 	mvn.w	r0, #1
 8001da6:	f002 fc94 	bl	80046d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_MspInit+0x6c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_MspInit+0x6c>)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a28      	ldr	r2, [pc, #160]	; (8001e94 <HAL_ADC_MspInit+0xbc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d149      	bne.n	8001e8c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_ADC_MspInit+0xc0>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <HAL_ADC_MspInit+0xc0>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_ADC_MspInit+0xc0>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e10:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_ADC_MspInit+0xc0>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <HAL_ADC_MspInit+0xc0>)
 8001e16:	f043 0310 	orr.w	r3, r3, #16
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_ADC_MspInit+0xc0>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e28:	2307      	movs	r3, #7
 8001e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4619      	mov	r1, r3
 8001e36:	4819      	ldr	r0, [pc, #100]	; (8001e9c <HAL_ADC_MspInit+0xc4>)
 8001e38:	f002 ffd6 	bl	8004de8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e3e:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_ADC_MspInit+0xcc>)
 8001e40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e66:	2220      	movs	r2, #32
 8001e68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e72:	f002 fc59 	bl	8004728 <HAL_DMA_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001e7c:	f7ff ff6e 	bl	8001d5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e84:	621a      	str	r2, [r3, #32]
 8001e86:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_ADC_MspInit+0xc8>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40012400 	.word	0x40012400
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	200005bc 	.word	0x200005bc
 8001ea4:	40020008 	.word	0x40020008

08001ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <HAL_I2C_MspInit+0x74>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d124      	bne.n	8001f12 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_I2C_MspInit+0x78>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_I2C_MspInit+0x78>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_I2C_MspInit+0x78>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001ee0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ee4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee6:	2312      	movs	r3, #18
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <HAL_I2C_MspInit+0x7c>)
 8001ef6:	f002 ff77 	bl	8004de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_I2C_MspInit+0x78>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_I2C_MspInit+0x78>)
 8001f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_I2C_MspInit+0x78>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f12:	bf00      	nop
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40005800 	.word	0x40005800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010c00 	.word	0x40010c00

08001f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d10c      	bne.n	8001f54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_TIM_Base_MspInit+0x68>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_TIM_Base_MspInit+0x68>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_TIM_Base_MspInit+0x68>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f52:	e018      	b.n	8001f86 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <HAL_TIM_Base_MspInit+0x6c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d113      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_TIM_Base_MspInit+0x68>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_TIM_Base_MspInit+0x68>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_TIM_Base_MspInit+0x68>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2106      	movs	r1, #6
 8001f7a:	201d      	movs	r0, #29
 8001f7c:	f002 fba9 	bl	80046d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f80:	201d      	movs	r0, #29
 8001f82:	f002 fbc2 	bl	800470a <HAL_NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40000400 	.word	0x40000400

08001f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	; (8002124 <HAL_UART_MspInit+0x18c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d132      	bne.n	800201e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb8:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <HAL_UART_MspInit+0x190>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a5a      	ldr	r2, [pc, #360]	; (8002128 <HAL_UART_MspInit+0x190>)
 8001fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b58      	ldr	r3, [pc, #352]	; (8002128 <HAL_UART_MspInit+0x190>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fcc:	623b      	str	r3, [r7, #32]
 8001fce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd0:	4b55      	ldr	r3, [pc, #340]	; (8002128 <HAL_UART_MspInit+0x190>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a54      	ldr	r2, [pc, #336]	; (8002128 <HAL_UART_MspInit+0x190>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b52      	ldr	r3, [pc, #328]	; (8002128 <HAL_UART_MspInit+0x190>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_Co2_Sensor_Tx_Pin;
 8001fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(USART1_Co2_Sensor_Tx_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	484b      	ldr	r0, [pc, #300]	; (800212c <HAL_UART_MspInit+0x194>)
 8001ffe:	f002 fef3 	bl	8004de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_Co2_SenSor_Rx_Pin;
 8002002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002008:	2300      	movs	r3, #0
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_Co2_SenSor_Rx_GPIO_Port, &GPIO_InitStruct);
 8002010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002014:	4619      	mov	r1, r3
 8002016:	4845      	ldr	r0, [pc, #276]	; (800212c <HAL_UART_MspInit+0x194>)
 8002018:	f002 fee6 	bl	8004de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800201c:	e07e      	b.n	800211c <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a43      	ldr	r2, [pc, #268]	; (8002130 <HAL_UART_MspInit+0x198>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d130      	bne.n	800208a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002028:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <HAL_UART_MspInit+0x190>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	4a3e      	ldr	r2, [pc, #248]	; (8002128 <HAL_UART_MspInit+0x190>)
 800202e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002032:	61d3      	str	r3, [r2, #28]
 8002034:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <HAL_UART_MspInit+0x190>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_UART_MspInit+0x190>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a38      	ldr	r2, [pc, #224]	; (8002128 <HAL_UART_MspInit+0x190>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_UART_MspInit+0x190>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_Dust_Sensor_Tx_Pin;
 8002058:	2304      	movs	r3, #4
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(USART2_Dust_Sensor_Tx_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002068:	4619      	mov	r1, r3
 800206a:	4830      	ldr	r0, [pc, #192]	; (800212c <HAL_UART_MspInit+0x194>)
 800206c:	f002 febc 	bl	8004de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_Dust_Sensor_Rx_Pin;
 8002070:	2308      	movs	r3, #8
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART2_Dust_Sensor_Rx_GPIO_Port, &GPIO_InitStruct);
 800207c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002080:	4619      	mov	r1, r3
 8002082:	482a      	ldr	r0, [pc, #168]	; (800212c <HAL_UART_MspInit+0x194>)
 8002084:	f002 feb0 	bl	8004de8 <HAL_GPIO_Init>
}
 8002088:	e048      	b.n	800211c <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a29      	ldr	r2, [pc, #164]	; (8002134 <HAL_UART_MspInit+0x19c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d143      	bne.n	800211c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_UART_MspInit+0x190>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <HAL_UART_MspInit+0x190>)
 800209a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209e:	61d3      	str	r3, [r2, #28]
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_UART_MspInit+0x190>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_UART_MspInit+0x190>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_UART_MspInit+0x190>)
 80020b2:	f043 0320 	orr.w	r3, r3, #32
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_UART_MspInit+0x190>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_Debug_Pin;
 80020c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(UART3_TX_Debug_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	4619      	mov	r1, r3
 80020d8:	4817      	ldr	r0, [pc, #92]	; (8002138 <HAL_UART_MspInit+0x1a0>)
 80020da:	f002 fe85 	bl	8004de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART3_RX_Debug_Pin;
 80020de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART3_RX_Debug_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f0:	4619      	mov	r1, r3
 80020f2:	4811      	ldr	r0, [pc, #68]	; (8002138 <HAL_UART_MspInit+0x1a0>)
 80020f4:	f002 fe78 	bl	8004de8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_UART_MspInit+0x1a4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
 80020fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002100:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
 800210e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002110:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_UART_MspInit+0x1a4>)
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	6053      	str	r3, [r2, #4]
}
 800211c:	bf00      	nop
 800211e:	3738      	adds	r7, #56	; 0x38
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40013800 	.word	0x40013800
 8002128:	40021000 	.word	0x40021000
 800212c:	40010800 	.word	0x40010800
 8002130:	40004400 	.word	0x40004400
 8002134:	40004800 	.word	0x40004800
 8002138:	40011400 	.word	0x40011400
 800213c:	40010000 	.word	0x40010000

08002140 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	; 0x30
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002156:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <HAL_InitTick+0xd0>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <HAL_InitTick+0xd0>)
 800215c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002160:	6193      	str	r3, [r2, #24]
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <HAL_InitTick+0xd0>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800216e:	f107 020c 	add.w	r2, r7, #12
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f004 fbed 	bl	8006958 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800217e:	f004 fbd7 	bl	8006930 <HAL_RCC_GetPCLK2Freq>
 8002182:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	4a23      	ldr	r2, [pc, #140]	; (8002214 <HAL_InitTick+0xd4>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	3b01      	subs	r3, #1
 8002190:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_InitTick+0xd8>)
 8002194:	4a21      	ldr	r2, [pc, #132]	; (800221c <HAL_InitTick+0xdc>)
 8002196:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002198:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <HAL_InitTick+0xd8>)
 800219a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800219e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021a0:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_InitTick+0xd8>)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021a6:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <HAL_InitTick+0xd8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_InitTick+0xd8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_InitTick+0xd8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80021b8:	4817      	ldr	r0, [pc, #92]	; (8002218 <HAL_InitTick+0xd8>)
 80021ba:	f004 fd91 	bl	8006ce0 <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11b      	bne.n	8002204 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021cc:	4812      	ldr	r0, [pc, #72]	; (8002218 <HAL_InitTick+0xd8>)
 80021ce:	f004 fe21 	bl	8006e14 <HAL_TIM_Base_Start_IT>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80021d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d111      	bne.n	8002204 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021e0:	2019      	movs	r0, #25
 80021e2:	f002 fa92 	bl	800470a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d808      	bhi.n	80021fe <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	2019      	movs	r0, #25
 80021f2:	f002 fa6e 	bl	80046d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <HAL_InitTick+0xe0>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	e002      	b.n	8002204 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002204:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002208:	4618      	mov	r0, r3
 800220a:	3730      	adds	r7, #48	; 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	431bde83 	.word	0x431bde83
 8002218:	200007b0 	.word	0x200007b0
 800221c:	40012c00 	.word	0x40012c00
 8002220:	20000004 	.word	0x20000004

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
	...

08002250 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <DMA1_Channel1_IRQHandler+0x10>)
 8002256:	f002 fac1 	bl	80047dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200005bc 	.word	0x200005bc

08002264 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <TIM1_UP_IRQHandler+0x10>)
 800226a:	f004 fe53 	bl	8006f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200007b0 	.word	0x200007b0

08002278 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <TIM3_IRQHandler+0x10>)
 800227e:	f004 fe49 	bl	8006f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000069c 	.word	0x2000069c

0800228c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	return 1;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <_kill>:

int _kill(int pid, int sig)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022a4:	f00b ffd6 	bl	800e254 <__errno>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2216      	movs	r2, #22
 80022ac:	601a      	str	r2, [r3, #0]
	return -1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_exit>:

void _exit (int status)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffe7 	bl	800229a <_kill>
	while (1) {}		/* Make sure we hang here */
 80022cc:	e7fe      	b.n	80022cc <_exit+0x12>

080022ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e00a      	b.n	80022f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022e0:	f3af 8000 	nop.w
 80022e4:	4601      	mov	r1, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	b2ca      	uxtb	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	dbf0      	blt.n	80022e0 <_read+0x12>
	}

return len;
 80022fe:	687b      	ldr	r3, [r7, #4]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e009      	b.n	800232e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	60ba      	str	r2, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	dbf1      	blt.n	800231a <_write+0x12>
	}
	return len;
 8002336:	687b      	ldr	r3, [r7, #4]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_close>:

int _close(int file)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002366:	605a      	str	r2, [r3, #4]
	return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <_isatty>:

int _isatty(int file)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	return 1;
 800237c:	2301      	movs	r3, #1
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
	return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <_sbrk+0x5c>)
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <_sbrk+0x60>)
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_sbrk+0x64>)
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <_sbrk+0x68>)
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d207      	bcs.n	80023e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d0:	f00b ff40 	bl	800e254 <__errno>
 80023d4:	4603      	mov	r3, r0
 80023d6:	220c      	movs	r2, #12
 80023d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023de:	e009      	b.n	80023f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <_sbrk+0x64>)
 80023f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20005000 	.word	0x20005000
 8002400:	00000400 	.word	0x00000400
 8002404:	200007f8 	.word	0x200007f8
 8002408:	20001c78 	.word	0x20001c78

0800240c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800241a:	490d      	ldr	r1, [pc, #52]	; (8002450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002430:	4c0a      	ldr	r4, [pc, #40]	; (800245c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800243e:	f7ff ffe5 	bl	800240c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002442:	f00c f803 	bl	800e44c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002446:	f7ff f93d 	bl	80016c4 <main>
  bx lr
 800244a:	4770      	bx	lr
  ldr r0, =_sdata
 800244c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002450:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 8002454:	0801182c 	.word	0x0801182c
  ldr r2, =_sbss
 8002458:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 800245c:	20001c74 	.word	0x20001c74

08002460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC1_2_IRQHandler>

08002462 <DHT_DelayInit>:
/**
 * @brief DHT_DelayInit
 * 
*/
static void DHT_DelayInit(DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
	Delay_Tim_Init(DHTxx_sensor_x->Timer_DHTxx);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fa99 	bl	80029a6 <Delay_Tim_Init>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <DHT_DelayUs>:

/**
 * @brief DHT_DelayUs
*/
static void DHT_DelayUs(DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x, uint16_t Time)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
	Delay_Timer_Us(DHTxx_sensor_x->Timer_DHTxx, Time);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	887a      	ldrh	r2, [r7, #2]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fa93 	bl	80029bc <Delay_Timer_Us>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <DHT_Set_Pin_Output>:

/**
 * @brief DHT_Set_Pin_Output
*/
static void  DHT_Set_Pin_Output(DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHTxx_sensor_x->Pin;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	889b      	ldrh	r3, [r3, #4]
 80024b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ba:	2301      	movs	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2302      	movs	r3, #2
 80024c0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DHTxx_sensor_x->Port_DHTxx, &GPIO_InitStruct);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f107 0208 	add.w	r2, r7, #8
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 fc8b 	bl	8004de8 <HAL_GPIO_Init>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <DHT_Set_Pin_Input>:

/**
 * @brief DHT_Set_Pin_Input
*/
static void DHT_Set_Pin_Input(DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHTxx_sensor_x->Pin;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHTxx_sensor_x->Port_DHTxx, &GPIO_InitStruct);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f107 0208 	add.w	r2, r7, #8
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f002 fc6d 	bl	8004de8 <HAL_GPIO_Init>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <DHT_WritePin>:

/**
 * @brief DHT_WritePin
*/
static void DHT_WritePin(DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x, uint8_t Value)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHTxx_sensor_x->Port_DHTxx, DHTxx_sensor_x->Pin, Value);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6898      	ldr	r0, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	889b      	ldrh	r3, [r3, #4]
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	4619      	mov	r1, r3
 800252e:	f002 fdf6 	bl	800511e <HAL_GPIO_WritePin>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <DHT_ReadPin>:

/**
 * @brief DHT_ReadPin
*/
static uint8_t DHT_ReadPin(DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
	uint8_t value;
	value = HAL_GPIO_ReadPin(DHTxx_sensor_x->Port_DHTxx, DHTxx_sensor_x->Pin);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	889b      	ldrh	r3, [r3, #4]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f002 fdcf 	bl	80050f0 <HAL_GPIO_ReadPin>
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]
	return value;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <DHT22_Start>:

/**
 * @brief DHT22_Start
*/
static uint8_t DHT22_Start (DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
	DHT_Set_Pin_Output(DHTxx_sensor_x); 			// set the pin as output
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff96 	bl	800249e <DHT_Set_Pin_Output>
	DHT_WritePin(DHTxx_sensor_x,0);  		 		// pull the pin low
 8002572:	2100      	movs	r1, #0
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ffce 	bl	8002516 <DHT_WritePin>
	DHT_DelayUs(DHTxx_sensor_x, 1200);   			// wait for > 1ms
 800257a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff7c 	bl	800247c <DHT_DelayUs>

	DHT_Set_Pin_Input(DHTxx_sensor_x);   			// set as input
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ffa8 	bl	80024da <DHT_Set_Pin_Input>
	DHT_DelayUs(DHTxx_sensor_x, 40);  				// wait for 40us
 800258a:	2128      	movs	r1, #40	; 0x28
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff75 	bl	800247c <DHT_DelayUs>
	if (!(DHT_ReadPin(DHTxx_sensor_x))) 			// if the pin is low
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffd1 	bl	800253a <DHT_ReadPin>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10e      	bne.n	80025bc <DHT22_Start+0x5c>
	{
	  	DHT_DelayUs(DHTxx_sensor_x, 80);   					// wait for 80us
 800259e:	2150      	movs	r1, #80	; 0x50
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff6b 	bl	800247c <DHT_DelayUs>
		if ((DHT_ReadPin(DHTxx_sensor_x))) Response = 1;  	// if the pin is high, response is ok
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ffc7 	bl	800253a <DHT_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <DHT22_Start+0x58>
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	e001      	b.n	80025bc <DHT22_Start+0x5c>
		else Response = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
	}
	while ((DHT_ReadPin(DHTxx_sensor_x)));   				// wait for the pin to go low
 80025bc:	bf00      	nop
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffbb 	bl	800253a <DHT_ReadPin>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <DHT22_Start+0x5e>
	return Response;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <DHT22_Read>:

/**
 * @brief DHT22_Read
*/
static uint8_t DHT22_Read (DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
	DHT_Set_Pin_Input(DHTxx_sensor_x);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff7a 	bl	80024da <DHT_Set_Pin_Input>
	for (uint8_t i=0 ; i<8; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	73bb      	strb	r3, [r7, #14]
 80025ea:	e035      	b.n	8002658 <DHT22_Read+0x84>
	{
		while (!(DHT_ReadPin(DHTxx_sensor_x)));   			// wait for the pin to go high
 80025ec:	bf00      	nop
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa3 	bl	800253a <DHT_ReadPin>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f9      	beq.n	80025ee <DHT22_Read+0x1a>
	    DHT_DelayUs(DHTxx_sensor_x, 40);  					// wait for 40 us
 80025fa:	2128      	movs	r1, #40	; 0x28
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff3d 	bl	800247c <DHT_DelayUs>

		if (!(DHT_ReadPin(DHTxx_sensor_x)))   				// if the pin is low
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ff99 	bl	800253a <DHT_ReadPin>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10e      	bne.n	800262c <DHT22_Read+0x58>
		{
			value &= ~(1<<(7-i));  							// write 0
 800260e:	7bbb      	ldrb	r3, [r7, #14]
 8002610:	f1c3 0307 	rsb	r3, r3, #7
 8002614:	2201      	movs	r2, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	b25b      	sxtb	r3, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	b25a      	sxtb	r2, r3
 8002620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002624:	4013      	ands	r3, r2
 8002626:	b25b      	sxtb	r3, r3
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e00b      	b.n	8002644 <DHT22_Read+0x70>
		}
		else value |= 1<<(7-i);  							// if the pin is high, write 1
 800262c:	7bbb      	ldrb	r3, [r7, #14]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2201      	movs	r2, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	b25a      	sxtb	r2, r3
 800263a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263e:	4313      	orrs	r3, r2
 8002640:	b25b      	sxtb	r3, r3
 8002642:	73fb      	strb	r3, [r7, #15]
		while ((DHT_ReadPin(DHTxx_sensor_x)));  			// wait for the pin to go low
 8002644:	bf00      	nop
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff77 	bl	800253a <DHT_ReadPin>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f9      	bne.n	8002646 <DHT22_Read+0x72>
	for (uint8_t i=0 ; i<8; i++)
 8002652:	7bbb      	ldrb	r3, [r7, #14]
 8002654:	3301      	adds	r3, #1
 8002656:	73bb      	strb	r3, [r7, #14]
 8002658:	7bbb      	ldrb	r3, [r7, #14]
 800265a:	2b07      	cmp	r3, #7
 800265c:	d9c6      	bls.n	80025ec <DHT22_Read+0x18>
	}
	return value;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <DHT_Init>:

/**
 * @brief DHT_Init
*/
void DHT_Init(DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DHTxx_PORT, uint16_t DHTxx_Pin)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	807b      	strh	r3, [r7, #2]
	DHTxx_sensor_x->Port_DHTxx = DHTxx_PORT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	609a      	str	r2, [r3, #8]
	DHTxx_sensor_x->Pin = DHTxx_Pin;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	809a      	strh	r2, [r3, #4]
	DHTxx_sensor_x->Timer_DHTxx = Timer;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	601a      	str	r2, [r3, #0]
	DHTxx_sensor_x->Temperature = 0;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	60da      	str	r2, [r3, #12]
	DHTxx_sensor_x->Humidity = 0;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
	DHT_DelayInit(DHTxx_sensor_x);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff fee2 	bl	8002462 <DHT_DelayInit>
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <DHT_Read_Temperature_Humidity>:

/**
 * @brief DHT_Read_Temperature_Humidity
*/
uint8_t DHT_Read_Temperature_Humidity(DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x, float *temperature, float *humidity)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	uint16_t SUM, RH, TEMP;

	DHT22_Start(DHTxx_sensor_x);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff ff53 	bl	8002560 <DHT22_Start>
	Rh_byte1 = DHT22_Read(DHTxx_sensor_x);
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff ff8a 	bl	80025d4 <DHT22_Read>
 80026c0:	4603      	mov	r3, r0
 80026c2:	77fb      	strb	r3, [r7, #31]
	Rh_byte2 = DHT22_Read(DHTxx_sensor_x);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff ff85 	bl	80025d4 <DHT22_Read>
 80026ca:	4603      	mov	r3, r0
 80026cc:	77bb      	strb	r3, [r7, #30]
	Temp_byte1 = DHT22_Read(DHTxx_sensor_x);
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff ff80 	bl	80025d4 <DHT22_Read>
 80026d4:	4603      	mov	r3, r0
 80026d6:	777b      	strb	r3, [r7, #29]
	Temp_byte2 = DHT22_Read(DHTxx_sensor_x);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff ff7b 	bl	80025d4 <DHT22_Read>
 80026de:	4603      	mov	r3, r0
 80026e0:	773b      	strb	r3, [r7, #28]
	SUM = DHT22_Read(DHTxx_sensor_x);
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff ff76 	bl	80025d4 <DHT22_Read>
 80026e8:	4603      	mov	r3, r0
 80026ea:	837b      	strh	r3, [r7, #26]

	TEMP = ((Temp_byte1<<8)|Temp_byte2);
 80026ec:	7f7b      	ldrb	r3, [r7, #29]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	b21a      	sxth	r2, r3
 80026f2:	7f3b      	ldrb	r3, [r7, #28]
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	833b      	strh	r3, [r7, #24]
	RH = ((Rh_byte1<<8)|Rh_byte2);
 80026fc:	7ffb      	ldrb	r3, [r7, #31]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	b21a      	sxth	r2, r3
 8002702:	7fbb      	ldrb	r3, [r7, #30]
 8002704:	b21b      	sxth	r3, r3
 8002706:	4313      	orrs	r3, r2
 8002708:	b21b      	sxth	r3, r3
 800270a:	82fb      	strh	r3, [r7, #22]

	DHTxx_sensor_x->Temperature = (float)(TEMP/10.0f);
 800270c:	8b3b      	ldrh	r3, [r7, #24]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fac4 	bl	8000c9c <__aeabi_i2f>
 8002714:	4603      	mov	r3, r0
 8002716:	4911      	ldr	r1, [pc, #68]	; (800275c <DHT_Read_Temperature_Humidity+0xb4>)
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fbc7 	bl	8000eac <__aeabi_fdiv>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	60da      	str	r2, [r3, #12]
	DHTxx_sensor_x->Humidity = (float)(RH/10.0f);
 8002726:	8afb      	ldrh	r3, [r7, #22]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe fab7 	bl	8000c9c <__aeabi_i2f>
 800272e:	4603      	mov	r3, r0
 8002730:	490a      	ldr	r1, [pc, #40]	; (800275c <DHT_Read_Temperature_Humidity+0xb4>)
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fbba 	bl	8000eac <__aeabi_fdiv>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	611a      	str	r2, [r3, #16]

	*temperature = DHTxx_sensor_x->Temperature;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	601a      	str	r2, [r3, #0]
	*humidity = DHTxx_sensor_x->Humidity;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	601a      	str	r2, [r3, #0]

	return SUM;
 8002750:	8b7b      	ldrh	r3, [r7, #26]
 8002752:	b2db      	uxtb	r3, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	41200000 	.word	0x41200000

08002760 <DHT_Read_Temperature_Humidity_Average>:

/**
 * @brief DHT_Read_Temperature_Humidity_Average
*/
void DHT_Read_Temperature_Humidity_Average(DHTxx_Humidity_Sensor_Name *DHTxx_sensor_x, float *temperature, float *humidity, uint8_t sample)
{
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	b08f      	sub	sp, #60	; 0x3c
 8002766:	af00      	add	r7, sp, #0
 8002768:	6178      	str	r0, [r7, #20]
 800276a:	6139      	str	r1, [r7, #16]
 800276c:	60fa      	str	r2, [r7, #12]
 800276e:	72fb      	strb	r3, [r7, #11]
 8002770:	466b      	mov	r3, sp
 8002772:	461e      	mov	r6, r3
	float arr1_buff_temp[sample];
 8002774:	7af9      	ldrb	r1, [r7, #11]
 8002776:	460b      	mov	r3, r1
 8002778:	3b01      	subs	r3, #1
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277c:	b2cb      	uxtb	r3, r1
 800277e:	2200      	movs	r2, #0
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	0143      	lsls	r3, r0, #5
 8002790:	6838      	ldr	r0, [r7, #0]
 8002792:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	0142      	lsls	r2, r0, #5
 800279a:	b2cb      	uxtb	r3, r1
 800279c:	2200      	movs	r2, #0
 800279e:	469a      	mov	sl, r3
 80027a0:	4693      	mov	fp, r2
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80027ae:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80027b2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80027b6:	460b      	mov	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	3307      	adds	r3, #7
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	ebad 0d03 	sub.w	sp, sp, r3
 80027c4:	466b      	mov	r3, sp
 80027c6:	3303      	adds	r3, #3
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
	float arr2_buff_humi[sample];
 80027ce:	7af9      	ldrb	r1, [r7, #11]
 80027d0:	460b      	mov	r3, r1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	b2cb      	uxtb	r3, r1
 80027d8:	2200      	movs	r2, #0
 80027da:	4698      	mov	r8, r3
 80027dc:	4691      	mov	r9, r2
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80027ea:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80027ee:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80027f2:	b2cb      	uxtb	r3, r1
 80027f4:	2200      	movs	r2, #0
 80027f6:	461c      	mov	r4, r3
 80027f8:	4615      	mov	r5, r2
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	016b      	lsls	r3, r5, #5
 8002804:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002808:	0162      	lsls	r2, r4, #5
 800280a:	460b      	mov	r3, r1
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	3307      	adds	r3, #7
 8002810:	08db      	lsrs	r3, r3, #3
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	ebad 0d03 	sub.w	sp, sp, r3
 8002818:	466b      	mov	r3, sp
 800281a:	3303      	adds	r3, #3
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	623b      	str	r3, [r7, #32]
	uint8_t index = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	77fb      	strb	r3, [r7, #31]
	float sum = 0;
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
	float data  = 0;
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
	for(uint8_t i =0; i < sample; i++)
 8002832:	2300      	movs	r3, #0
 8002834:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002838:	e01b      	b.n	8002872 <DHT_Read_Temperature_Humidity_Average+0x112>
	{
		DHT_Read_Temperature_Humidity(DHTxx_sensor_x, temperature, humidity);
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	6939      	ldr	r1, [r7, #16]
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff32 	bl	80026a8 <DHT_Read_Temperature_Humidity>
		arr1_buff_temp[i] = *temperature;
 8002844:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		arr2_buff_humi[i] = *humidity;
 8002852:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		HAL_Delay(1000);
 8002860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002864:	f001 fa04 	bl	8003c70 <HAL_Delay>
	for(uint8_t i =0; i < sample; i++)
 8002868:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800286c:	3301      	adds	r3, #1
 800286e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002872:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002876:	7afb      	ldrb	r3, [r7, #11]
 8002878:	429a      	cmp	r2, r3
 800287a:	d3de      	bcc.n	800283a <DHT_Read_Temperature_Humidity_Average+0xda>
	}

    for(uint8_t i = 0; i < sample; i++)
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002882:	e00f      	b.n	80028a4 <DHT_Read_Temperature_Humidity_Average+0x144>
    {
    	sum += arr1_buff_temp[i];
 8002884:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288e:	4619      	mov	r1, r3
 8002890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002892:	f7fe f94f 	bl	8000b34 <__addsf3>
 8002896:	4603      	mov	r3, r0
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
    for(uint8_t i = 0; i < sample; i++)
 800289a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800289e:	3301      	adds	r3, #1
 80028a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80028a4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80028a8:	7afb      	ldrb	r3, [r7, #11]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d3ea      	bcc.n	8002884 <DHT_Read_Temperature_Humidity_Average+0x124>
    }
     data = sum /sample;
 80028ae:	7afb      	ldrb	r3, [r7, #11]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe f9f3 	bl	8000c9c <__aeabi_i2f>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4619      	mov	r1, r3
 80028ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028bc:	f7fe faf6 	bl	8000eac <__aeabi_fdiv>
 80028c0:	4603      	mov	r3, r0
 80028c2:	61bb      	str	r3, [r7, #24]
     *temperature = data;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	601a      	str	r2, [r3, #0]

     sum = 0;
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	633b      	str	r3, [r7, #48]	; 0x30
     data = 0;
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
     for(uint8_t i =0; i< sample; i++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80028dc:	e00f      	b.n	80028fe <DHT_Read_Temperature_Humidity_Average+0x19e>
     {
    	 sum += arr2_buff_humi[i];
 80028de:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e8:	4619      	mov	r1, r3
 80028ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ec:	f7fe f922 	bl	8000b34 <__addsf3>
 80028f0:	4603      	mov	r3, r0
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
     for(uint8_t i =0; i< sample; i++)
 80028f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028f8:	3301      	adds	r3, #1
 80028fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80028fe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	429a      	cmp	r2, r3
 8002906:	d3ea      	bcc.n	80028de <DHT_Read_Temperature_Humidity_Average+0x17e>
     }
     data = sum /sample;
 8002908:	7afb      	ldrb	r3, [r7, #11]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f9c6 	bl	8000c9c <__aeabi_i2f>
 8002910:	4603      	mov	r3, r0
 8002912:	4619      	mov	r1, r3
 8002914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002916:	f7fe fac9 	bl	8000eac <__aeabi_fdiv>
 800291a:	4603      	mov	r3, r0
 800291c:	61bb      	str	r3, [r7, #24]
     *humidity = data;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	46b5      	mov	sp, r6
}
 8002926:	bf00      	nop
 8002928:	373c      	adds	r7, #60	; 0x3c
 800292a:	46bd      	mov	sp, r7
 800292c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002930 <Debug_Program_Config>:
 * @param port_led_debug 
 * @param pin__led_debug 
 * @param time_out 
 */
void Debug_Program_Config(Debug_Program_Name *program_x, UART_HandleTypeDef *uart_debug,  GPIO_TypeDef *port_led_debug, uint16_t pin__led_debug, uint32_t time_out)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	807b      	strh	r3, [r7, #2]
    program_x->usart = uart_debug;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	601a      	str	r2, [r3, #0]
    program_x->Port = port_led_debug;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	605a      	str	r2, [r3, #4]
    program_x->Pin = pin__led_debug;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	887a      	ldrh	r2, [r7, #2]
 800294e:	811a      	strh	r2, [r3, #8]
    program_x->time_out_uart = time_out;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	60da      	str	r2, [r3, #12]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <Transmit_Data_To_Computer>:
 * @param program_x 
 * @param data 
 * @param size_data 
 */
void Transmit_Data_To_Computer(Debug_Program_Name *program_x, uint8_t *data, uint16_t size_data)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(program_x->usart, data, size_data, program_x->time_out_uart);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	f004 fe70 	bl	800765e <HAL_UART_Transmit>

}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <Blink_Led01>:
 * @brief Blink_Led01
 * 
 * @param program_x 
 */
void Blink_Led01(Debug_Program_Name *program_x)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(program_x->Port, program_x->Pin);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	891b      	ldrh	r3, [r3, #8]
 8002996:	4619      	mov	r1, r3
 8002998:	4610      	mov	r0, r2
 800299a:	f002 fbd8 	bl	800514e <HAL_GPIO_TogglePin>

}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <Delay_Tim_Init>:
 * @brief Config is use mode timer base
 * 
 * @param htim 
 */
void Delay_Tim_Init(TIM_HandleTypeDef *htim)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f004 f9e6 	bl	8006d80 <HAL_TIM_Base_Start>
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <Delay_Timer_Us>:
 * 
 * @param htim 
 * @param time 
 */
void Delay_Timer_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 80029d0:	bf00      	nop
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d3f9      	bcc.n	80029d2 <Delay_Timer_Us+0x16>
}
 80029de:	bf00      	nop
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
	...

080029ec <Display_Setup_Parameter_Sum_pm>:
 * @param LCD 
 * @param sum_pm 
 * @param satatic_data_sum_pm 
 */
void Display_Setup_Parameter_Sum_pm(CLCD_I2C_Name *LCD, uint16_t satatic_data_sum_pm)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
    char string1[10];
    sprintf(string1, "%d", satatic_data_sum_pm);
 80029f8:	887a      	ldrh	r2, [r7, #2]
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	4965      	ldr	r1, [pc, #404]	; (8002b94 <Display_Setup_Parameter_Sum_pm+0x1a8>)
 8002a00:	4618      	mov	r0, r3
 8002a02:	f00c facf 	bl	800efa4 <siprintf>

    CLCD_I2C_SetCursor(LCD, 0,0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f005 f9a4 	bl	8007d58 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(LCD, "SumPm_(ug/m3)");
 8002a10:	4961      	ldr	r1, [pc, #388]	; (8002b98 <Display_Setup_Parameter_Sum_pm+0x1ac>)
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f005 f9f3 	bl	8007dfe <CLCD_I2C_WriteString>
//    CLCD_I2C_SetCursor(LCD, 11, 1);
//    CLCD_I2C_WriteString(LCD, string1);


     /*range 0 - 99 ug/m3*/
     if(( 0 <= satatic_data_sum_pm) && (satatic_data_sum_pm <= 99))
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	2b63      	cmp	r3, #99	; 0x63
 8002a1c:	d825      	bhi.n	8002a6a <Display_Setup_Parameter_Sum_pm+0x7e>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8002a1e:	2201      	movs	r2, #1
 8002a20:	2100      	movs	r1, #0
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f005 f998 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002a28:	495c      	ldr	r1, [pc, #368]	; (8002b9c <Display_Setup_Parameter_Sum_pm+0x1b0>)
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f005 f9e7 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1,1);
 8002a30:	2201      	movs	r2, #1
 8002a32:	210c      	movs	r1, #12
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f005 f98f 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f005 f9dc 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3,1);
 8002a46:	2201      	movs	r2, #1
 8002a48:	210e      	movs	r1, #14
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f005 f984 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002a50:	2120      	movs	r1, #32
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f005 f9c3 	bl	8007dde <CLCD_I2C_WriteChar>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4,1);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f005 f97b 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002a62:	2120      	movs	r1, #32
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f005 f9ba 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 100 - 200 ug/m3*/
     if((100 <= satatic_data_sum_pm) && (satatic_data_sum_pm <= 200))
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	2b63      	cmp	r3, #99	; 0x63
 8002a6e:	d91f      	bls.n	8002ab0 <Display_Setup_Parameter_Sum_pm+0xc4>
 8002a70:	887b      	ldrh	r3, [r7, #2]
 8002a72:	2bc8      	cmp	r3, #200	; 0xc8
 8002a74:	d81c      	bhi.n	8002ab0 <Display_Setup_Parameter_Sum_pm+0xc4>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002a76:	2201      	movs	r2, #1
 8002a78:	2100      	movs	r1, #0
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f005 f96c 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002a80:	4946      	ldr	r1, [pc, #280]	; (8002b9c <Display_Setup_Parameter_Sum_pm+0x1b0>)
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f005 f9bb 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1,1);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	210c      	movs	r1, #12
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f005 f963 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f005 f9b0 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f005 f958 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002aa8:	2120      	movs	r1, #32
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f005 f997 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 200 - 300 ug/m3*/
     if((200 <= satatic_data_sum_pm) && (satatic_data_sum_pm <= 300))
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	2bc7      	cmp	r3, #199	; 0xc7
 8002ab4:	d920      	bls.n	8002af8 <Display_Setup_Parameter_Sum_pm+0x10c>
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002abc:	d81c      	bhi.n	8002af8 <Display_Setup_Parameter_Sum_pm+0x10c>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f005 f948 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002ac8:	4934      	ldr	r1, [pc, #208]	; (8002b9c <Display_Setup_Parameter_Sum_pm+0x1b0>)
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f005 f997 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	210c      	movs	r1, #12
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f005 f93f 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002ada:	f107 030c 	add.w	r3, r7, #12
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f005 f98c 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	210f      	movs	r1, #15
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f005 f934 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002af0:	2120      	movs	r1, #32
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f005 f973 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 300 - 400 ug/m3*/
     if((300 <= satatic_data_sum_pm) && (satatic_data_sum_pm <= 400))
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002afe:	d320      	bcc.n	8002b42 <Display_Setup_Parameter_Sum_pm+0x156>
 8002b00:	887b      	ldrh	r3, [r7, #2]
 8002b02:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002b06:	d81c      	bhi.n	8002b42 <Display_Setup_Parameter_Sum_pm+0x156>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f005 f923 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002b12:	4922      	ldr	r1, [pc, #136]	; (8002b9c <Display_Setup_Parameter_Sum_pm+0x1b0>)
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f005 f972 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	210c      	movs	r1, #12
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f005 f91a 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f005 f967 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002b30:	2201      	movs	r2, #1
 8002b32:	210f      	movs	r1, #15
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f005 f90f 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f005 f94e 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 400 - 500 ug/m3*/
     if((400 <= satatic_data_sum_pm) && (satatic_data_sum_pm <= 500))
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002b48:	d320      	bcc.n	8002b8c <Display_Setup_Parameter_Sum_pm+0x1a0>
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b50:	d81c      	bhi.n	8002b8c <Display_Setup_Parameter_Sum_pm+0x1a0>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002b52:	2201      	movs	r2, #1
 8002b54:	2100      	movs	r1, #0
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f005 f8fe 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002b5c:	490f      	ldr	r1, [pc, #60]	; (8002b9c <Display_Setup_Parameter_Sum_pm+0x1b0>)
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f005 f94d 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002b64:	2201      	movs	r2, #1
 8002b66:	210c      	movs	r1, #12
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f005 f8f5 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f005 f942 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	210f      	movs	r1, #15
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f005 f8ea 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002b84:	2120      	movs	r1, #32
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f005 f929 	bl	8007dde <CLCD_I2C_WriteChar>
     }
}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	08011178 	.word	0x08011178
 8002b98:	08011198 	.word	0x08011198
 8002b9c:	0801118c 	.word	0x0801118c

08002ba0 <Display_Setup_Parameter_Co2>:
 * @param LCD 
 * @param co2_ppm 
 * @param satatic_data_pm2_5 
 */
void Display_Setup_Parameter_Co2(CLCD_I2C_Name *LCD, uint16_t satatic_data_co2)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
    char string1[10];
    sprintf(string1, "%d", satatic_data_co2);
 8002bac:	887a      	ldrh	r2, [r7, #2]
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	49bd      	ldr	r1, [pc, #756]	; (8002ea8 <Display_Setup_Parameter_Co2+0x308>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f00c f9f5 	bl	800efa4 <siprintf>
    CLCD_I2C_SetCursor(LCD, 0,0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f005 f8ca 	bl	8007d58 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(LCD, "Co2_(ppm)");
 8002bc4:	49b9      	ldr	r1, [pc, #740]	; (8002eac <Display_Setup_Parameter_Co2+0x30c>)
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f005 f919 	bl	8007dfe <CLCD_I2C_WriteString>
//    CLCD_I2C_WriteString(LCD, "SetupCalib:     ");
//    CLCD_I2C_SetCursor(LCD, 1, 1);
//    CLCD_I2C_WriteString(LCD, string1);

     /*range 0 - 99 ppm*/
     if(( 0 <= satatic_data_co2) && (satatic_data_co2 <= 99))
 8002bcc:	887b      	ldrh	r3, [r7, #2]
 8002bce:	2b63      	cmp	r3, #99	; 0x63
 8002bd0:	d825      	bhi.n	8002c1e <Display_Setup_Parameter_Co2+0x7e>
     {

         CLCD_I2C_SetCursor(LCD, 0, 1);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f005 f8be 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002bdc:	49b4      	ldr	r1, [pc, #720]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f005 f90d 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002be4:	2201      	movs	r2, #1
 8002be6:	210c      	movs	r1, #12
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f005 f8b5 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f005 f902 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3,1);
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	210e      	movs	r1, #14
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f005 f8aa 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002c04:	2120      	movs	r1, #32
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f005 f8e9 	bl	8007dde <CLCD_I2C_WriteChar>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	210f      	movs	r1, #15
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f005 f8a1 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002c16:	2120      	movs	r1, #32
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f005 f8e0 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 100 - 200 ppm*/
     if((100 <= satatic_data_co2) && (satatic_data_co2 <= 200))
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	2b63      	cmp	r3, #99	; 0x63
 8002c22:	d91f      	bls.n	8002c64 <Display_Setup_Parameter_Co2+0xc4>
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	2bc8      	cmp	r3, #200	; 0xc8
 8002c28:	d81c      	bhi.n	8002c64 <Display_Setup_Parameter_Co2+0xc4>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f005 f892 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002c34:	499e      	ldr	r1, [pc, #632]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f005 f8e1 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	210c      	movs	r1, #12
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f005 f889 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002c46:	f107 030c 	add.w	r3, r7, #12
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f005 f8d6 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002c52:	2201      	movs	r2, #1
 8002c54:	210f      	movs	r1, #15
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f005 f87e 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f005 f8bd 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 200 - 300 ppm*/
     if((200 <= satatic_data_co2) && (satatic_data_co2 <= 300))
 8002c64:	887b      	ldrh	r3, [r7, #2]
 8002c66:	2bc7      	cmp	r3, #199	; 0xc7
 8002c68:	d920      	bls.n	8002cac <Display_Setup_Parameter_Co2+0x10c>
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002c70:	d81c      	bhi.n	8002cac <Display_Setup_Parameter_Co2+0x10c>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8002c72:	2201      	movs	r2, #1
 8002c74:	2100      	movs	r1, #0
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f005 f86e 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002c7c:	498c      	ldr	r1, [pc, #560]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f005 f8bd 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002c84:	2201      	movs	r2, #1
 8002c86:	210c      	movs	r1, #12
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f005 f865 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f005 f8b2 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	210f      	movs	r1, #15
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f005 f85a 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002ca4:	2120      	movs	r1, #32
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f005 f899 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 300 - 400 ppm*/
     if((300 <= satatic_data_co2) && (satatic_data_co2 <= 400))
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002cb2:	d320      	bcc.n	8002cf6 <Display_Setup_Parameter_Co2+0x156>
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002cba:	d81c      	bhi.n	8002cf6 <Display_Setup_Parameter_Co2+0x156>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f005 f849 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002cc6:	497a      	ldr	r1, [pc, #488]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f005 f898 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002cce:	2201      	movs	r2, #1
 8002cd0:	210c      	movs	r1, #12
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f005 f840 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f005 f88d 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f005 f835 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002cee:	2120      	movs	r1, #32
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f005 f874 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 400 - 500 ppm*/
     if((400 <= satatic_data_co2) && (satatic_data_co2 <= 500))
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002cfc:	d320      	bcc.n	8002d40 <Display_Setup_Parameter_Co2+0x1a0>
 8002cfe:	887b      	ldrh	r3, [r7, #2]
 8002d00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d04:	d81c      	bhi.n	8002d40 <Display_Setup_Parameter_Co2+0x1a0>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002d06:	2201      	movs	r2, #1
 8002d08:	2100      	movs	r1, #0
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f005 f824 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002d10:	4967      	ldr	r1, [pc, #412]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f005 f873 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	210c      	movs	r1, #12
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f005 f81b 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	4619      	mov	r1, r3
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f005 f868 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002d2e:	2201      	movs	r2, #1
 8002d30:	210f      	movs	r1, #15
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f005 f810 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002d38:	2120      	movs	r1, #32
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f005 f84f 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 500 - 600 ppm*/
     if((500 <= satatic_data_co2) && (satatic_data_co2 <= 600))
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d46:	d320      	bcc.n	8002d8a <Display_Setup_Parameter_Co2+0x1ea>
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002d4e:	d81c      	bhi.n	8002d8a <Display_Setup_Parameter_Co2+0x1ea>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002d50:	2201      	movs	r2, #1
 8002d52:	2100      	movs	r1, #0
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f004 ffff 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002d5a:	4955      	ldr	r1, [pc, #340]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f005 f84e 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002d62:	2201      	movs	r2, #1
 8002d64:	210c      	movs	r1, #12
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f004 fff6 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002d6c:	f107 030c 	add.w	r3, r7, #12
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f005 f843 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f004 ffeb 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002d82:	2120      	movs	r1, #32
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f005 f82a 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 600 - 700 ppm*/
     if((600 <= satatic_data_co2) && (satatic_data_co2 <= 700))
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002d90:	d320      	bcc.n	8002dd4 <Display_Setup_Parameter_Co2+0x234>
 8002d92:	887b      	ldrh	r3, [r7, #2]
 8002d94:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002d98:	d81c      	bhi.n	8002dd4 <Display_Setup_Parameter_Co2+0x234>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f004 ffda 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002da4:	4942      	ldr	r1, [pc, #264]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f005 f829 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002dac:	2201      	movs	r2, #1
 8002dae:	210c      	movs	r1, #12
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f004 ffd1 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f005 f81e 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	210f      	movs	r1, #15
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f004 ffc6 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002dcc:	2120      	movs	r1, #32
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f005 f805 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 700 - 800 ppm*/
     if((700 <= satatic_data_co2) && (satatic_data_co2 <= 800))
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002dda:	d320      	bcc.n	8002e1e <Display_Setup_Parameter_Co2+0x27e>
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002de2:	d81c      	bhi.n	8002e1e <Display_Setup_Parameter_Co2+0x27e>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002de4:	2201      	movs	r2, #1
 8002de6:	2100      	movs	r1, #0
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f004 ffb5 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002dee:	4930      	ldr	r1, [pc, #192]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f005 f804 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002df6:	2201      	movs	r2, #1
 8002df8:	210c      	movs	r1, #12
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f004 ffac 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002e00:	f107 030c 	add.w	r3, r7, #12
 8002e04:	4619      	mov	r1, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f004 fff9 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	210f      	movs	r1, #15
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f004 ffa1 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002e16:	2120      	movs	r1, #32
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f004 ffe0 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 800 - 900 ppm*/
     if((800 <= satatic_data_co2) && (satatic_data_co2 <= 900))
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002e24:	d320      	bcc.n	8002e68 <Display_Setup_Parameter_Co2+0x2c8>
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002e2c:	d81c      	bhi.n	8002e68 <Display_Setup_Parameter_Co2+0x2c8>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8002e2e:	2201      	movs	r2, #1
 8002e30:	2100      	movs	r1, #0
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f004 ff90 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002e38:	491d      	ldr	r1, [pc, #116]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f004 ffdf 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002e40:	2201      	movs	r2, #1
 8002e42:	210c      	movs	r1, #12
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f004 ff87 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f004 ffd4 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002e56:	2201      	movs	r2, #1
 8002e58:	210f      	movs	r1, #15
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f004 ff7c 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002e60:	2120      	movs	r1, #32
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f004 ffbb 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 900 - 1000 ppm*/
     if((900 <= satatic_data_co2) && (satatic_data_co2 <= 999))
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002e6e:	d328      	bcc.n	8002ec2 <Display_Setup_Parameter_Co2+0x322>
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e76:	d224      	bcs.n	8002ec2 <Display_Setup_Parameter_Co2+0x322>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f004 ff6b 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002e82:	490b      	ldr	r1, [pc, #44]	; (8002eb0 <Display_Setup_Parameter_Co2+0x310>)
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f004 ffba 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	210c      	movs	r1, #12
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f004 ff62 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f004 ffaf 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4,1);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	e006      	b.n	8002eb4 <Display_Setup_Parameter_Co2+0x314>
 8002ea6:	bf00      	nop
 8002ea8:	08011178 	.word	0x08011178
 8002eac:	080111a8 	.word	0x080111a8
 8002eb0:	0801118c 	.word	0x0801118c
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f004 ff4f 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002eba:	2120      	movs	r1, #32
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f004 ff8e 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     if(satatic_data_co2 == 1000)
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec8:	d113      	bne.n	8002ef2 <Display_Setup_Parameter_Co2+0x352>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2100      	movs	r1, #0
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f004 ff42 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002ed4:	4909      	ldr	r1, [pc, #36]	; (8002efc <Display_Setup_Parameter_Co2+0x35c>)
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f004 ff91 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002edc:	2201      	movs	r2, #1
 8002ede:	210c      	movs	r1, #12
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f004 ff39 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002ee6:	f107 030c 	add.w	r3, r7, #12
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f004 ff86 	bl	8007dfe <CLCD_I2C_WriteString>
     }

}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	0801118c 	.word	0x0801118c

08002f00 <Display_Setup_Parameter_So2>:
 * @param LCD 
 * @param so2_ppm 
 * @param satatic_data_so2 
 */
void Display_Setup_Parameter_So2(CLCD_I2C_Name *LCD, uint16_t satatic_data_so2)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
    char string1[10];
    sprintf(string1, "%d", satatic_data_so2);
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	49bd      	ldr	r1, [pc, #756]	; (8003208 <Display_Setup_Parameter_So2+0x308>)
 8002f14:	4618      	mov	r0, r3
 8002f16:	f00c f845 	bl	800efa4 <siprintf>
    CLCD_I2C_SetCursor(LCD, 0,0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f004 ff1a 	bl	8007d58 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(LCD, "So2_(ppm)");
 8002f24:	49b9      	ldr	r1, [pc, #740]	; (800320c <Display_Setup_Parameter_So2+0x30c>)
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f004 ff69 	bl	8007dfe <CLCD_I2C_WriteString>
//    CLCD_I2C_WriteString(LCD, "SetupCalib:     ");
//    CLCD_I2C_SetCursor(LCD, 1,1);
//    CLCD_I2C_WriteString(LCD, string1);

     /*range 0 - 99 ppm*/
     if(( 0 <= satatic_data_so2) && (satatic_data_so2 <= 99))
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	2b63      	cmp	r3, #99	; 0x63
 8002f30:	d825      	bhi.n	8002f7e <Display_Setup_Parameter_So2+0x7e>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8002f32:	2201      	movs	r2, #1
 8002f34:	2100      	movs	r1, #0
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f004 ff0e 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002f3c:	49b4      	ldr	r1, [pc, #720]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f004 ff5d 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002f44:	2201      	movs	r2, #1
 8002f46:	210c      	movs	r1, #12
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f004 ff05 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f004 ff52 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	210e      	movs	r1, #14
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f004 fefa 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002f64:	2120      	movs	r1, #32
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f004 ff39 	bl	8007dde <CLCD_I2C_WriteChar>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	210f      	movs	r1, #15
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f004 fef1 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002f76:	2120      	movs	r1, #32
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f004 ff30 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 100 - 200 ppm*/
     if((100 <= satatic_data_so2) && (satatic_data_so2 <= 200))
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	2b63      	cmp	r3, #99	; 0x63
 8002f82:	d91f      	bls.n	8002fc4 <Display_Setup_Parameter_So2+0xc4>
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	2bc8      	cmp	r3, #200	; 0xc8
 8002f88:	d81c      	bhi.n	8002fc4 <Display_Setup_Parameter_So2+0xc4>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f004 fee2 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002f94:	499e      	ldr	r1, [pc, #632]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f004 ff31 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	210c      	movs	r1, #12
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f004 fed9 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002fa6:	f107 030c 	add.w	r3, r7, #12
 8002faa:	4619      	mov	r1, r3
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f004 ff26 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	210f      	movs	r1, #15
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f004 fece 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8002fbc:	2120      	movs	r1, #32
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f004 ff0d 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 200 - 300 ppm*/
     if((200 <= satatic_data_so2) && (satatic_data_so2 <= 300))
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	2bc7      	cmp	r3, #199	; 0xc7
 8002fc8:	d920      	bls.n	800300c <Display_Setup_Parameter_So2+0x10c>
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002fd0:	d81c      	bhi.n	800300c <Display_Setup_Parameter_So2+0x10c>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f004 febe 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8002fdc:	498c      	ldr	r1, [pc, #560]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f004 ff0d 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	210c      	movs	r1, #12
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f004 feb5 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8002fee:	f107 030c 	add.w	r3, r7, #12
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f004 ff02 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	210f      	movs	r1, #15
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f004 feaa 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003004:	2120      	movs	r1, #32
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f004 fee9 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 300 - 400 ppm*/
     if((300 <= satatic_data_so2) && (satatic_data_so2 <= 400))
 800300c:	887b      	ldrh	r3, [r7, #2]
 800300e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003012:	d320      	bcc.n	8003056 <Display_Setup_Parameter_So2+0x156>
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800301a:	d81c      	bhi.n	8003056 <Display_Setup_Parameter_So2+0x156>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 800301c:	2201      	movs	r2, #1
 800301e:	2100      	movs	r1, #0
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f004 fe99 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003026:	497a      	ldr	r1, [pc, #488]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f004 fee8 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 800302e:	2201      	movs	r2, #1
 8003030:	210c      	movs	r1, #12
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f004 fe90 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003038:	f107 030c 	add.w	r3, r7, #12
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f004 fedd 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8003044:	2201      	movs	r2, #1
 8003046:	210f      	movs	r1, #15
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f004 fe85 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 800304e:	2120      	movs	r1, #32
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f004 fec4 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 400 - 500 ppm*/
     if((400 <= satatic_data_so2) && (satatic_data_so2 <= 500))
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800305c:	d320      	bcc.n	80030a0 <Display_Setup_Parameter_So2+0x1a0>
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003064:	d81c      	bhi.n	80030a0 <Display_Setup_Parameter_So2+0x1a0>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8003066:	2201      	movs	r2, #1
 8003068:	2100      	movs	r1, #0
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f004 fe74 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003070:	4967      	ldr	r1, [pc, #412]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f004 fec3 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8003078:	2201      	movs	r2, #1
 800307a:	210c      	movs	r1, #12
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f004 fe6b 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f004 feb8 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 800308e:	2201      	movs	r2, #1
 8003090:	210f      	movs	r1, #15
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f004 fe60 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003098:	2120      	movs	r1, #32
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f004 fe9f 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 500 - 600 ppm*/
     if((500 <= satatic_data_so2) && (satatic_data_so2 <= 600))
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030a6:	d320      	bcc.n	80030ea <Display_Setup_Parameter_So2+0x1ea>
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80030ae:	d81c      	bhi.n	80030ea <Display_Setup_Parameter_So2+0x1ea>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 80030b0:	2201      	movs	r2, #1
 80030b2:	2100      	movs	r1, #0
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f004 fe4f 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 80030ba:	4955      	ldr	r1, [pc, #340]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f004 fe9e 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 80030c2:	2201      	movs	r2, #1
 80030c4:	210c      	movs	r1, #12
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f004 fe46 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	4619      	mov	r1, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f004 fe93 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 80030d8:	2201      	movs	r2, #1
 80030da:	210f      	movs	r1, #15
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f004 fe3b 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 80030e2:	2120      	movs	r1, #32
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f004 fe7a 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 600 - 700 ppm*/
     if((600 <= satatic_data_so2) && (satatic_data_so2 <= 700))
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80030f0:	d320      	bcc.n	8003134 <Display_Setup_Parameter_So2+0x234>
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80030f8:	d81c      	bhi.n	8003134 <Display_Setup_Parameter_So2+0x234>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 80030fa:	2201      	movs	r2, #1
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f004 fe2a 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003104:	4942      	ldr	r1, [pc, #264]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f004 fe79 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 800310c:	2201      	movs	r2, #1
 800310e:	210c      	movs	r1, #12
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f004 fe21 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003116:	f107 030c 	add.w	r3, r7, #12
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f004 fe6e 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8003122:	2201      	movs	r2, #1
 8003124:	210f      	movs	r1, #15
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f004 fe16 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 800312c:	2120      	movs	r1, #32
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f004 fe55 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 700 - 800 ppm*/
     if((700 <= satatic_data_so2) && (satatic_data_so2 <= 800))
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800313a:	d320      	bcc.n	800317e <Display_Setup_Parameter_So2+0x27e>
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003142:	d81c      	bhi.n	800317e <Display_Setup_Parameter_So2+0x27e>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8003144:	2201      	movs	r2, #1
 8003146:	2100      	movs	r1, #0
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f004 fe05 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 800314e:	4930      	ldr	r1, [pc, #192]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f004 fe54 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8003156:	2201      	movs	r2, #1
 8003158:	210c      	movs	r1, #12
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f004 fdfc 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f004 fe49 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 800316c:	2201      	movs	r2, #1
 800316e:	210f      	movs	r1, #15
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f004 fdf1 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003176:	2120      	movs	r1, #32
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f004 fe30 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 800 - 900 ppm*/
     if((800 <= satatic_data_so2) && (satatic_data_so2 <= 900))
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003184:	d320      	bcc.n	80031c8 <Display_Setup_Parameter_So2+0x2c8>
 8003186:	887b      	ldrh	r3, [r7, #2]
 8003188:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800318c:	d81c      	bhi.n	80031c8 <Display_Setup_Parameter_So2+0x2c8>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 800318e:	2201      	movs	r2, #1
 8003190:	2100      	movs	r1, #0
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f004 fde0 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003198:	491d      	ldr	r1, [pc, #116]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f004 fe2f 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 80031a0:	2201      	movs	r2, #1
 80031a2:	210c      	movs	r1, #12
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f004 fdd7 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f004 fe24 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 80031b6:	2201      	movs	r2, #1
 80031b8:	210f      	movs	r1, #15
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f004 fdcc 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 80031c0:	2120      	movs	r1, #32
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f004 fe0b 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 900 - 1000 ppm*/
     if((900 <= satatic_data_so2) && (satatic_data_so2 <= 999))
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80031ce:	d328      	bcc.n	8003222 <Display_Setup_Parameter_So2+0x322>
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031d6:	d224      	bcs.n	8003222 <Display_Setup_Parameter_So2+0x322>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 80031d8:	2201      	movs	r2, #1
 80031da:	2100      	movs	r1, #0
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f004 fdbb 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 80031e2:	490b      	ldr	r1, [pc, #44]	; (8003210 <Display_Setup_Parameter_So2+0x310>)
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f004 fe0a 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 80031ea:	2201      	movs	r2, #1
 80031ec:	210c      	movs	r1, #12
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f004 fdb2 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 80031f4:	f107 030c 	add.w	r3, r7, #12
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f004 fdff 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 4, 1);
 8003200:	2201      	movs	r2, #1
 8003202:	210f      	movs	r1, #15
 8003204:	e006      	b.n	8003214 <Display_Setup_Parameter_So2+0x314>
 8003206:	bf00      	nop
 8003208:	08011178 	.word	0x08011178
 800320c:	080111b4 	.word	0x080111b4
 8003210:	0801118c 	.word	0x0801118c
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f004 fd9f 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 800321a:	2120      	movs	r1, #32
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f004 fdde 	bl	8007dde <CLCD_I2C_WriteChar>
     }


     /*range 900 - 1000 ppm*/
     if(satatic_data_so2 == 1000)
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003228:	d113      	bne.n	8003252 <Display_Setup_Parameter_So2+0x352>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 800322a:	2201      	movs	r2, #1
 800322c:	2100      	movs	r1, #0
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f004 fd92 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003234:	4909      	ldr	r1, [pc, #36]	; (800325c <Display_Setup_Parameter_So2+0x35c>)
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f004 fde1 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 800323c:	2201      	movs	r2, #1
 800323e:	210c      	movs	r1, #12
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f004 fd89 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f004 fdd6 	bl	8007dfe <CLCD_I2C_WriteString>

     }
}
 8003252:	bf00      	nop
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	0801118c 	.word	0x0801118c

08003260 <Display_Setup_Parameter_Humidity>:
 * @param LCD 
 * @param humidity 
 * @param satatic_data_humididy 
 */
void Display_Setup_Parameter_Humidity(CLCD_I2C_Name *LCD, uint8_t satatic_data_humididy)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
    char string1[10];
    sprintf(string1, "%d", satatic_data_humididy);
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	49bb      	ldr	r1, [pc, #748]	; (8003560 <Display_Setup_Parameter_Humidity+0x300>)
 8003274:	4618      	mov	r0, r3
 8003276:	f00b fe95 	bl	800efa4 <siprintf>

    CLCD_I2C_SetCursor(LCD, 0,0);
 800327a:	2200      	movs	r2, #0
 800327c:	2100      	movs	r1, #0
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f004 fd6a 	bl	8007d58 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(LCD, "Humidity_(");
 8003284:	49b7      	ldr	r1, [pc, #732]	; (8003564 <Display_Setup_Parameter_Humidity+0x304>)
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f004 fdb9 	bl	8007dfe <CLCD_I2C_WriteString>
    CLCD_I2C_WriteChar(LCD, '%');
 800328c:	2125      	movs	r1, #37	; 0x25
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f004 fda5 	bl	8007dde <CLCD_I2C_WriteChar>
    CLCD_I2C_WriteChar(LCD, ')');
 8003294:	2129      	movs	r1, #41	; 0x29
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f004 fda1 	bl	8007dde <CLCD_I2C_WriteChar>
//    CLCD_I2C_WriteString(LCD, "SetupCalib:     ");
//    CLCD_I2C_SetCursor(LCD, 1,1);
//    CLCD_I2C_WriteString(LCD, string1);

     /*range 0 - 9 %*/
     if(( 0 <= satatic_data_humididy) && (satatic_data_humididy <= 9))
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	2b09      	cmp	r3, #9
 80032a0:	d825      	bhi.n	80032ee <Display_Setup_Parameter_Humidity+0x8e>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 80032a2:	2201      	movs	r2, #1
 80032a4:	2100      	movs	r1, #0
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f004 fd56 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 80032ac:	49ae      	ldr	r1, [pc, #696]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f004 fda5 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 80032b4:	2201      	movs	r2, #1
 80032b6:	210c      	movs	r1, #12
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f004 fd4d 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 80032be:	f107 030c 	add.w	r3, r7, #12
 80032c2:	4619      	mov	r1, r3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f004 fd9a 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 2, 1);
 80032ca:	2201      	movs	r2, #1
 80032cc:	210d      	movs	r1, #13
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f004 fd42 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 80032d4:	2120      	movs	r1, #32
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f004 fd81 	bl	8007dde <CLCD_I2C_WriteChar>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 80032dc:	2201      	movs	r2, #1
 80032de:	210e      	movs	r1, #14
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f004 fd39 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 80032e6:	2120      	movs	r1, #32
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f004 fd78 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 10 - 20 % */
     if((10 <= satatic_data_humididy) && (satatic_data_humididy <= 20))
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	2b09      	cmp	r3, #9
 80032f2:	d91f      	bls.n	8003334 <Display_Setup_Parameter_Humidity+0xd4>
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	2b14      	cmp	r3, #20
 80032f8:	d81c      	bhi.n	8003334 <Display_Setup_Parameter_Humidity+0xd4>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 80032fa:	2201      	movs	r2, #1
 80032fc:	2100      	movs	r1, #0
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f004 fd2a 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003304:	4998      	ldr	r1, [pc, #608]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f004 fd79 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 800330c:	2201      	movs	r2, #1
 800330e:	210c      	movs	r1, #12
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f004 fd21 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f004 fd6e 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 8003322:	2201      	movs	r2, #1
 8003324:	210e      	movs	r1, #14
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f004 fd16 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 800332c:	2120      	movs	r1, #32
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f004 fd55 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 20 - 30 % */
     if((20 <= satatic_data_humididy) && (satatic_data_humididy <= 30))
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	2b13      	cmp	r3, #19
 8003338:	d91f      	bls.n	800337a <Display_Setup_Parameter_Humidity+0x11a>
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	2b1e      	cmp	r3, #30
 800333e:	d81c      	bhi.n	800337a <Display_Setup_Parameter_Humidity+0x11a>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8003340:	2201      	movs	r2, #1
 8003342:	2100      	movs	r1, #0
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f004 fd07 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 800334a:	4987      	ldr	r1, [pc, #540]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f004 fd56 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8003352:	2201      	movs	r2, #1
 8003354:	210c      	movs	r1, #12
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f004 fcfe 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f004 fd4b 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 8003368:	2201      	movs	r2, #1
 800336a:	210e      	movs	r1, #14
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f004 fcf3 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003372:	2120      	movs	r1, #32
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f004 fd32 	bl	8007dde <CLCD_I2C_WriteChar>

     }

     /*range 30 - 40 % */
     if((30 <= satatic_data_humididy) && (satatic_data_humididy <= 40))
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	2b1d      	cmp	r3, #29
 800337e:	d91f      	bls.n	80033c0 <Display_Setup_Parameter_Humidity+0x160>
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	2b28      	cmp	r3, #40	; 0x28
 8003384:	d81c      	bhi.n	80033c0 <Display_Setup_Parameter_Humidity+0x160>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8003386:	2201      	movs	r2, #1
 8003388:	2100      	movs	r1, #0
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f004 fce4 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003390:	4975      	ldr	r1, [pc, #468]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f004 fd33 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8003398:	2201      	movs	r2, #1
 800339a:	210c      	movs	r1, #12
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f004 fcdb 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	4619      	mov	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f004 fd28 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 80033ae:	2201      	movs	r2, #1
 80033b0:	210e      	movs	r1, #14
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f004 fcd0 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 80033b8:	2120      	movs	r1, #32
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f004 fd0f 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 40 - 50 % */
     if((40 <= satatic_data_humididy) && (satatic_data_humididy <= 50))
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	2b27      	cmp	r3, #39	; 0x27
 80033c4:	d91f      	bls.n	8003406 <Display_Setup_Parameter_Humidity+0x1a6>
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	2b32      	cmp	r3, #50	; 0x32
 80033ca:	d81c      	bhi.n	8003406 <Display_Setup_Parameter_Humidity+0x1a6>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 80033cc:	2201      	movs	r2, #1
 80033ce:	2100      	movs	r1, #0
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f004 fcc1 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 80033d6:	4964      	ldr	r1, [pc, #400]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f004 fd10 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 80033de:	2201      	movs	r2, #1
 80033e0:	210c      	movs	r1, #12
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f004 fcb8 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f004 fd05 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 80033f4:	2201      	movs	r2, #1
 80033f6:	210e      	movs	r1, #14
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f004 fcad 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 80033fe:	2120      	movs	r1, #32
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f004 fcec 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 50 - 60 % */
     if((50 <= satatic_data_humididy) && (satatic_data_humididy <= 60))
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	2b31      	cmp	r3, #49	; 0x31
 800340a:	d91f      	bls.n	800344c <Display_Setup_Parameter_Humidity+0x1ec>
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	2b3c      	cmp	r3, #60	; 0x3c
 8003410:	d81c      	bhi.n	800344c <Display_Setup_Parameter_Humidity+0x1ec>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8003412:	2201      	movs	r2, #1
 8003414:	2100      	movs	r1, #0
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f004 fc9e 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 800341c:	4952      	ldr	r1, [pc, #328]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f004 fced 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8003424:	2201      	movs	r2, #1
 8003426:	210c      	movs	r1, #12
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f004 fc95 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f004 fce2 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 800343a:	2201      	movs	r2, #1
 800343c:	210e      	movs	r1, #14
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f004 fc8a 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003444:	2120      	movs	r1, #32
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f004 fcc9 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 60 - 70 % */
     if((60 <= satatic_data_humididy) && (satatic_data_humididy <= 70))
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b3b      	cmp	r3, #59	; 0x3b
 8003450:	d91f      	bls.n	8003492 <Display_Setup_Parameter_Humidity+0x232>
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	2b46      	cmp	r3, #70	; 0x46
 8003456:	d81c      	bhi.n	8003492 <Display_Setup_Parameter_Humidity+0x232>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8003458:	2201      	movs	r2, #1
 800345a:	2100      	movs	r1, #0
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f004 fc7b 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003462:	4941      	ldr	r1, [pc, #260]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f004 fcca 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 800346a:	2201      	movs	r2, #1
 800346c:	210c      	movs	r1, #12
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f004 fc72 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f004 fcbf 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 8003480:	2201      	movs	r2, #1
 8003482:	210e      	movs	r1, #14
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f004 fc67 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 800348a:	2120      	movs	r1, #32
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f004 fca6 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 70 - 80 % */
     if((70 <= satatic_data_humididy) && (satatic_data_humididy <= 80))
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	2b45      	cmp	r3, #69	; 0x45
 8003496:	d91f      	bls.n	80034d8 <Display_Setup_Parameter_Humidity+0x278>
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b50      	cmp	r3, #80	; 0x50
 800349c:	d81c      	bhi.n	80034d8 <Display_Setup_Parameter_Humidity+0x278>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 800349e:	2201      	movs	r2, #1
 80034a0:	2100      	movs	r1, #0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f004 fc58 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 80034a8:	492f      	ldr	r1, [pc, #188]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f004 fca7 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 80034b0:	2201      	movs	r2, #1
 80034b2:	210c      	movs	r1, #12
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f004 fc4f 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 80034ba:	f107 030c 	add.w	r3, r7, #12
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f004 fc9c 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 80034c6:	2201      	movs	r2, #1
 80034c8:	210e      	movs	r1, #14
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f004 fc44 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 80034d0:	2120      	movs	r1, #32
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f004 fc83 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 80 - 90 % */
     if((80 <= satatic_data_humididy) && (satatic_data_humididy <= 90))
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	2b4f      	cmp	r3, #79	; 0x4f
 80034dc:	d91f      	bls.n	800351e <Display_Setup_Parameter_Humidity+0x2be>
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	2b5a      	cmp	r3, #90	; 0x5a
 80034e2:	d81c      	bhi.n	800351e <Display_Setup_Parameter_Humidity+0x2be>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 80034e4:	2201      	movs	r2, #1
 80034e6:	2100      	movs	r1, #0
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f004 fc35 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 80034ee:	491e      	ldr	r1, [pc, #120]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f004 fc84 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 80034f6:	2201      	movs	r2, #1
 80034f8:	210c      	movs	r1, #12
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f004 fc2c 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f004 fc79 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 800350c:	2201      	movs	r2, #1
 800350e:	210e      	movs	r1, #14
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f004 fc21 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003516:	2120      	movs	r1, #32
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f004 fc60 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 90 - 100 ppm*/
     if((90 <= satatic_data_humididy) && (satatic_data_humididy <= 99))
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	2b59      	cmp	r3, #89	; 0x59
 8003522:	d926      	bls.n	8003572 <Display_Setup_Parameter_Humidity+0x312>
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	2b63      	cmp	r3, #99	; 0x63
 8003528:	d823      	bhi.n	8003572 <Display_Setup_Parameter_Humidity+0x312>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 800352a:	2201      	movs	r2, #1
 800352c:	2100      	movs	r1, #0
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f004 fc12 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003534:	490c      	ldr	r1, [pc, #48]	; (8003568 <Display_Setup_Parameter_Humidity+0x308>)
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f004 fc61 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 800353c:	2201      	movs	r2, #1
 800353e:	210c      	movs	r1, #12
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f004 fc09 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003546:	f107 030c 	add.w	r3, r7, #12
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f004 fc56 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 8003552:	2201      	movs	r2, #1
 8003554:	210e      	movs	r1, #14
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f004 fbfe 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 800355c:	2120      	movs	r1, #32
 800355e:	e005      	b.n	800356c <Display_Setup_Parameter_Humidity+0x30c>
 8003560:	08011178 	.word	0x08011178
 8003564:	080111c0 	.word	0x080111c0
 8003568:	0801118c 	.word	0x0801118c
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f004 fc36 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     if(satatic_data_humididy == 100)
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d113      	bne.n	80035a0 <Display_Setup_Parameter_Humidity+0x340>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8003578:	2201      	movs	r2, #1
 800357a:	2100      	movs	r1, #0
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f004 fbeb 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003582:	4909      	ldr	r1, [pc, #36]	; (80035a8 <Display_Setup_Parameter_Humidity+0x348>)
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f004 fc3a 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 800358a:	2201      	movs	r2, #1
 800358c:	210c      	movs	r1, #12
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f004 fbe2 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f004 fc2f 	bl	8007dfe <CLCD_I2C_WriteString>
     }
}
 80035a0:	bf00      	nop
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	0801118c 	.word	0x0801118c

080035ac <Display_Setup_Parameter_Temperature>:
 * @param LCD 
 * @param temperature 
 * @param satatic_data_temperature 
 */
void Display_Setup_Parameter_Temperature(CLCD_I2C_Name *LCD, uint8_t satatic_data_temperature)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
    char string1[10];
    sprintf(string1, "%.1d", satatic_data_temperature);
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	f107 030c 	add.w	r3, r7, #12
 80035be:	4978      	ldr	r1, [pc, #480]	; (80037a0 <Display_Setup_Parameter_Temperature+0x1f4>)
 80035c0:	4618      	mov	r0, r3
 80035c2:	f00b fcef 	bl	800efa4 <siprintf>
    CLCD_I2C_SetCursor(LCD, 0,0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f004 fbc4 	bl	8007d58 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(LCD, "Temperature ");
 80035d0:	4974      	ldr	r1, [pc, #464]	; (80037a4 <Display_Setup_Parameter_Temperature+0x1f8>)
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f004 fc13 	bl	8007dfe <CLCD_I2C_WriteString>
    CLCD_I2C_WriteChar(LCD, 0xDF);
 80035d8:	21df      	movs	r1, #223	; 0xdf
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f004 fbff 	bl	8007dde <CLCD_I2C_WriteChar>
    CLCD_I2C_WriteChar(LCD, 'C');
 80035e0:	2143      	movs	r1, #67	; 0x43
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f004 fbfb 	bl	8007dde <CLCD_I2C_WriteChar>
//    CLCD_I2C_WriteString(LCD, "SetupCalib:     ");
//    CLCD_I2C_SetCursor(LCD, 1,1);
//    CLCD_I2C_WriteString(LCD, string1);
    
     /*range 0 - 9 °C*/
     if(( 0 <= satatic_data_temperature) && (satatic_data_temperature <= 9))
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	2b09      	cmp	r3, #9
 80035ec:	d825      	bhi.n	800363a <Display_Setup_Parameter_Temperature+0x8e>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 80035ee:	2201      	movs	r2, #1
 80035f0:	2100      	movs	r1, #0
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f004 fbb0 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 80035f8:	496b      	ldr	r1, [pc, #428]	; (80037a8 <Display_Setup_Parameter_Temperature+0x1fc>)
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f004 fbff 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8003600:	2201      	movs	r2, #1
 8003602:	210c      	movs	r1, #12
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f004 fba7 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f004 fbf4 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 2, 1);
 8003616:	2201      	movs	r2, #1
 8003618:	210d      	movs	r1, #13
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f004 fb9c 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003620:	2120      	movs	r1, #32
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f004 fbdb 	bl	8007dde <CLCD_I2C_WriteChar>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 8003628:	2201      	movs	r2, #1
 800362a:	210e      	movs	r1, #14
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f004 fb93 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003632:	2120      	movs	r1, #32
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f004 fbd2 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 10 - 20 °C */
     if((10 <= satatic_data_temperature) && (satatic_data_temperature <= 20))
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	2b09      	cmp	r3, #9
 800363e:	d91f      	bls.n	8003680 <Display_Setup_Parameter_Temperature+0xd4>
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	2b14      	cmp	r3, #20
 8003644:	d81c      	bhi.n	8003680 <Display_Setup_Parameter_Temperature+0xd4>
     {
         CLCD_I2C_SetCursor(LCD, 0,1);
 8003646:	2201      	movs	r2, #1
 8003648:	2100      	movs	r1, #0
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f004 fb84 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003650:	4955      	ldr	r1, [pc, #340]	; (80037a8 <Display_Setup_Parameter_Temperature+0x1fc>)
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f004 fbd3 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8003658:	2201      	movs	r2, #1
 800365a:	210c      	movs	r1, #12
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f004 fb7b 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f004 fbc8 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 800366e:	2201      	movs	r2, #1
 8003670:	210e      	movs	r1, #14
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f004 fb70 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003678:	2120      	movs	r1, #32
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f004 fbaf 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 20 - 30 °C */
     if((20 <= satatic_data_temperature) && (satatic_data_temperature <= 30))
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	2b13      	cmp	r3, #19
 8003684:	d91f      	bls.n	80036c6 <Display_Setup_Parameter_Temperature+0x11a>
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	2b1e      	cmp	r3, #30
 800368a:	d81c      	bhi.n	80036c6 <Display_Setup_Parameter_Temperature+0x11a>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 800368c:	2201      	movs	r2, #1
 800368e:	2100      	movs	r1, #0
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f004 fb61 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003696:	4944      	ldr	r1, [pc, #272]	; (80037a8 <Display_Setup_Parameter_Temperature+0x1fc>)
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f004 fbb0 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 800369e:	2201      	movs	r2, #1
 80036a0:	210c      	movs	r1, #12
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f004 fb58 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 80036a8:	f107 030c 	add.w	r3, r7, #12
 80036ac:	4619      	mov	r1, r3
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f004 fba5 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 80036b4:	2201      	movs	r2, #1
 80036b6:	210e      	movs	r1, #14
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f004 fb4d 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 80036be:	2120      	movs	r1, #32
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f004 fb8c 	bl	8007dde <CLCD_I2C_WriteChar>

     }

     /*range 30 - 40 °C */
     if((30 <= satatic_data_temperature) && (satatic_data_temperature <= 40))
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	2b1d      	cmp	r3, #29
 80036ca:	d91f      	bls.n	800370c <Display_Setup_Parameter_Temperature+0x160>
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	2b28      	cmp	r3, #40	; 0x28
 80036d0:	d81c      	bhi.n	800370c <Display_Setup_Parameter_Temperature+0x160>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 80036d2:	2201      	movs	r2, #1
 80036d4:	2100      	movs	r1, #0
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f004 fb3e 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 80036dc:	4932      	ldr	r1, [pc, #200]	; (80037a8 <Display_Setup_Parameter_Temperature+0x1fc>)
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f004 fb8d 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 80036e4:	2201      	movs	r2, #1
 80036e6:	210c      	movs	r1, #12
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f004 fb35 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 80036ee:	f107 030c 	add.w	r3, r7, #12
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f004 fb82 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 80036fa:	2201      	movs	r2, #1
 80036fc:	210e      	movs	r1, #14
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f004 fb2a 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003704:	2120      	movs	r1, #32
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f004 fb69 	bl	8007dde <CLCD_I2C_WriteChar>

     }

     /*range 40 - 50 % */
     if((40 <= satatic_data_temperature) && (satatic_data_temperature <= 50))
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	2b27      	cmp	r3, #39	; 0x27
 8003710:	d91f      	bls.n	8003752 <Display_Setup_Parameter_Temperature+0x1a6>
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	2b32      	cmp	r3, #50	; 0x32
 8003716:	d81c      	bhi.n	8003752 <Display_Setup_Parameter_Temperature+0x1a6>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 8003718:	2201      	movs	r2, #1
 800371a:	2100      	movs	r1, #0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f004 fb1b 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003722:	4921      	ldr	r1, [pc, #132]	; (80037a8 <Display_Setup_Parameter_Temperature+0x1fc>)
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f004 fb6a 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 800372a:	2201      	movs	r2, #1
 800372c:	210c      	movs	r1, #12
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f004 fb12 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	4619      	mov	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f004 fb5f 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 8003740:	2201      	movs	r2, #1
 8003742:	210e      	movs	r1, #14
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f004 fb07 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 800374a:	2120      	movs	r1, #32
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f004 fb46 	bl	8007dde <CLCD_I2C_WriteChar>
     }

     /*range 50 - 60 °C */
     if((50 <= satatic_data_temperature) && (satatic_data_temperature <= 60))
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	2b31      	cmp	r3, #49	; 0x31
 8003756:	d91f      	bls.n	8003798 <Display_Setup_Parameter_Temperature+0x1ec>
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	2b3c      	cmp	r3, #60	; 0x3c
 800375c:	d81c      	bhi.n	8003798 <Display_Setup_Parameter_Temperature+0x1ec>
     {

         CLCD_I2C_SetCursor(LCD, 0,1);
 800375e:	2201      	movs	r2, #1
 8003760:	2100      	movs	r1, #0
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f004 faf8 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, "SetupCalib:");
 8003768:	490f      	ldr	r1, [pc, #60]	; (80037a8 <Display_Setup_Parameter_Temperature+0x1fc>)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f004 fb47 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 1, 1);
 8003770:	2201      	movs	r2, #1
 8003772:	210c      	movs	r1, #12
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f004 faef 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteString(LCD, string1);
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f004 fb3c 	bl	8007dfe <CLCD_I2C_WriteString>
         CLCD_I2C_SetCursor(LCD, strlen("SetupCalib:") + 3, 1);
 8003786:	2201      	movs	r2, #1
 8003788:	210e      	movs	r1, #14
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f004 fae4 	bl	8007d58 <CLCD_I2C_SetCursor>
         CLCD_I2C_WriteChar(LCD, ' ');
 8003790:	2120      	movs	r1, #32
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f004 fb23 	bl	8007dde <CLCD_I2C_WriteChar>
     }
}
 8003798:	bf00      	nop
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	080111cc 	.word	0x080111cc
 80037a4:	080111d4 	.word	0x080111d4
 80037a8:	0801118c 	.word	0x0801118c

080037ac <Display_Done>:
 * @brief Display_Done
 * 
 * @param LCD 
 */
void Display_Done(CLCD_I2C_Name *LCD, float value)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	char string1[10];
	sprintf(string1, "%.1f", value);
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	f7fc fe36 	bl	8000428 <__aeabi_f2d>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	f107 000c 	add.w	r0, r7, #12
 80037c4:	495f      	ldr	r1, [pc, #380]	; (8003944 <Display_Done+0x198>)
 80037c6:	f00b fbed 	bl	800efa4 <siprintf>


    /*range 0 - 99 ppm*/
    if(( 0 <= value) && (value <= 9))
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	f7fd fc6a 	bl	80010a8 <__aeabi_fcmpge>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d035      	beq.n	8003846 <Display_Done+0x9a>
 80037da:	495b      	ldr	r1, [pc, #364]	; (8003948 <Display_Done+0x19c>)
 80037dc:	6838      	ldr	r0, [r7, #0]
 80037de:	f7fd fc59 	bl	8001094 <__aeabi_fcmple>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d02e      	beq.n	8003846 <Display_Done+0x9a>
    {

        CLCD_I2C_SetCursor(LCD, 0,2);
 80037e8:	2202      	movs	r2, #2
 80037ea:	2100      	movs	r1, #0
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f004 fab3 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, "D_Value:");
 80037f2:	4956      	ldr	r1, [pc, #344]	; (800394c <Display_Done+0x1a0>)
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f004 fb02 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 0, 2);
 80037fa:	2202      	movs	r2, #2
 80037fc:	2108      	movs	r1, #8
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f004 faaa 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, string1);
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f004 faf7 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 4, 2);
 8003810:	2202      	movs	r2, #2
 8003812:	210c      	movs	r1, #12
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f004 fa9f 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 800381a:	2120      	movs	r1, #32
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f004 fade 	bl	8007dde <CLCD_I2C_WriteChar>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 5, 2);
 8003822:	2202      	movs	r2, #2
 8003824:	210d      	movs	r1, #13
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f004 fa96 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 800382c:	2120      	movs	r1, #32
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f004 fad5 	bl	8007dde <CLCD_I2C_WriteChar>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 6, 2);
 8003834:	2202      	movs	r2, #2
 8003836:	210e      	movs	r1, #14
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f004 fa8d 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 800383e:	2120      	movs	r1, #32
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f004 facc 	bl	8007dde <CLCD_I2C_WriteChar>
    }


    /*range 0 - 99 ppm*/
    if(( 10 <= value) && (value <= 99))
 8003846:	4942      	ldr	r1, [pc, #264]	; (8003950 <Display_Done+0x1a4>)
 8003848:	6838      	ldr	r0, [r7, #0]
 800384a:	f7fd fc2d 	bl	80010a8 <__aeabi_fcmpge>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d02c      	beq.n	80038ae <Display_Done+0x102>
 8003854:	493f      	ldr	r1, [pc, #252]	; (8003954 <Display_Done+0x1a8>)
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	f7fd fc1c 	bl	8001094 <__aeabi_fcmple>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d025      	beq.n	80038ae <Display_Done+0x102>
    {

        CLCD_I2C_SetCursor(LCD, 0,2);
 8003862:	2202      	movs	r2, #2
 8003864:	2100      	movs	r1, #0
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f004 fa76 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, "D_Value:");
 800386c:	4937      	ldr	r1, [pc, #220]	; (800394c <Display_Done+0x1a0>)
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f004 fac5 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 0, 2);
 8003874:	2202      	movs	r2, #2
 8003876:	2108      	movs	r1, #8
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f004 fa6d 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, string1);
 800387e:	f107 030c 	add.w	r3, r7, #12
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f004 faba 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 5, 2);
 800388a:	2202      	movs	r2, #2
 800388c:	210d      	movs	r1, #13
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f004 fa62 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 8003894:	2120      	movs	r1, #32
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f004 faa1 	bl	8007dde <CLCD_I2C_WriteChar>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 6, 2);
 800389c:	2202      	movs	r2, #2
 800389e:	210e      	movs	r1, #14
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f004 fa59 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 80038a6:	2120      	movs	r1, #32
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f004 fa98 	bl	8007dde <CLCD_I2C_WriteChar>
    }

    /*range 900 - 1000 ppm*/
    if((100 <= value) && (value <= 999))
 80038ae:	492a      	ldr	r1, [pc, #168]	; (8003958 <Display_Done+0x1ac>)
 80038b0:	6838      	ldr	r0, [r7, #0]
 80038b2:	f7fd fbf9 	bl	80010a8 <__aeabi_fcmpge>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d023      	beq.n	8003904 <Display_Done+0x158>
 80038bc:	4927      	ldr	r1, [pc, #156]	; (800395c <Display_Done+0x1b0>)
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	f7fd fbe8 	bl	8001094 <__aeabi_fcmple>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01c      	beq.n	8003904 <Display_Done+0x158>
    {
        CLCD_I2C_SetCursor(LCD, 0,2);
 80038ca:	2202      	movs	r2, #2
 80038cc:	2100      	movs	r1, #0
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f004 fa42 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, "D_Value:");
 80038d4:	491d      	ldr	r1, [pc, #116]	; (800394c <Display_Done+0x1a0>)
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f004 fa91 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 0, 2);
 80038dc:	2202      	movs	r2, #2
 80038de:	2108      	movs	r1, #8
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f004 fa39 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, string1);
 80038e6:	f107 030c 	add.w	r3, r7, #12
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f004 fa86 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 6, 2);
 80038f2:	2202      	movs	r2, #2
 80038f4:	210e      	movs	r1, #14
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f004 fa2e 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 80038fc:	2120      	movs	r1, #32
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f004 fa6d 	bl	8007dde <CLCD_I2C_WriteChar>
    }

    if(value == 1000)
 8003904:	4916      	ldr	r1, [pc, #88]	; (8003960 <Display_Done+0x1b4>)
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	f7fd fbb0 	bl	800106c <__aeabi_fcmpeq>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d100      	bne.n	8003914 <Display_Done+0x168>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 0, 2);
        CLCD_I2C_WriteString(LCD, string1);

    }

}
 8003912:	e013      	b.n	800393c <Display_Done+0x190>
        CLCD_I2C_SetCursor(LCD, 0,2);
 8003914:	2202      	movs	r2, #2
 8003916:	2100      	movs	r1, #0
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f004 fa1d 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, "D_Value:");
 800391e:	490b      	ldr	r1, [pc, #44]	; (800394c <Display_Done+0x1a0>)
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f004 fa6c 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("D_Value:") + 0, 2);
 8003926:	2202      	movs	r2, #2
 8003928:	2108      	movs	r1, #8
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f004 fa14 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, string1);
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f004 fa61 	bl	8007dfe <CLCD_I2C_WriteString>
}
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	080111e4 	.word	0x080111e4
 8003948:	41100000 	.word	0x41100000
 800394c:	080111ec 	.word	0x080111ec
 8003950:	41200000 	.word	0x41200000
 8003954:	42c60000 	.word	0x42c60000
 8003958:	42c80000 	.word	0x42c80000
 800395c:	4479c000 	.word	0x4479c000
 8003960:	447a0000 	.word	0x447a0000

08003964 <Display_Monitor>:


void Display_Monitor(CLCD_I2C_Name *LCD, float value)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
	char string1[10];
	sprintf(string1, "%.1f", value);
 800396e:	6838      	ldr	r0, [r7, #0]
 8003970:	f7fc fd5a 	bl	8000428 <__aeabi_f2d>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	f107 000c 	add.w	r0, r7, #12
 800397c:	495f      	ldr	r1, [pc, #380]	; (8003afc <Display_Monitor+0x198>)
 800397e:	f00b fb11 	bl	800efa4 <siprintf>


    /*range 0 - 99 ppm*/
    if(( 0 <= value) && (value <= 9))
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	6838      	ldr	r0, [r7, #0]
 8003988:	f7fd fb8e 	bl	80010a8 <__aeabi_fcmpge>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d035      	beq.n	80039fe <Display_Monitor+0x9a>
 8003992:	495b      	ldr	r1, [pc, #364]	; (8003b00 <Display_Monitor+0x19c>)
 8003994:	6838      	ldr	r0, [r7, #0]
 8003996:	f7fd fb7d 	bl	8001094 <__aeabi_fcmple>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d02e      	beq.n	80039fe <Display_Monitor+0x9a>
    {

        CLCD_I2C_SetCursor(LCD, 0,2);
 80039a0:	2202      	movs	r2, #2
 80039a2:	2100      	movs	r1, #0
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f004 f9d7 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, "Output:");
 80039aa:	4956      	ldr	r1, [pc, #344]	; (8003b04 <Display_Monitor+0x1a0>)
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f004 fa26 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 0, 2);
 80039b2:	2202      	movs	r2, #2
 80039b4:	2107      	movs	r1, #7
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f004 f9ce 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, string1);
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f004 fa1b 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 4, 2);
 80039c8:	2202      	movs	r2, #2
 80039ca:	210b      	movs	r1, #11
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f004 f9c3 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 80039d2:	2120      	movs	r1, #32
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f004 fa02 	bl	8007dde <CLCD_I2C_WriteChar>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 5, 2);
 80039da:	2202      	movs	r2, #2
 80039dc:	210c      	movs	r1, #12
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f004 f9ba 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 80039e4:	2120      	movs	r1, #32
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f004 f9f9 	bl	8007dde <CLCD_I2C_WriteChar>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 6, 2);
 80039ec:	2202      	movs	r2, #2
 80039ee:	210d      	movs	r1, #13
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f004 f9b1 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 80039f6:	2120      	movs	r1, #32
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f004 f9f0 	bl	8007dde <CLCD_I2C_WriteChar>
    }


    /*range 0 - 99 ppm*/
    if(( 10 <= value) && (value <= 99))
 80039fe:	4942      	ldr	r1, [pc, #264]	; (8003b08 <Display_Monitor+0x1a4>)
 8003a00:	6838      	ldr	r0, [r7, #0]
 8003a02:	f7fd fb51 	bl	80010a8 <__aeabi_fcmpge>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02c      	beq.n	8003a66 <Display_Monitor+0x102>
 8003a0c:	493f      	ldr	r1, [pc, #252]	; (8003b0c <Display_Monitor+0x1a8>)
 8003a0e:	6838      	ldr	r0, [r7, #0]
 8003a10:	f7fd fb40 	bl	8001094 <__aeabi_fcmple>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d025      	beq.n	8003a66 <Display_Monitor+0x102>
    {

        CLCD_I2C_SetCursor(LCD, 0,2);
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f004 f99a 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, "Output:");
 8003a24:	4937      	ldr	r1, [pc, #220]	; (8003b04 <Display_Monitor+0x1a0>)
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f004 f9e9 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 0, 2);
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	2107      	movs	r1, #7
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f004 f991 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, string1);
 8003a36:	f107 030c 	add.w	r3, r7, #12
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f004 f9de 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 5, 2);
 8003a42:	2202      	movs	r2, #2
 8003a44:	210c      	movs	r1, #12
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f004 f986 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f004 f9c5 	bl	8007dde <CLCD_I2C_WriteChar>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 6, 2);
 8003a54:	2202      	movs	r2, #2
 8003a56:	210d      	movs	r1, #13
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f004 f97d 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 8003a5e:	2120      	movs	r1, #32
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f004 f9bc 	bl	8007dde <CLCD_I2C_WriteChar>
    }

    /*range 900 - 1000 ppm*/
    if((100 <= value) && (value <= 999))
 8003a66:	492a      	ldr	r1, [pc, #168]	; (8003b10 <Display_Monitor+0x1ac>)
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	f7fd fb1d 	bl	80010a8 <__aeabi_fcmpge>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d023      	beq.n	8003abc <Display_Monitor+0x158>
 8003a74:	4927      	ldr	r1, [pc, #156]	; (8003b14 <Display_Monitor+0x1b0>)
 8003a76:	6838      	ldr	r0, [r7, #0]
 8003a78:	f7fd fb0c 	bl	8001094 <__aeabi_fcmple>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01c      	beq.n	8003abc <Display_Monitor+0x158>
    {
        CLCD_I2C_SetCursor(LCD, 0,2);
 8003a82:	2202      	movs	r2, #2
 8003a84:	2100      	movs	r1, #0
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f004 f966 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, "Output:");
 8003a8c:	491d      	ldr	r1, [pc, #116]	; (8003b04 <Display_Monitor+0x1a0>)
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f004 f9b5 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 0, 2);
 8003a94:	2202      	movs	r2, #2
 8003a96:	2107      	movs	r1, #7
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f004 f95d 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, string1);
 8003a9e:	f107 030c 	add.w	r3, r7, #12
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f004 f9aa 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 6, 2);
 8003aaa:	2202      	movs	r2, #2
 8003aac:	210d      	movs	r1, #13
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f004 f952 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteChar(LCD, ' ');
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f004 f991 	bl	8007dde <CLCD_I2C_WriteChar>
    }

    if(value == 1000)
 8003abc:	4916      	ldr	r1, [pc, #88]	; (8003b18 <Display_Monitor+0x1b4>)
 8003abe:	6838      	ldr	r0, [r7, #0]
 8003ac0:	f7fd fad4 	bl	800106c <__aeabi_fcmpeq>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d100      	bne.n	8003acc <Display_Monitor+0x168>
        CLCD_I2C_WriteString(LCD, "Output:");
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 0, 2);
        CLCD_I2C_WriteString(LCD, string1);

    }
}
 8003aca:	e013      	b.n	8003af4 <Display_Monitor+0x190>
        CLCD_I2C_SetCursor(LCD, 0,2);
 8003acc:	2202      	movs	r2, #2
 8003ace:	2100      	movs	r1, #0
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f004 f941 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, "Output:");
 8003ad6:	490b      	ldr	r1, [pc, #44]	; (8003b04 <Display_Monitor+0x1a0>)
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f004 f990 	bl	8007dfe <CLCD_I2C_WriteString>
        CLCD_I2C_SetCursor(LCD, strlen("Output:") + 0, 2);
 8003ade:	2202      	movs	r2, #2
 8003ae0:	2107      	movs	r1, #7
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f004 f938 	bl	8007d58 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(LCD, string1);
 8003ae8:	f107 030c 	add.w	r3, r7, #12
 8003aec:	4619      	mov	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f004 f985 	bl	8007dfe <CLCD_I2C_WriteString>
}
 8003af4:	bf00      	nop
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	080111e4 	.word	0x080111e4
 8003b00:	41100000 	.word	0x41100000
 8003b04:	080111f8 	.word	0x080111f8
 8003b08:	41200000 	.word	0x41200000
 8003b0c:	42c60000 	.word	0x42c60000
 8003b10:	42c80000 	.word	0x42c80000
 8003b14:	4479c000 	.word	0x4479c000
 8003b18:	447a0000 	.word	0x447a0000

08003b1c <shiftOut>:
#define SR_RST_Pin GPIO_PIN_9
#define SR_RST_GPIO_Port GPIOB


void shiftOut(uint8_t myDataOut) 
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
	uint8_t pinState = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
	for (int i=7; i>=0; i--) 
 8003b2a:	2307      	movs	r3, #7
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	e028      	b.n	8003b82 <shiftOut+0x66>
    { 
		HAL_GPIO_WritePin(SR_CLK_GPIO_Port, SR_CLK_Pin,GPIO_PIN_RESET);
 8003b30:	2200      	movs	r2, #0
 8003b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b36:	4819      	ldr	r0, [pc, #100]	; (8003b9c <shiftOut+0x80>)
 8003b38:	f001 faf1 	bl	800511e <HAL_GPIO_WritePin>
		if ( myDataOut & (1<<i) ) 
 8003b3c:	79fa      	ldrb	r2, [r7, #7]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	fa42 f303 	asr.w	r3, r2, r3
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <shiftOut+0x36>
        {
			pinState= 1;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e001      	b.n	8003b56 <shiftOut+0x3a>
		} 
        else
        {
			pinState= 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
		} 

		HAL_GPIO_WritePin(SR_Data_GPIO_Port,SR_Data_Pin, pinState);
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b5e:	480f      	ldr	r0, [pc, #60]	; (8003b9c <shiftOut+0x80>)
 8003b60:	f001 fadd 	bl	800511e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SR_CLK_GPIO_Port, SR_CLK_Pin , GPIO_PIN_SET);
 8003b64:	2201      	movs	r2, #1
 8003b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b6a:	480c      	ldr	r0, [pc, #48]	; (8003b9c <shiftOut+0x80>)
 8003b6c:	f001 fad7 	bl	800511e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SR_Data_GPIO_Port, SR_Data_Pin, GPIO_PIN_RESET);
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b76:	4809      	ldr	r0, [pc, #36]	; (8003b9c <shiftOut+0x80>)
 8003b78:	f001 fad1 	bl	800511e <HAL_GPIO_WritePin>
	for (int i=7; i>=0; i--) 
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	dad3      	bge.n	8003b30 <shiftOut+0x14>

	} 
	//stop shifting
	HAL_GPIO_WritePin(SR_CLK_GPIO_Port, SR_CLK_Pin,GPIO_PIN_SET);
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b8e:	4803      	ldr	r0, [pc, #12]	; (8003b9c <shiftOut+0x80>)
 8003b90:	f001 fac5 	bl	800511e <HAL_GPIO_WritePin>
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40011000 	.word	0x40011000

08003ba0 <Send_Data_74HC595>:
 * @brief Send_Data_74HC595
 * 
 * @param data 
 */
void Send_Data_74HC595(uint8_t data)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SR_RST_GPIO_Port,SR_RST_Pin,GPIO_PIN_RESET);
 8003baa:	2200      	movs	r2, #0
 8003bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bb0:	4814      	ldr	r0, [pc, #80]	; (8003c04 <Send_Data_74HC595+0x64>)
 8003bb2:	f001 fab4 	bl	800511e <HAL_GPIO_WritePin>
    //releas reset HC595;
    HAL_GPIO_WritePin(SR_RST_GPIO_Port,SR_RST_Pin,GPIO_PIN_SET);
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bbc:	4811      	ldr	r0, [pc, #68]	; (8003c04 <Send_Data_74HC595+0x64>)
 8003bbe:	f001 faae 	bl	800511e <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(SR_LAT_GPIO_Port,SR_LAT_Pin,GPIO_PIN_RESET);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bc8:	480f      	ldr	r0, [pc, #60]	; (8003c08 <Send_Data_74HC595+0x68>)
 8003bca:	f001 faa8 	bl	800511e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SR_LAT_GPIO_Port,SR_LAT_Pin,GPIO_PIN_SET);
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bd4:	480c      	ldr	r0, [pc, #48]	; (8003c08 <Send_Data_74HC595+0x68>)
 8003bd6:	f001 faa2 	bl	800511e <HAL_GPIO_WritePin>
    //turn latch mcu on
    HAL_GPIO_WritePin(SR_LAT_GPIO_Port,SR_LAT_Pin,GPIO_PIN_RESET);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003be0:	4809      	ldr	r0, [pc, #36]	; (8003c08 <Send_Data_74HC595+0x68>)
 8003be2:	f001 fa9c 	bl	800511e <HAL_GPIO_WritePin>
    shiftOut(data);
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff97 	bl	8003b1c <shiftOut>
    HAL_GPIO_WritePin(SR_LAT_GPIO_Port,SR_LAT_Pin,GPIO_PIN_SET);
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bf4:	4804      	ldr	r0, [pc, #16]	; (8003c08 <Send_Data_74HC595+0x68>)
 8003bf6:	f001 fa92 	bl	800511e <HAL_GPIO_WritePin>
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40010c00 	.word	0x40010c00
 8003c08:	40011000 	.word	0x40011000

08003c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c10:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <HAL_Init+0x28>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <HAL_Init+0x28>)
 8003c16:	f043 0310 	orr.w	r3, r3, #16
 8003c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	f000 fd4d 	bl	80046bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c22:	200f      	movs	r0, #15
 8003c24:	f7fe fa8c 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c28:	f7fe f89e 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40022000 	.word	0x40022000

08003c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_IncTick+0x1c>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_IncTick+0x20>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	4a03      	ldr	r2, [pc, #12]	; (8003c58 <HAL_IncTick+0x20>)
 8003c4a:	6013      	str	r3, [r2, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	20000008 	.word	0x20000008
 8003c58:	200007fc 	.word	0x200007fc

08003c5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c60:	4b02      	ldr	r3, [pc, #8]	; (8003c6c <HAL_GetTick+0x10>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	200007fc 	.word	0x200007fc

08003c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c78:	f7ff fff0 	bl	8003c5c <HAL_GetTick>
 8003c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c88:	d005      	beq.n	8003c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <HAL_Delay+0x44>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c96:	bf00      	nop
 8003c98:	f7ff ffe0 	bl	8003c5c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d8f7      	bhi.n	8003c98 <HAL_Delay+0x28>
  {
  }
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000008 	.word	0x20000008

08003cb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0be      	b.n	8003e58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d109      	bne.n	8003cfc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fe f86e 	bl	8001dd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fbf1 	bl	80044e4 <ADC_ConversionStop_Disable>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 8099 	bne.w	8003e46 <HAL_ADC_Init+0x18e>
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f040 8095 	bne.w	8003e46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d24:	f023 0302 	bic.w	r3, r3, #2
 8003d28:	f043 0202 	orr.w	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7b1b      	ldrb	r3, [r3, #12]
 8003d3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d50:	d003      	beq.n	8003d5a <HAL_ADC_Init+0xa2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <HAL_ADC_Init+0xa8>
 8003d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d5e:	e000      	b.n	8003d62 <HAL_ADC_Init+0xaa>
 8003d60:	2300      	movs	r3, #0
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7d1b      	ldrb	r3, [r3, #20]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d119      	bne.n	8003da4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7b1b      	ldrb	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	035a      	lsls	r2, r3, #13
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	e00b      	b.n	8003da4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	4b28      	ldr	r3, [pc, #160]	; (8003e60 <HAL_ADC_Init+0x1a8>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd4:	d003      	beq.n	8003dde <HAL_ADC_Init+0x126>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d104      	bne.n	8003de8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	051b      	lsls	r3, r3, #20
 8003de6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <HAL_ADC_Init+0x1ac>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d10b      	bne.n	8003e24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e22:	e018      	b.n	8003e56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	f023 0312 	bic.w	r3, r3, #18
 8003e2c:	f043 0210 	orr.w	r2, r3, #16
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	f043 0201 	orr.w	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e44:	e007      	b.n	8003e56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	f043 0210 	orr.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	ffe1f7fd 	.word	0xffe1f7fd
 8003e64:	ff1f0efe 	.word	0xff1f0efe

08003e68 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_Start+0x1a>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e098      	b.n	8003fb4 <HAL_ADC_Start+0x14c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fad0 	bl	8004430 <ADC_Enable>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 8087 	bne.w	8003faa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a41      	ldr	r2, [pc, #260]	; (8003fbc <HAL_ADC_Start+0x154>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d105      	bne.n	8003ec6 <HAL_ADC_Start+0x5e>
 8003eba:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_ADC_Start+0x158>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d115      	bne.n	8003ef2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d026      	beq.n	8003f2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ef0:	e01d      	b.n	8003f2e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <HAL_ADC_Start+0x158>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_ADC_Start+0xaa>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	; (8003fbc <HAL_ADC_Start+0x154>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d10d      	bne.n	8003f2e <HAL_ADC_Start+0xc6>
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_ADC_Start+0x158>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d006      	beq.n	8003f48 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f023 0206 	bic.w	r2, r3, #6
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f46:	e002      	b.n	8003f4e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0202 	mvn.w	r2, #2
 8003f5e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003f6e:	d113      	bne.n	8003f98 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f74:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <HAL_ADC_Start+0x154>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d105      	bne.n	8003f86 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003f7a:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <HAL_ADC_Start+0x158>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	e00c      	b.n	8003fb2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	e003      	b.n	8003fb2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40012800 	.word	0x40012800
 8003fc0:	40012400 	.word	0x40012400

08003fc4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_ADC_Stop+0x1a>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e01a      	b.n	8004014 <HAL_ADC_Stop+0x50>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fa7c 	bl	80044e4 <ADC_ConversionStop_Disable>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004032:	f7ff fe13 	bl	8003c5c <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0d3      	b.n	8004206 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d131      	bne.n	80040d0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004076:	2b00      	cmp	r3, #0
 8004078:	d12a      	bne.n	80040d0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800407a:	e021      	b.n	80040c0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004082:	d01d      	beq.n	80040c0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_ADC_PollForConversion+0x7e>
 800408a:	f7ff fde7 	bl	8003c5c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d212      	bcs.n	80040c0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	f043 0204 	orr.w	r2, r3, #4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0a2      	b.n	8004206 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0d6      	beq.n	800407c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80040ce:	e070      	b.n	80041b2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80040d0:	4b4f      	ldr	r3, [pc, #316]	; (8004210 <HAL_ADC_PollForConversion+0x1f4>)
 80040d2:	681c      	ldr	r4, [r3, #0]
 80040d4:	2002      	movs	r0, #2
 80040d6:	f002 fd43 	bl	8006b60 <HAL_RCCEx_GetPeriphCLKFreq>
 80040da:	4603      	mov	r3, r0
 80040dc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6919      	ldr	r1, [r3, #16]
 80040e6:	4b4b      	ldr	r3, [pc, #300]	; (8004214 <HAL_ADC_PollForConversion+0x1f8>)
 80040e8:	400b      	ands	r3, r1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d118      	bne.n	8004120 <HAL_ADC_PollForConversion+0x104>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68d9      	ldr	r1, [r3, #12]
 80040f4:	4b48      	ldr	r3, [pc, #288]	; (8004218 <HAL_ADC_PollForConversion+0x1fc>)
 80040f6:	400b      	ands	r3, r1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d111      	bne.n	8004120 <HAL_ADC_PollForConversion+0x104>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6919      	ldr	r1, [r3, #16]
 8004102:	4b46      	ldr	r3, [pc, #280]	; (800421c <HAL_ADC_PollForConversion+0x200>)
 8004104:	400b      	ands	r3, r1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d108      	bne.n	800411c <HAL_ADC_PollForConversion+0x100>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68d9      	ldr	r1, [r3, #12]
 8004110:	4b43      	ldr	r3, [pc, #268]	; (8004220 <HAL_ADC_PollForConversion+0x204>)
 8004112:	400b      	ands	r3, r1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_ADC_PollForConversion+0x100>
 8004118:	2314      	movs	r3, #20
 800411a:	e020      	b.n	800415e <HAL_ADC_PollForConversion+0x142>
 800411c:	2329      	movs	r3, #41	; 0x29
 800411e:	e01e      	b.n	800415e <HAL_ADC_PollForConversion+0x142>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6919      	ldr	r1, [r3, #16]
 8004126:	4b3d      	ldr	r3, [pc, #244]	; (800421c <HAL_ADC_PollForConversion+0x200>)
 8004128:	400b      	ands	r3, r1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_ADC_PollForConversion+0x120>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68d9      	ldr	r1, [r3, #12]
 8004134:	4b3a      	ldr	r3, [pc, #232]	; (8004220 <HAL_ADC_PollForConversion+0x204>)
 8004136:	400b      	ands	r3, r1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00d      	beq.n	8004158 <HAL_ADC_PollForConversion+0x13c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6919      	ldr	r1, [r3, #16]
 8004142:	4b38      	ldr	r3, [pc, #224]	; (8004224 <HAL_ADC_PollForConversion+0x208>)
 8004144:	400b      	ands	r3, r1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d108      	bne.n	800415c <HAL_ADC_PollForConversion+0x140>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68d9      	ldr	r1, [r3, #12]
 8004150:	4b34      	ldr	r3, [pc, #208]	; (8004224 <HAL_ADC_PollForConversion+0x208>)
 8004152:	400b      	ands	r3, r1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_PollForConversion+0x140>
 8004158:	2354      	movs	r3, #84	; 0x54
 800415a:	e000      	b.n	800415e <HAL_ADC_PollForConversion+0x142>
 800415c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004164:	e021      	b.n	80041aa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800416c:	d01a      	beq.n	80041a4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <HAL_ADC_PollForConversion+0x168>
 8004174:	f7ff fd72 	bl	8003c5c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d20f      	bcs.n	80041a4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	429a      	cmp	r2, r3
 800418a:	d90b      	bls.n	80041a4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	f043 0204 	orr.w	r2, r3, #4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e030      	b.n	8004206 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3301      	adds	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d8d9      	bhi.n	8004166 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f06f 0212 	mvn.w	r2, #18
 80041ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80041d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80041d6:	d115      	bne.n	8004204 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d111      	bne.n	8004204 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd90      	pop	{r4, r7, pc}
 800420e:	bf00      	nop
 8004210:	20000000 	.word	0x20000000
 8004214:	24924924 	.word	0x24924924
 8004218:	00924924 	.word	0x00924924
 800421c:	12492492 	.word	0x12492492
 8004220:	00492492 	.word	0x00492492
 8004224:	00249249 	.word	0x00249249

08004228 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x20>
 800425c:	2302      	movs	r3, #2
 800425e:	e0dc      	b.n	800441a <HAL_ADC_ConfigChannel+0x1da>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b06      	cmp	r3, #6
 800426e:	d81c      	bhi.n	80042aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	3b05      	subs	r3, #5
 8004282:	221f      	movs	r2, #31
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	4019      	ands	r1, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	3b05      	subs	r3, #5
 800429c:	fa00 f203 	lsl.w	r2, r0, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	635a      	str	r2, [r3, #52]	; 0x34
 80042a8:	e03c      	b.n	8004324 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	d81c      	bhi.n	80042ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	3b23      	subs	r3, #35	; 0x23
 80042c4:	221f      	movs	r2, #31
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	4019      	ands	r1, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	3b23      	subs	r3, #35	; 0x23
 80042de:	fa00 f203 	lsl.w	r2, r0, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
 80042ea:	e01b      	b.n	8004324 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	3b41      	subs	r3, #65	; 0x41
 80042fe:	221f      	movs	r2, #31
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	4019      	ands	r1, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	3b41      	subs	r3, #65	; 0x41
 8004318:	fa00 f203 	lsl.w	r2, r0, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b09      	cmp	r3, #9
 800432a:	d91c      	bls.n	8004366 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68d9      	ldr	r1, [r3, #12]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	3b1e      	subs	r3, #30
 800433e:	2207      	movs	r2, #7
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	4019      	ands	r1, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	6898      	ldr	r0, [r3, #8]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	3b1e      	subs	r3, #30
 8004358:	fa00 f203 	lsl.w	r2, r0, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	e019      	b.n	800439a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6919      	ldr	r1, [r3, #16]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	2207      	movs	r2, #7
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	4019      	ands	r1, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6898      	ldr	r0, [r3, #8]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	fa00 f203 	lsl.w	r2, r0, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b10      	cmp	r3, #16
 80043a0:	d003      	beq.n	80043aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80043a6:	2b11      	cmp	r3, #17
 80043a8:	d132      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_ADC_ConfigChannel+0x1e4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d125      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d126      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80043d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d11a      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <HAL_ADC_ConfigChannel+0x1e8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a13      	ldr	r2, [pc, #76]	; (800442c <HAL_ADC_ConfigChannel+0x1ec>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	0c9a      	lsrs	r2, r3, #18
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043f0:	e002      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f9      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x1b2>
 80043fe:	e007      	b.n	8004410 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	40012400 	.word	0x40012400
 8004428:	20000000 	.word	0x20000000
 800442c:	431bde83 	.word	0x431bde83

08004430 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d040      	beq.n	80044d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800445e:	4b1f      	ldr	r3, [pc, #124]	; (80044dc <ADC_Enable+0xac>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <ADC_Enable+0xb0>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	0c9b      	lsrs	r3, r3, #18
 800446a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800446c:	e002      	b.n	8004474 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3b01      	subs	r3, #1
 8004472:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f9      	bne.n	800446e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800447a:	f7ff fbef 	bl	8003c5c <HAL_GetTick>
 800447e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004480:	e01f      	b.n	80044c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004482:	f7ff fbeb 	bl	8003c5c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d918      	bls.n	80044c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d011      	beq.n	80044c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f043 0210 	orr.w	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e007      	b.n	80044d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d1d8      	bne.n	8004482 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000000 	.word	0x20000000
 80044e0:	431bde83 	.word	0x431bde83

080044e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d12e      	bne.n	800455c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800450e:	f7ff fba5 	bl	8003c5c <HAL_GetTick>
 8004512:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004514:	e01b      	b.n	800454e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004516:	f7ff fba1 	bl	8003c5c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d914      	bls.n	800454e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10d      	bne.n	800454e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e007      	b.n	800455e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d0dc      	beq.n	8004516 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <__NVIC_SetPriorityGrouping+0x44>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004584:	4013      	ands	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800459a:	4a04      	ldr	r2, [pc, #16]	; (80045ac <__NVIC_SetPriorityGrouping+0x44>)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	60d3      	str	r3, [r2, #12]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <__NVIC_GetPriorityGrouping+0x18>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	f003 0307 	and.w	r3, r3, #7
}
 80045be:	4618      	mov	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	db0b      	blt.n	80045f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	f003 021f 	and.w	r2, r3, #31
 80045e4:	4906      	ldr	r1, [pc, #24]	; (8004600 <__NVIC_EnableIRQ+0x34>)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2001      	movs	r0, #1
 80045ee:	fa00 f202 	lsl.w	r2, r0, r2
 80045f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	e000e100 	.word	0xe000e100

08004604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	6039      	str	r1, [r7, #0]
 800460e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004614:	2b00      	cmp	r3, #0
 8004616:	db0a      	blt.n	800462e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	b2da      	uxtb	r2, r3
 800461c:	490c      	ldr	r1, [pc, #48]	; (8004650 <__NVIC_SetPriority+0x4c>)
 800461e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004622:	0112      	lsls	r2, r2, #4
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	440b      	add	r3, r1
 8004628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800462c:	e00a      	b.n	8004644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4908      	ldr	r1, [pc, #32]	; (8004654 <__NVIC_SetPriority+0x50>)
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	3b04      	subs	r3, #4
 800463c:	0112      	lsls	r2, r2, #4
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	440b      	add	r3, r1
 8004642:	761a      	strb	r2, [r3, #24]
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e100 	.word	0xe000e100
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	; 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f1c3 0307 	rsb	r3, r3, #7
 8004672:	2b04      	cmp	r3, #4
 8004674:	bf28      	it	cs
 8004676:	2304      	movcs	r3, #4
 8004678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3304      	adds	r3, #4
 800467e:	2b06      	cmp	r3, #6
 8004680:	d902      	bls.n	8004688 <NVIC_EncodePriority+0x30>
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3b03      	subs	r3, #3
 8004686:	e000      	b.n	800468a <NVIC_EncodePriority+0x32>
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800468c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43da      	mvns	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	401a      	ands	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	fa01 f303 	lsl.w	r3, r1, r3
 80046aa:	43d9      	mvns	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b0:	4313      	orrs	r3, r2
         );
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3724      	adds	r7, #36	; 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ff4f 	bl	8004568 <__NVIC_SetPriorityGrouping>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	4603      	mov	r3, r0
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046e4:	f7ff ff64 	bl	80045b0 <__NVIC_GetPriorityGrouping>
 80046e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	6978      	ldr	r0, [r7, #20]
 80046f0:	f7ff ffb2 	bl	8004658 <NVIC_EncodePriority>
 80046f4:	4602      	mov	r2, r0
 80046f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff81 	bl	8004604 <__NVIC_SetPriority>
}
 8004702:	bf00      	nop
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	4603      	mov	r3, r0
 8004712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff ff57 	bl	80045cc <__NVIC_EnableIRQ>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e043      	b.n	80047c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <HAL_DMA_Init+0xa8>)
 8004746:	4413      	add	r3, r2
 8004748:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <HAL_DMA_Init+0xac>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	009a      	lsls	r2, r3, #2
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <HAL_DMA_Init+0xb0>)
 800475a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004772:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004776:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	bffdfff8 	.word	0xbffdfff8
 80047d4:	cccccccd 	.word	0xcccccccd
 80047d8:	40020000 	.word	0x40020000

080047dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	2204      	movs	r2, #4
 80047fa:	409a      	lsls	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d04f      	beq.n	80048a4 <HAL_DMA_IRQHandler+0xc8>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d04a      	beq.n	80048a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d107      	bne.n	800482c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0204 	bic.w	r2, r2, #4
 800482a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a66      	ldr	r2, [pc, #408]	; (80049cc <HAL_DMA_IRQHandler+0x1f0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d029      	beq.n	800488a <HAL_DMA_IRQHandler+0xae>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a65      	ldr	r2, [pc, #404]	; (80049d0 <HAL_DMA_IRQHandler+0x1f4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_DMA_IRQHandler+0xaa>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a63      	ldr	r2, [pc, #396]	; (80049d4 <HAL_DMA_IRQHandler+0x1f8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01a      	beq.n	8004880 <HAL_DMA_IRQHandler+0xa4>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a62      	ldr	r2, [pc, #392]	; (80049d8 <HAL_DMA_IRQHandler+0x1fc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d012      	beq.n	800487a <HAL_DMA_IRQHandler+0x9e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a60      	ldr	r2, [pc, #384]	; (80049dc <HAL_DMA_IRQHandler+0x200>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00a      	beq.n	8004874 <HAL_DMA_IRQHandler+0x98>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a5f      	ldr	r2, [pc, #380]	; (80049e0 <HAL_DMA_IRQHandler+0x204>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d102      	bne.n	800486e <HAL_DMA_IRQHandler+0x92>
 8004868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800486c:	e00e      	b.n	800488c <HAL_DMA_IRQHandler+0xb0>
 800486e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004872:	e00b      	b.n	800488c <HAL_DMA_IRQHandler+0xb0>
 8004874:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004878:	e008      	b.n	800488c <HAL_DMA_IRQHandler+0xb0>
 800487a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800487e:	e005      	b.n	800488c <HAL_DMA_IRQHandler+0xb0>
 8004880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004884:	e002      	b.n	800488c <HAL_DMA_IRQHandler+0xb0>
 8004886:	2340      	movs	r3, #64	; 0x40
 8004888:	e000      	b.n	800488c <HAL_DMA_IRQHandler+0xb0>
 800488a:	2304      	movs	r3, #4
 800488c:	4a55      	ldr	r2, [pc, #340]	; (80049e4 <HAL_DMA_IRQHandler+0x208>)
 800488e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8094 	beq.w	80049c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80048a2:	e08e      	b.n	80049c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	2202      	movs	r2, #2
 80048aa:	409a      	lsls	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d056      	beq.n	8004962 <HAL_DMA_IRQHandler+0x186>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d051      	beq.n	8004962 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 020a 	bic.w	r2, r2, #10
 80048da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a38      	ldr	r2, [pc, #224]	; (80049cc <HAL_DMA_IRQHandler+0x1f0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d029      	beq.n	8004942 <HAL_DMA_IRQHandler+0x166>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <HAL_DMA_IRQHandler+0x1f4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <HAL_DMA_IRQHandler+0x162>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a35      	ldr	r2, [pc, #212]	; (80049d4 <HAL_DMA_IRQHandler+0x1f8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01a      	beq.n	8004938 <HAL_DMA_IRQHandler+0x15c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a34      	ldr	r2, [pc, #208]	; (80049d8 <HAL_DMA_IRQHandler+0x1fc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d012      	beq.n	8004932 <HAL_DMA_IRQHandler+0x156>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a32      	ldr	r2, [pc, #200]	; (80049dc <HAL_DMA_IRQHandler+0x200>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00a      	beq.n	800492c <HAL_DMA_IRQHandler+0x150>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <HAL_DMA_IRQHandler+0x204>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d102      	bne.n	8004926 <HAL_DMA_IRQHandler+0x14a>
 8004920:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004924:	e00e      	b.n	8004944 <HAL_DMA_IRQHandler+0x168>
 8004926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800492a:	e00b      	b.n	8004944 <HAL_DMA_IRQHandler+0x168>
 800492c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004930:	e008      	b.n	8004944 <HAL_DMA_IRQHandler+0x168>
 8004932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004936:	e005      	b.n	8004944 <HAL_DMA_IRQHandler+0x168>
 8004938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800493c:	e002      	b.n	8004944 <HAL_DMA_IRQHandler+0x168>
 800493e:	2320      	movs	r3, #32
 8004940:	e000      	b.n	8004944 <HAL_DMA_IRQHandler+0x168>
 8004942:	2302      	movs	r3, #2
 8004944:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <HAL_DMA_IRQHandler+0x208>)
 8004946:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d034      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004960:	e02f      	b.n	80049c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	2208      	movs	r2, #8
 8004968:	409a      	lsls	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d028      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x1e8>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d023      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 020e 	bic.w	r2, r2, #14
 800498a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f202 	lsl.w	r2, r1, r2
 800499a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
    }
  }
  return;
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
}
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40020008 	.word	0x40020008
 80049d0:	4002001c 	.word	0x4002001c
 80049d4:	40020030 	.word	0x40020030
 80049d8:	40020044 	.word	0x40020044
 80049dc:	40020058 	.word	0x40020058
 80049e0:	4002006c 	.word	0x4002006c
 80049e4:	40020000 	.word	0x40020000

080049e8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a02:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <HAL_FLASH_Program+0xd8>)
 8004a04:	7e1b      	ldrb	r3, [r3, #24]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_FLASH_Program+0x26>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e054      	b.n	8004ab8 <HAL_FLASH_Program+0xd0>
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ac0 <HAL_FLASH_Program+0xd8>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a18:	f000 f8a8 	bl	8004b6c <FLASH_WaitForLastOperation>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d144      	bne.n	8004ab0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d102      	bne.n	8004a32 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	757b      	strb	r3, [r7, #21]
 8004a30:	e007      	b.n	8004a42 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d102      	bne.n	8004a3e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	757b      	strb	r3, [r7, #21]
 8004a3c:	e001      	b.n	8004a42 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004a3e:	2304      	movs	r3, #4
 8004a40:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	75bb      	strb	r3, [r7, #22]
 8004a46:	e02d      	b.n	8004aa4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004a48:	7dbb      	ldrb	r3, [r7, #22]
 8004a4a:	005a      	lsls	r2, r3, #1
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	eb02 0c03 	add.w	ip, r2, r3
 8004a52:	7dbb      	ldrb	r3, [r7, #22]
 8004a54:	0119      	lsls	r1, r3, #4
 8004a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a5a:	f1c1 0620 	rsb	r6, r1, #32
 8004a5e:	f1a1 0020 	sub.w	r0, r1, #32
 8004a62:	fa22 f401 	lsr.w	r4, r2, r1
 8004a66:	fa03 f606 	lsl.w	r6, r3, r6
 8004a6a:	4334      	orrs	r4, r6
 8004a6c:	fa23 f000 	lsr.w	r0, r3, r0
 8004a70:	4304      	orrs	r4, r0
 8004a72:	fa23 f501 	lsr.w	r5, r3, r1
 8004a76:	b2a3      	uxth	r3, r4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4660      	mov	r0, ip
 8004a7c:	f000 f85a 	bl	8004b34 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a84:	f000 f872 	bl	8004b6c <FLASH_WaitForLastOperation>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <HAL_FLASH_Program+0xdc>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	4a0c      	ldr	r2, [pc, #48]	; (8004ac4 <HAL_FLASH_Program+0xdc>)
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d107      	bne.n	8004aae <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004a9e:	7dbb      	ldrb	r3, [r7, #22]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	75bb      	strb	r3, [r7, #22]
 8004aa4:	7dba      	ldrb	r2, [r7, #22]
 8004aa6:	7d7b      	ldrb	r3, [r7, #21]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d3cd      	bcc.n	8004a48 <HAL_FLASH_Program+0x60>
 8004aac:	e000      	b.n	8004ab0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004aae:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <HAL_FLASH_Program+0xd8>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	761a      	strb	r2, [r3, #24]

  return status;
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac0:	20000800 	.word	0x20000800
 8004ac4:	40022000 	.word	0x40022000

08004ac8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <HAL_FLASH_Unlock+0x40>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00d      	beq.n	8004afa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <HAL_FLASH_Unlock+0x40>)
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <HAL_FLASH_Unlock+0x44>)
 8004ae2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004ae4:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <HAL_FLASH_Unlock+0x40>)
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_FLASH_Unlock+0x48>)
 8004ae8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <HAL_FLASH_Unlock+0x40>)
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004afa:	79fb      	ldrb	r3, [r7, #7]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40022000 	.word	0x40022000
 8004b0c:	45670123 	.word	0x45670123
 8004b10:	cdef89ab 	.word	0xcdef89ab

08004b14 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <HAL_FLASH_Lock+0x1c>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <HAL_FLASH_Lock+0x1c>)
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40022000 	.word	0x40022000

08004b34 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <FLASH_Program_HalfWord+0x30>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <FLASH_Program_HalfWord+0x34>)
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <FLASH_Program_HalfWord+0x34>)
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	887a      	ldrh	r2, [r7, #2]
 8004b56:	801a      	strh	r2, [r3, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000800 	.word	0x20000800
 8004b68:	40022000 	.word	0x40022000

08004b6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004b74:	f7ff f872 	bl	8003c5c <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004b7a:	e010      	b.n	8004b9e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b82:	d00c      	beq.n	8004b9e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <FLASH_WaitForLastOperation+0x2e>
 8004b8a:	f7ff f867 	bl	8003c5c <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d201      	bcs.n	8004b9e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e025      	b.n	8004bea <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004b9e:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <FLASH_WaitForLastOperation+0x88>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e8      	bne.n	8004b7c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <FLASH_WaitForLastOperation+0x88>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bb6:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <FLASH_WaitForLastOperation+0x88>)
 8004bb8:	2220      	movs	r2, #32
 8004bba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <FLASH_WaitForLastOperation+0x88>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <FLASH_WaitForLastOperation+0x88>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <FLASH_WaitForLastOperation+0x88>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004be0:	f000 f80a 	bl	8004bf8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40022000 	.word	0x40022000

08004bf8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004c02:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <FLASH_SetErrorCode+0x98>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c0e:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <FLASH_SetErrorCode+0x9c>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <FLASH_SetErrorCode+0x9c>)
 8004c18:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f043 0310 	orr.w	r3, r3, #16
 8004c20:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <FLASH_SetErrorCode+0x98>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004c2e:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <FLASH_SetErrorCode+0x9c>)
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <FLASH_SetErrorCode+0x9c>)
 8004c38:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f043 0304 	orr.w	r3, r3, #4
 8004c40:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <FLASH_SetErrorCode+0x98>)
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <FLASH_SetErrorCode+0x9c>)
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f043 0304 	orr.w	r3, r3, #4
 8004c56:	4a0f      	ldr	r2, [pc, #60]	; (8004c94 <FLASH_SetErrorCode+0x9c>)
 8004c58:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <FLASH_SetErrorCode+0x98>)
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	4a0c      	ldr	r2, [pc, #48]	; (8004c90 <FLASH_SetErrorCode+0x98>)
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f240 1201 	movw	r2, #257	; 0x101
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d106      	bne.n	8004c7e <FLASH_SetErrorCode+0x86>
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <FLASH_SetErrorCode+0x98>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <FLASH_SetErrorCode+0x98>)
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	61d3      	str	r3, [r2, #28]
}  
 8004c7c:	e002      	b.n	8004c84 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004c7e:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <FLASH_SetErrorCode+0x98>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	60d3      	str	r3, [r2, #12]
}  
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40022000 	.word	0x40022000
 8004c94:	20000800 	.word	0x20000800

08004c98 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004caa:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <HAL_FLASHEx_Erase+0xd0>)
 8004cac:	7e1b      	ldrb	r3, [r3, #24]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_FLASHEx_Erase+0x1e>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e053      	b.n	8004d5e <HAL_FLASHEx_Erase+0xc6>
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_FLASHEx_Erase+0xd0>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d116      	bne.n	8004cf2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004cc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cc8:	f7ff ff50 	bl	8004b6c <FLASH_WaitForLastOperation>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d141      	bne.n	8004d56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	f000 f84c 	bl	8004d70 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cdc:	f7ff ff46 	bl	8004b6c <FLASH_WaitForLastOperation>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004ce4:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <HAL_FLASHEx_Erase+0xd4>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	4a20      	ldr	r2, [pc, #128]	; (8004d6c <HAL_FLASHEx_Erase+0xd4>)
 8004cea:	f023 0304 	bic.w	r3, r3, #4
 8004cee:	6113      	str	r3, [r2, #16]
 8004cf0:	e031      	b.n	8004d56 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004cf2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cf6:	f7ff ff39 	bl	8004b6c <FLASH_WaitForLastOperation>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d12a      	bne.n	8004d56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d06:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	e019      	b.n	8004d44 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004d10:	68b8      	ldr	r0, [r7, #8]
 8004d12:	f000 f849 	bl	8004da8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d1a:	f7ff ff27 	bl	8004b6c <FLASH_WaitForLastOperation>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_FLASHEx_Erase+0xd4>)
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <HAL_FLASHEx_Erase+0xd4>)
 8004d28:	f023 0302 	bic.w	r3, r3, #2
 8004d2c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	601a      	str	r2, [r3, #0]
            break;
 8004d3a:	e00c      	b.n	8004d56 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d42:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	029a      	lsls	r2, r3, #10
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d3dc      	bcc.n	8004d10 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004d56:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <HAL_FLASHEx_Erase+0xd0>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	761a      	strb	r2, [r3, #24]

  return status;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000800 	.word	0x20000800
 8004d6c:	40022000 	.word	0x40022000

08004d70 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <FLASH_MassErase+0x30>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <FLASH_MassErase+0x34>)
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <FLASH_MassErase+0x34>)
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <FLASH_MassErase+0x34>)
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <FLASH_MassErase+0x34>)
 8004d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d94:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	20000800 	.word	0x20000800
 8004da4:	40022000 	.word	0x40022000

08004da8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <FLASH_PageErase+0x38>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <FLASH_PageErase+0x3c>)
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <FLASH_PageErase+0x3c>)
 8004dbc:	f043 0302 	orr.w	r3, r3, #2
 8004dc0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004dc2:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <FLASH_PageErase+0x3c>)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <FLASH_PageErase+0x3c>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	4a05      	ldr	r2, [pc, #20]	; (8004de4 <FLASH_PageErase+0x3c>)
 8004dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000800 	.word	0x20000800
 8004de4:	40022000 	.word	0x40022000

08004de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b08b      	sub	sp, #44	; 0x2c
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004df6:	2300      	movs	r3, #0
 8004df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dfa:	e169      	b.n	80050d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	f040 8158 	bne.w	80050ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4a9a      	ldr	r2, [pc, #616]	; (8005088 <HAL_GPIO_Init+0x2a0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d05e      	beq.n	8004ee2 <HAL_GPIO_Init+0xfa>
 8004e24:	4a98      	ldr	r2, [pc, #608]	; (8005088 <HAL_GPIO_Init+0x2a0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d875      	bhi.n	8004f16 <HAL_GPIO_Init+0x12e>
 8004e2a:	4a98      	ldr	r2, [pc, #608]	; (800508c <HAL_GPIO_Init+0x2a4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d058      	beq.n	8004ee2 <HAL_GPIO_Init+0xfa>
 8004e30:	4a96      	ldr	r2, [pc, #600]	; (800508c <HAL_GPIO_Init+0x2a4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d86f      	bhi.n	8004f16 <HAL_GPIO_Init+0x12e>
 8004e36:	4a96      	ldr	r2, [pc, #600]	; (8005090 <HAL_GPIO_Init+0x2a8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d052      	beq.n	8004ee2 <HAL_GPIO_Init+0xfa>
 8004e3c:	4a94      	ldr	r2, [pc, #592]	; (8005090 <HAL_GPIO_Init+0x2a8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d869      	bhi.n	8004f16 <HAL_GPIO_Init+0x12e>
 8004e42:	4a94      	ldr	r2, [pc, #592]	; (8005094 <HAL_GPIO_Init+0x2ac>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04c      	beq.n	8004ee2 <HAL_GPIO_Init+0xfa>
 8004e48:	4a92      	ldr	r2, [pc, #584]	; (8005094 <HAL_GPIO_Init+0x2ac>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d863      	bhi.n	8004f16 <HAL_GPIO_Init+0x12e>
 8004e4e:	4a92      	ldr	r2, [pc, #584]	; (8005098 <HAL_GPIO_Init+0x2b0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d046      	beq.n	8004ee2 <HAL_GPIO_Init+0xfa>
 8004e54:	4a90      	ldr	r2, [pc, #576]	; (8005098 <HAL_GPIO_Init+0x2b0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d85d      	bhi.n	8004f16 <HAL_GPIO_Init+0x12e>
 8004e5a:	2b12      	cmp	r3, #18
 8004e5c:	d82a      	bhi.n	8004eb4 <HAL_GPIO_Init+0xcc>
 8004e5e:	2b12      	cmp	r3, #18
 8004e60:	d859      	bhi.n	8004f16 <HAL_GPIO_Init+0x12e>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <HAL_GPIO_Init+0x80>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004ee3 	.word	0x08004ee3
 8004e6c:	08004ebd 	.word	0x08004ebd
 8004e70:	08004ecf 	.word	0x08004ecf
 8004e74:	08004f11 	.word	0x08004f11
 8004e78:	08004f17 	.word	0x08004f17
 8004e7c:	08004f17 	.word	0x08004f17
 8004e80:	08004f17 	.word	0x08004f17
 8004e84:	08004f17 	.word	0x08004f17
 8004e88:	08004f17 	.word	0x08004f17
 8004e8c:	08004f17 	.word	0x08004f17
 8004e90:	08004f17 	.word	0x08004f17
 8004e94:	08004f17 	.word	0x08004f17
 8004e98:	08004f17 	.word	0x08004f17
 8004e9c:	08004f17 	.word	0x08004f17
 8004ea0:	08004f17 	.word	0x08004f17
 8004ea4:	08004f17 	.word	0x08004f17
 8004ea8:	08004f17 	.word	0x08004f17
 8004eac:	08004ec5 	.word	0x08004ec5
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	4a79      	ldr	r2, [pc, #484]	; (800509c <HAL_GPIO_Init+0x2b4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004eba:	e02c      	b.n	8004f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	623b      	str	r3, [r7, #32]
          break;
 8004ec2:	e029      	b.n	8004f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	623b      	str	r3, [r7, #32]
          break;
 8004ecc:	e024      	b.n	8004f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	623b      	str	r3, [r7, #32]
          break;
 8004ed6:	e01f      	b.n	8004f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	330c      	adds	r3, #12
 8004ede:	623b      	str	r3, [r7, #32]
          break;
 8004ee0:	e01a      	b.n	8004f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004eea:	2304      	movs	r3, #4
 8004eec:	623b      	str	r3, [r7, #32]
          break;
 8004eee:	e013      	b.n	8004f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d105      	bne.n	8004f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ef8:	2308      	movs	r3, #8
 8004efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	611a      	str	r2, [r3, #16]
          break;
 8004f02:	e009      	b.n	8004f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f04:	2308      	movs	r3, #8
 8004f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	615a      	str	r2, [r3, #20]
          break;
 8004f0e:	e003      	b.n	8004f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f10:	2300      	movs	r3, #0
 8004f12:	623b      	str	r3, [r7, #32]
          break;
 8004f14:	e000      	b.n	8004f18 <HAL_GPIO_Init+0x130>
          break;
 8004f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2bff      	cmp	r3, #255	; 0xff
 8004f1c:	d801      	bhi.n	8004f22 <HAL_GPIO_Init+0x13a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	e001      	b.n	8004f26 <HAL_GPIO_Init+0x13e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2bff      	cmp	r3, #255	; 0xff
 8004f2c:	d802      	bhi.n	8004f34 <HAL_GPIO_Init+0x14c>
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	e002      	b.n	8004f3a <HAL_GPIO_Init+0x152>
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	3b08      	subs	r3, #8
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	210f      	movs	r1, #15
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	fa01 f303 	lsl.w	r3, r1, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	6a39      	ldr	r1, [r7, #32]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	fa01 f303 	lsl.w	r3, r1, r3
 8004f54:	431a      	orrs	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80b1 	beq.w	80050ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f68:	4b4d      	ldr	r3, [pc, #308]	; (80050a0 <HAL_GPIO_Init+0x2b8>)
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	4a4c      	ldr	r2, [pc, #304]	; (80050a0 <HAL_GPIO_Init+0x2b8>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6193      	str	r3, [r2, #24]
 8004f74:	4b4a      	ldr	r3, [pc, #296]	; (80050a0 <HAL_GPIO_Init+0x2b8>)
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f80:	4a48      	ldr	r2, [pc, #288]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	3302      	adds	r3, #2
 8004f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	220f      	movs	r2, #15
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a40      	ldr	r2, [pc, #256]	; (80050a8 <HAL_GPIO_Init+0x2c0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <HAL_GPIO_Init+0x1ec>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3f      	ldr	r2, [pc, #252]	; (80050ac <HAL_GPIO_Init+0x2c4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00d      	beq.n	8004fd0 <HAL_GPIO_Init+0x1e8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3e      	ldr	r2, [pc, #248]	; (80050b0 <HAL_GPIO_Init+0x2c8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <HAL_GPIO_Init+0x1e4>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a3d      	ldr	r2, [pc, #244]	; (80050b4 <HAL_GPIO_Init+0x2cc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <HAL_GPIO_Init+0x1e0>
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e006      	b.n	8004fd6 <HAL_GPIO_Init+0x1ee>
 8004fc8:	2304      	movs	r3, #4
 8004fca:	e004      	b.n	8004fd6 <HAL_GPIO_Init+0x1ee>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e002      	b.n	8004fd6 <HAL_GPIO_Init+0x1ee>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_GPIO_Init+0x1ee>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	f002 0203 	and.w	r2, r2, #3
 8004fdc:	0092      	lsls	r2, r2, #2
 8004fde:	4093      	lsls	r3, r2
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004fe6:	492f      	ldr	r1, [pc, #188]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	089b      	lsrs	r3, r3, #2
 8004fec:	3302      	adds	r3, #2
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d006      	beq.n	800500e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005000:	4b2d      	ldr	r3, [pc, #180]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	492c      	ldr	r1, [pc, #176]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	600b      	str	r3, [r1, #0]
 800500c:	e006      	b.n	800501c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800500e:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	43db      	mvns	r3, r3
 8005016:	4928      	ldr	r1, [pc, #160]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005018:	4013      	ands	r3, r2
 800501a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d006      	beq.n	8005036 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005028:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	4922      	ldr	r1, [pc, #136]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	604b      	str	r3, [r1, #4]
 8005034:	e006      	b.n	8005044 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005036:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	43db      	mvns	r3, r3
 800503e:	491e      	ldr	r1, [pc, #120]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005040:	4013      	ands	r3, r2
 8005042:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d006      	beq.n	800505e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005050:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	4918      	ldr	r1, [pc, #96]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	4313      	orrs	r3, r2
 800505a:	608b      	str	r3, [r1, #8]
 800505c:	e006      	b.n	800506c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800505e:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	43db      	mvns	r3, r3
 8005066:	4914      	ldr	r1, [pc, #80]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 8005068:	4013      	ands	r3, r2
 800506a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d021      	beq.n	80050bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	490e      	ldr	r1, [pc, #56]	; (80050b8 <HAL_GPIO_Init+0x2d0>)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	4313      	orrs	r3, r2
 8005082:	60cb      	str	r3, [r1, #12]
 8005084:	e021      	b.n	80050ca <HAL_GPIO_Init+0x2e2>
 8005086:	bf00      	nop
 8005088:	10320000 	.word	0x10320000
 800508c:	10310000 	.word	0x10310000
 8005090:	10220000 	.word	0x10220000
 8005094:	10210000 	.word	0x10210000
 8005098:	10120000 	.word	0x10120000
 800509c:	10110000 	.word	0x10110000
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40010800 	.word	0x40010800
 80050ac:	40010c00 	.word	0x40010c00
 80050b0:	40011000 	.word	0x40011000
 80050b4:	40011400 	.word	0x40011400
 80050b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_GPIO_Init+0x304>)
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	43db      	mvns	r3, r3
 80050c4:	4909      	ldr	r1, [pc, #36]	; (80050ec <HAL_GPIO_Init+0x304>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	3301      	adds	r3, #1
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f47f ae8e 	bne.w	8004dfc <HAL_GPIO_Init+0x14>
  }
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	372c      	adds	r7, #44	; 0x2c
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	40010400 	.word	0x40010400

080050f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
 800510c:	e001      	b.n	8005112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	460b      	mov	r3, r1
 8005128:	807b      	strh	r3, [r7, #2]
 800512a:	4613      	mov	r3, r2
 800512c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800512e:	787b      	ldrb	r3, [r7, #1]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005134:	887a      	ldrh	r2, [r7, #2]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800513a:	e003      	b.n	8005144 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	041a      	lsls	r2, r3, #16
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	611a      	str	r2, [r3, #16]
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005160:	887a      	ldrh	r2, [r7, #2]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4013      	ands	r3, r2
 8005166:	041a      	lsls	r2, r3, #16
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	43d9      	mvns	r1, r3
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	400b      	ands	r3, r1
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	611a      	str	r2, [r3, #16]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e12b      	b.n	80053ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fc fe7e 	bl	8001ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2224      	movs	r2, #36	; 0x24
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051e4:	f001 fb90 	bl	8006908 <HAL_RCC_GetPCLK1Freq>
 80051e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4a81      	ldr	r2, [pc, #516]	; (80053f4 <HAL_I2C_Init+0x274>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d807      	bhi.n	8005204 <HAL_I2C_Init+0x84>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a80      	ldr	r2, [pc, #512]	; (80053f8 <HAL_I2C_Init+0x278>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	bf94      	ite	ls
 80051fc:	2301      	movls	r3, #1
 80051fe:	2300      	movhi	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e006      	b.n	8005212 <HAL_I2C_Init+0x92>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a7d      	ldr	r2, [pc, #500]	; (80053fc <HAL_I2C_Init+0x27c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	bf94      	ite	ls
 800520c:	2301      	movls	r3, #1
 800520e:	2300      	movhi	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0e7      	b.n	80053ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a78      	ldr	r2, [pc, #480]	; (8005400 <HAL_I2C_Init+0x280>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	0c9b      	lsrs	r3, r3, #18
 8005224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4a6a      	ldr	r2, [pc, #424]	; (80053f4 <HAL_I2C_Init+0x274>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d802      	bhi.n	8005254 <HAL_I2C_Init+0xd4>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3301      	adds	r3, #1
 8005252:	e009      	b.n	8005268 <HAL_I2C_Init+0xe8>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	4a69      	ldr	r2, [pc, #420]	; (8005404 <HAL_I2C_Init+0x284>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	099b      	lsrs	r3, r3, #6
 8005266:	3301      	adds	r3, #1
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	430b      	orrs	r3, r1
 800526e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800527a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	495c      	ldr	r1, [pc, #368]	; (80053f4 <HAL_I2C_Init+0x274>)
 8005284:	428b      	cmp	r3, r1
 8005286:	d819      	bhi.n	80052bc <HAL_I2C_Init+0x13c>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1e59      	subs	r1, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	fbb1 f3f3 	udiv	r3, r1, r3
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	f640 73fc 	movw	r3, #4092	; 0xffc
 800529c:	400b      	ands	r3, r1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_I2C_Init+0x138>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e59      	subs	r1, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80052b0:	3301      	adds	r3, #1
 80052b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b6:	e051      	b.n	800535c <HAL_I2C_Init+0x1dc>
 80052b8:	2304      	movs	r3, #4
 80052ba:	e04f      	b.n	800535c <HAL_I2C_Init+0x1dc>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d111      	bne.n	80052e8 <HAL_I2C_Init+0x168>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1e58      	subs	r0, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6859      	ldr	r1, [r3, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	440b      	add	r3, r1
 80052d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e012      	b.n	800530e <HAL_I2C_Init+0x18e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1e58      	subs	r0, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	0099      	lsls	r1, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052fe:	3301      	adds	r3, #1
 8005300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_I2C_Init+0x196>
 8005312:	2301      	movs	r3, #1
 8005314:	e022      	b.n	800535c <HAL_I2C_Init+0x1dc>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10e      	bne.n	800533c <HAL_I2C_Init+0x1bc>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1e58      	subs	r0, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	440b      	add	r3, r1
 800532c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005330:	3301      	adds	r3, #1
 8005332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533a:	e00f      	b.n	800535c <HAL_I2C_Init+0x1dc>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1e58      	subs	r0, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6859      	ldr	r1, [r3, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	0099      	lsls	r1, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005352:	3301      	adds	r3, #1
 8005354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	6809      	ldr	r1, [r1, #0]
 8005360:	4313      	orrs	r3, r2
 8005362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800538a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6911      	ldr	r1, [r2, #16]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68d2      	ldr	r2, [r2, #12]
 8005396:	4311      	orrs	r1, r2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	430b      	orrs	r3, r1
 800539e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	000186a0 	.word	0x000186a0
 80053f8:	001e847f 	.word	0x001e847f
 80053fc:	003d08ff 	.word	0x003d08ff
 8005400:	431bde83 	.word	0x431bde83
 8005404:	10624dd3 	.word	0x10624dd3

08005408 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	461a      	mov	r2, r3
 8005414:	460b      	mov	r3, r1
 8005416:	817b      	strh	r3, [r7, #10]
 8005418:	4613      	mov	r3, r2
 800541a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800541c:	f7fe fc1e 	bl	8003c5c <HAL_GetTick>
 8005420:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b20      	cmp	r3, #32
 800542c:	f040 80e0 	bne.w	80055f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	2319      	movs	r3, #25
 8005436:	2201      	movs	r2, #1
 8005438:	4970      	ldr	r1, [pc, #448]	; (80055fc <HAL_I2C_Master_Transmit+0x1f4>)
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fcb4 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005446:	2302      	movs	r3, #2
 8005448:	e0d3      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_I2C_Master_Transmit+0x50>
 8005454:	2302      	movs	r3, #2
 8005456:	e0cc      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d007      	beq.n	800547e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800548c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2221      	movs	r2, #33	; 0x21
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2210      	movs	r2, #16
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	893a      	ldrh	r2, [r7, #8]
 80054ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a50      	ldr	r2, [pc, #320]	; (8005600 <HAL_I2C_Master_Transmit+0x1f8>)
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054c0:	8979      	ldrh	r1, [r7, #10]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fb04 	bl	8005ad4 <I2C_MasterRequestWrite>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e08d      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80054ec:	e066      	b.n	80055bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	6a39      	ldr	r1, [r7, #32]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fd2e 	bl	8005f54 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00d      	beq.n	800551a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b04      	cmp	r3, #4
 8005504:	d107      	bne.n	8005516 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005514:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e06b      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	781a      	ldrb	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b04      	cmp	r3, #4
 8005556:	d11b      	bne.n	8005590 <HAL_I2C_Master_Transmit+0x188>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555c:	2b00      	cmp	r3, #0
 800555e:	d017      	beq.n	8005590 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	6a39      	ldr	r1, [r7, #32]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fd1e 	bl	8005fd6 <I2C_WaitOnBTFFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d107      	bne.n	80055b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e01a      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d194      	bne.n	80054ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e000      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
  }
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	00100002 	.word	0x00100002
 8005600:	ffff0000 	.word	0xffff0000

08005604 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08c      	sub	sp, #48	; 0x30
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	461a      	mov	r2, r3
 8005612:	4603      	mov	r3, r0
 8005614:	817b      	strh	r3, [r7, #10]
 8005616:	460b      	mov	r3, r1
 8005618:	813b      	strh	r3, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005622:	f7fe fb1b 	bl	8003c5c <HAL_GetTick>
 8005626:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b20      	cmp	r3, #32
 8005632:	f040 8244 	bne.w	8005abe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	2319      	movs	r3, #25
 800563c:	2201      	movs	r2, #1
 800563e:	4982      	ldr	r1, [pc, #520]	; (8005848 <HAL_I2C_Mem_Read+0x244>)
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fbb1 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800564c:	2302      	movs	r3, #2
 800564e:	e237      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_I2C_Mem_Read+0x5a>
 800565a:	2302      	movs	r3, #2
 800565c:	e230      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x4bc>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b01      	cmp	r3, #1
 8005672:	d007      	beq.n	8005684 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2222      	movs	r2, #34	; 0x22
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2240      	movs	r2, #64	; 0x40
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4a62      	ldr	r2, [pc, #392]	; (800584c <HAL_I2C_Mem_Read+0x248>)
 80056c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056c6:	88f8      	ldrh	r0, [r7, #6]
 80056c8:	893a      	ldrh	r2, [r7, #8]
 80056ca:	8979      	ldrh	r1, [r7, #10]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	4603      	mov	r3, r0
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fa7e 	bl	8005bd8 <I2C_RequestMemoryRead>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e1ec      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d113      	bne.n	8005716 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	61fb      	str	r3, [r7, #28]
 8005702:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e1c0      	b.n	8005a98 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	2b01      	cmp	r3, #1
 800571c:	d11e      	bne.n	800575c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800572e:	b672      	cpsid	i
}
 8005730:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005756:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005758:	b662      	cpsie	i
}
 800575a:	e035      	b.n	80057c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005760:	2b02      	cmp	r3, #2
 8005762:	d11e      	bne.n	80057a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005772:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005774:	b672      	cpsid	i
}
 8005776:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800579e:	b662      	cpsie	i
}
 80057a0:	e012      	b.n	80057c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80057c8:	e166      	b.n	8005a98 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	f200 811f 	bhi.w	8005a12 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d123      	bne.n	8005824 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fc39 	bl	8006058 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e167      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005822:	e139      	b.n	8005a98 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005828:	2b02      	cmp	r3, #2
 800582a:	d152      	bne.n	80058d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	2200      	movs	r2, #0
 8005834:	4906      	ldr	r1, [pc, #24]	; (8005850 <HAL_I2C_Mem_Read+0x24c>)
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fab6 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e13c      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x4bc>
 8005846:	bf00      	nop
 8005848:	00100002 	.word	0x00100002
 800584c:	ffff0000 	.word	0xffff0000
 8005850:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005854:	b672      	cpsid	i
}
 8005856:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800589a:	b662      	cpsie	i
}
 800589c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058d0:	e0e2      	b.n	8005a98 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	2200      	movs	r2, #0
 80058da:	497b      	ldr	r1, [pc, #492]	; (8005ac8 <HAL_I2C_Mem_Read+0x4c4>)
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fa63 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0e9      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80058fc:	b672      	cpsid	i
}
 80058fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005932:	4b66      	ldr	r3, [pc, #408]	; (8005acc <HAL_I2C_Mem_Read+0x4c8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	08db      	lsrs	r3, r3, #3
 8005938:	4a65      	ldr	r2, [pc, #404]	; (8005ad0 <HAL_I2C_Mem_Read+0x4cc>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	0a1a      	lsrs	r2, r3, #8
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	00da      	lsls	r2, r3, #3
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	3b01      	subs	r3, #1
 8005950:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d118      	bne.n	800598a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800597a:	b662      	cpsie	i
}
 800597c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e09a      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b04      	cmp	r3, #4
 8005996:	d1d9      	bne.n	800594c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80059da:	b662      	cpsie	i
}
 80059dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a10:	e042      	b.n	8005a98 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fb1e 	bl	8006058 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e04c      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d118      	bne.n	8005a98 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f47f ae94 	bne.w	80057ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e000      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005abe:	2302      	movs	r3, #2
  }
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3728      	adds	r7, #40	; 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	00010004 	.word	0x00010004
 8005acc:	20000000 	.word	0x20000000
 8005ad0:	14f8b589 	.word	0x14f8b589

08005ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d006      	beq.n	8005afe <I2C_MasterRequestWrite+0x2a>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d003      	beq.n	8005afe <I2C_MasterRequestWrite+0x2a>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005afc:	d108      	bne.n	8005b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e00b      	b.n	8005b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	2b12      	cmp	r3, #18
 8005b16:	d107      	bne.n	8005b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f937 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00d      	beq.n	8005b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4e:	d103      	bne.n	8005b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e035      	b.n	8005bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b64:	d108      	bne.n	8005b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b66:	897b      	ldrh	r3, [r7, #10]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b74:	611a      	str	r2, [r3, #16]
 8005b76:	e01b      	b.n	8005bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b78:	897b      	ldrh	r3, [r7, #10]
 8005b7a:	11db      	asrs	r3, r3, #7
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f003 0306 	and.w	r3, r3, #6
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f063 030f 	orn	r3, r3, #15
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	490e      	ldr	r1, [pc, #56]	; (8005bd0 <I2C_MasterRequestWrite+0xfc>)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f95d 	bl	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e010      	b.n	8005bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ba6:	897b      	ldrh	r3, [r7, #10]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4907      	ldr	r1, [pc, #28]	; (8005bd4 <I2C_MasterRequestWrite+0x100>)
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f94d 	bl	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	00010008 	.word	0x00010008
 8005bd4:	00010002 	.word	0x00010002

08005bd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	4608      	mov	r0, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	461a      	mov	r2, r3
 8005be6:	4603      	mov	r3, r0
 8005be8:	817b      	strh	r3, [r7, #10]
 8005bea:	460b      	mov	r3, r1
 8005bec:	813b      	strh	r3, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f8c2 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00d      	beq.n	8005c46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c38:	d103      	bne.n	8005c42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e0aa      	b.n	8005d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c46:	897b      	ldrh	r3, [r7, #10]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	6a3a      	ldr	r2, [r7, #32]
 8005c5a:	4952      	ldr	r1, [pc, #328]	; (8005da4 <I2C_RequestMemoryRead+0x1cc>)
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f8fa 	bl	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e097      	b.n	8005d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c84:	6a39      	ldr	r1, [r7, #32]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f964 	bl	8005f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d107      	bne.n	8005caa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e076      	b.n	8005d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d105      	bne.n	8005cc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cb4:	893b      	ldrh	r3, [r7, #8]
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	611a      	str	r2, [r3, #16]
 8005cbe:	e021      	b.n	8005d04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cc0:	893b      	ldrh	r3, [r7, #8]
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd0:	6a39      	ldr	r1, [r7, #32]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f93e 	bl	8005f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00d      	beq.n	8005cfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d107      	bne.n	8005cf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e050      	b.n	8005d9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cfa:	893b      	ldrh	r3, [r7, #8]
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d06:	6a39      	ldr	r1, [r7, #32]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f923 	bl	8005f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00d      	beq.n	8005d30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d107      	bne.n	8005d2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e035      	b.n	8005d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f82b 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00d      	beq.n	8005d74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d66:	d103      	bne.n	8005d70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e013      	b.n	8005d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d74:	897b      	ldrh	r3, [r7, #10]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	6a3a      	ldr	r2, [r7, #32]
 8005d88:	4906      	ldr	r1, [pc, #24]	; (8005da4 <I2C_RequestMemoryRead+0x1cc>)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f863 	bl	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e000      	b.n	8005d9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	00010002 	.word	0x00010002

08005da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005db8:	e025      	b.n	8005e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc0:	d021      	beq.n	8005e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc2:	f7fd ff4b 	bl	8003c5c <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d302      	bcc.n	8005dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d116      	bne.n	8005e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e023      	b.n	8005e4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d10d      	bne.n	8005e2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	43da      	mvns	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	e00c      	b.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	43da      	mvns	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4013      	ands	r3, r2
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bf0c      	ite	eq
 8005e3e:	2301      	moveq	r3, #1
 8005e40:	2300      	movne	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d0b6      	beq.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e64:	e051      	b.n	8005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e74:	d123      	bne.n	8005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f043 0204 	orr.w	r2, r3, #4
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e046      	b.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec4:	d021      	beq.n	8005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec6:	f7fd fec9 	bl	8003c5c <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d302      	bcc.n	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d116      	bne.n	8005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e020      	b.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d10c      	bne.n	8005f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bf14      	ite	ne
 8005f26:	2301      	movne	r3, #1
 8005f28:	2300      	moveq	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	e00b      	b.n	8005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	43da      	mvns	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf14      	ite	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	2300      	moveq	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d18d      	bne.n	8005e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f60:	e02d      	b.n	8005fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f8ce 	bl	8006104 <I2C_IsAcknowledgeFailed>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e02d      	b.n	8005fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f78:	d021      	beq.n	8005fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7a:	f7fd fe6f 	bl	8003c5c <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d116      	bne.n	8005fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e007      	b.n	8005fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b80      	cmp	r3, #128	; 0x80
 8005fca:	d1ca      	bne.n	8005f62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fe2:	e02d      	b.n	8006040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f88d 	bl	8006104 <I2C_IsAcknowledgeFailed>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e02d      	b.n	8006050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ffa:	d021      	beq.n	8006040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffc:	f7fd fe2e 	bl	8003c5c <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	429a      	cmp	r2, r3
 800600a:	d302      	bcc.n	8006012 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d116      	bne.n	8006040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e007      	b.n	8006050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b04      	cmp	r3, #4
 800604c:	d1ca      	bne.n	8005fe4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006064:	e042      	b.n	80060ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b10      	cmp	r3, #16
 8006072:	d119      	bne.n	80060a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0210 	mvn.w	r2, #16
 800607c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e029      	b.n	80060fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a8:	f7fd fdd8 	bl	8003c5c <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d302      	bcc.n	80060be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d116      	bne.n	80060ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e007      	b.n	80060fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d1b5      	bne.n	8006066 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611a:	d11b      	bne.n	8006154 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006124:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f043 0204 	orr.w	r2, r3, #4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr

08006160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e272      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8087 	beq.w	800628e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006180:	4b92      	ldr	r3, [pc, #584]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 030c 	and.w	r3, r3, #12
 8006188:	2b04      	cmp	r3, #4
 800618a:	d00c      	beq.n	80061a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800618c:	4b8f      	ldr	r3, [pc, #572]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b08      	cmp	r3, #8
 8006196:	d112      	bne.n	80061be <HAL_RCC_OscConfig+0x5e>
 8006198:	4b8c      	ldr	r3, [pc, #560]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a4:	d10b      	bne.n	80061be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a6:	4b89      	ldr	r3, [pc, #548]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d06c      	beq.n	800628c <HAL_RCC_OscConfig+0x12c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d168      	bne.n	800628c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e24c      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c6:	d106      	bne.n	80061d6 <HAL_RCC_OscConfig+0x76>
 80061c8:	4b80      	ldr	r3, [pc, #512]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a7f      	ldr	r2, [pc, #508]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e02e      	b.n	8006234 <HAL_RCC_OscConfig+0xd4>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10c      	bne.n	80061f8 <HAL_RCC_OscConfig+0x98>
 80061de:	4b7b      	ldr	r3, [pc, #492]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a7a      	ldr	r2, [pc, #488]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	4b78      	ldr	r3, [pc, #480]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a77      	ldr	r2, [pc, #476]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	e01d      	b.n	8006234 <HAL_RCC_OscConfig+0xd4>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006200:	d10c      	bne.n	800621c <HAL_RCC_OscConfig+0xbc>
 8006202:	4b72      	ldr	r3, [pc, #456]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a71      	ldr	r2, [pc, #452]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4b6f      	ldr	r3, [pc, #444]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a6e      	ldr	r2, [pc, #440]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e00b      	b.n	8006234 <HAL_RCC_OscConfig+0xd4>
 800621c:	4b6b      	ldr	r3, [pc, #428]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a6a      	ldr	r2, [pc, #424]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	4b68      	ldr	r3, [pc, #416]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a67      	ldr	r2, [pc, #412]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800622e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d013      	beq.n	8006264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fd fd0e 	bl	8003c5c <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006244:	f7fd fd0a 	bl	8003c5c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b64      	cmp	r3, #100	; 0x64
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e200      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006256:	4b5d      	ldr	r3, [pc, #372]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0xe4>
 8006262:	e014      	b.n	800628e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006264:	f7fd fcfa 	bl	8003c5c <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800626c:	f7fd fcf6 	bl	8003c5c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e1ec      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800627e:	4b53      	ldr	r3, [pc, #332]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x10c>
 800628a:	e000      	b.n	800628e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800628c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d063      	beq.n	8006362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800629a:	4b4c      	ldr	r3, [pc, #304]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062a6:	4b49      	ldr	r3, [pc, #292]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 030c 	and.w	r3, r3, #12
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d11c      	bne.n	80062ec <HAL_RCC_OscConfig+0x18c>
 80062b2:	4b46      	ldr	r3, [pc, #280]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d116      	bne.n	80062ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062be:	4b43      	ldr	r3, [pc, #268]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_RCC_OscConfig+0x176>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e1c0      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d6:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4939      	ldr	r1, [pc, #228]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ea:	e03a      	b.n	8006362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d020      	beq.n	8006336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062f4:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <HAL_RCC_OscConfig+0x270>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fa:	f7fd fcaf 	bl	8003c5c <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006302:	f7fd fcab 	bl	8003c5c <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e1a1      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006314:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006320:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4927      	ldr	r1, [pc, #156]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006330:	4313      	orrs	r3, r2
 8006332:	600b      	str	r3, [r1, #0]
 8006334:	e015      	b.n	8006362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006336:	4b26      	ldr	r3, [pc, #152]	; (80063d0 <HAL_RCC_OscConfig+0x270>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633c:	f7fd fc8e 	bl	8003c5c <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006344:	f7fd fc8a 	bl	8003c5c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e180      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d03a      	beq.n	80063e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d019      	beq.n	80063aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006376:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <HAL_RCC_OscConfig+0x274>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800637c:	f7fd fc6e 	bl	8003c5c <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006384:	f7fd fc6a 	bl	8003c5c <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e160      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f0      	beq.n	8006384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063a2:	2001      	movs	r0, #1
 80063a4:	f000 fb08 	bl	80069b8 <RCC_Delay>
 80063a8:	e01c      	b.n	80063e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <HAL_RCC_OscConfig+0x274>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b0:	f7fd fc54 	bl	8003c5c <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b6:	e00f      	b.n	80063d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b8:	f7fd fc50 	bl	8003c5c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d908      	bls.n	80063d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e146      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
 80063ca:	bf00      	nop
 80063cc:	40021000 	.word	0x40021000
 80063d0:	42420000 	.word	0x42420000
 80063d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d8:	4b92      	ldr	r3, [pc, #584]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e9      	bne.n	80063b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80a6 	beq.w	800653e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063f6:	4b8b      	ldr	r3, [pc, #556]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10d      	bne.n	800641e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006402:	4b88      	ldr	r3, [pc, #544]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	4a87      	ldr	r2, [pc, #540]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800640c:	61d3      	str	r3, [r2, #28]
 800640e:	4b85      	ldr	r3, [pc, #532]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006416:	60bb      	str	r3, [r7, #8]
 8006418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800641a:	2301      	movs	r3, #1
 800641c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800641e:	4b82      	ldr	r3, [pc, #520]	; (8006628 <HAL_RCC_OscConfig+0x4c8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d118      	bne.n	800645c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800642a:	4b7f      	ldr	r3, [pc, #508]	; (8006628 <HAL_RCC_OscConfig+0x4c8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a7e      	ldr	r2, [pc, #504]	; (8006628 <HAL_RCC_OscConfig+0x4c8>)
 8006430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006436:	f7fd fc11 	bl	8003c5c <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643e:	f7fd fc0d 	bl	8003c5c <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b64      	cmp	r3, #100	; 0x64
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e103      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006450:	4b75      	ldr	r3, [pc, #468]	; (8006628 <HAL_RCC_OscConfig+0x4c8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d106      	bne.n	8006472 <HAL_RCC_OscConfig+0x312>
 8006464:	4b6f      	ldr	r3, [pc, #444]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	4a6e      	ldr	r2, [pc, #440]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6213      	str	r3, [r2, #32]
 8006470:	e02d      	b.n	80064ce <HAL_RCC_OscConfig+0x36e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10c      	bne.n	8006494 <HAL_RCC_OscConfig+0x334>
 800647a:	4b6a      	ldr	r3, [pc, #424]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	4a69      	ldr	r2, [pc, #420]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	6213      	str	r3, [r2, #32]
 8006486:	4b67      	ldr	r3, [pc, #412]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	4a66      	ldr	r2, [pc, #408]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800648c:	f023 0304 	bic.w	r3, r3, #4
 8006490:	6213      	str	r3, [r2, #32]
 8006492:	e01c      	b.n	80064ce <HAL_RCC_OscConfig+0x36e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b05      	cmp	r3, #5
 800649a:	d10c      	bne.n	80064b6 <HAL_RCC_OscConfig+0x356>
 800649c:	4b61      	ldr	r3, [pc, #388]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	4a60      	ldr	r2, [pc, #384]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064a2:	f043 0304 	orr.w	r3, r3, #4
 80064a6:	6213      	str	r3, [r2, #32]
 80064a8:	4b5e      	ldr	r3, [pc, #376]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	4a5d      	ldr	r2, [pc, #372]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	6213      	str	r3, [r2, #32]
 80064b4:	e00b      	b.n	80064ce <HAL_RCC_OscConfig+0x36e>
 80064b6:	4b5b      	ldr	r3, [pc, #364]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	4a5a      	ldr	r2, [pc, #360]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	6213      	str	r3, [r2, #32]
 80064c2:	4b58      	ldr	r3, [pc, #352]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4a57      	ldr	r2, [pc, #348]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064c8:	f023 0304 	bic.w	r3, r3, #4
 80064cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d015      	beq.n	8006502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d6:	f7fd fbc1 	bl	8003c5c <HAL_GetTick>
 80064da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064dc:	e00a      	b.n	80064f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064de:	f7fd fbbd 	bl	8003c5c <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e0b1      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f4:	4b4b      	ldr	r3, [pc, #300]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0ee      	beq.n	80064de <HAL_RCC_OscConfig+0x37e>
 8006500:	e014      	b.n	800652c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006502:	f7fd fbab 	bl	8003c5c <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006508:	e00a      	b.n	8006520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fd fba7 	bl	8003c5c <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	4293      	cmp	r3, r2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e09b      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006520:	4b40      	ldr	r3, [pc, #256]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1ee      	bne.n	800650a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d105      	bne.n	800653e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006532:	4b3c      	ldr	r3, [pc, #240]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	4a3b      	ldr	r2, [pc, #236]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800653c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8087 	beq.w	8006656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006548:	4b36      	ldr	r3, [pc, #216]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f003 030c 	and.w	r3, r3, #12
 8006550:	2b08      	cmp	r3, #8
 8006552:	d061      	beq.n	8006618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d146      	bne.n	80065ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655c:	4b33      	ldr	r3, [pc, #204]	; (800662c <HAL_RCC_OscConfig+0x4cc>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006562:	f7fd fb7b 	bl	8003c5c <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800656a:	f7fd fb77 	bl	8003c5c <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e06d      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800657c:	4b29      	ldr	r3, [pc, #164]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006590:	d108      	bne.n	80065a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	4921      	ldr	r1, [pc, #132]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065a4:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a19      	ldr	r1, [r3, #32]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	430b      	orrs	r3, r1
 80065b6:	491b      	ldr	r1, [pc, #108]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065bc:	4b1b      	ldr	r3, [pc, #108]	; (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065be:	2201      	movs	r2, #1
 80065c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c2:	f7fd fb4b 	bl	8003c5c <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ca:	f7fd fb47 	bl	8003c5c <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e03d      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065dc:	4b11      	ldr	r3, [pc, #68]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCC_OscConfig+0x46a>
 80065e8:	e035      	b.n	8006656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ea:	4b10      	ldr	r3, [pc, #64]	; (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f0:	f7fd fb34 	bl	8003c5c <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f8:	f7fd fb30 	bl	8003c5c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e026      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x498>
 8006616:	e01e      	b.n	8006656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d107      	bne.n	8006630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e019      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
 8006624:	40021000 	.word	0x40021000
 8006628:	40007000 	.word	0x40007000
 800662c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCC_OscConfig+0x500>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	429a      	cmp	r2, r3
 8006642:	d106      	bne.n	8006652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664e:	429a      	cmp	r2, r3
 8006650:	d001      	beq.n	8006656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40021000 	.word	0x40021000

08006664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0d0      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006678:	4b6a      	ldr	r3, [pc, #424]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d910      	bls.n	80066a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006686:	4b67      	ldr	r3, [pc, #412]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f023 0207 	bic.w	r2, r3, #7
 800668e:	4965      	ldr	r1, [pc, #404]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	4313      	orrs	r3, r2
 8006694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006696:	4b63      	ldr	r3, [pc, #396]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0b8      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066c0:	4b59      	ldr	r3, [pc, #356]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4a58      	ldr	r2, [pc, #352]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066d8:	4b53      	ldr	r3, [pc, #332]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4a52      	ldr	r2, [pc, #328]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80066e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e4:	4b50      	ldr	r3, [pc, #320]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	494d      	ldr	r1, [pc, #308]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d040      	beq.n	8006784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d107      	bne.n	800671a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670a:	4b47      	ldr	r3, [pc, #284]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d115      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e07f      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d107      	bne.n	8006732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006722:	4b41      	ldr	r3, [pc, #260]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e073      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006732:	4b3d      	ldr	r3, [pc, #244]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e06b      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006742:	4b39      	ldr	r3, [pc, #228]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f023 0203 	bic.w	r2, r3, #3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	4936      	ldr	r1, [pc, #216]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006750:	4313      	orrs	r3, r2
 8006752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006754:	f7fd fa82 	bl	8003c5c <HAL_GetTick>
 8006758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800675a:	e00a      	b.n	8006772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800675c:	f7fd fa7e 	bl	8003c5c <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	f241 3288 	movw	r2, #5000	; 0x1388
 800676a:	4293      	cmp	r3, r2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e053      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006772:	4b2d      	ldr	r3, [pc, #180]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f003 020c 	and.w	r2, r3, #12
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	429a      	cmp	r2, r3
 8006782:	d1eb      	bne.n	800675c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006784:	4b27      	ldr	r3, [pc, #156]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d210      	bcs.n	80067b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4b24      	ldr	r3, [pc, #144]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f023 0207 	bic.w	r2, r3, #7
 800679a:	4922      	ldr	r1, [pc, #136]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	4313      	orrs	r3, r2
 80067a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a2:	4b20      	ldr	r3, [pc, #128]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e032      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d008      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067c0:	4b19      	ldr	r3, [pc, #100]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4916      	ldr	r1, [pc, #88]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	490e      	ldr	r1, [pc, #56]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067f2:	f000 f821 	bl	8006838 <HAL_RCC_GetSysClockFreq>
 80067f6:	4602      	mov	r2, r0
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	490a      	ldr	r1, [pc, #40]	; (800682c <HAL_RCC_ClockConfig+0x1c8>)
 8006804:	5ccb      	ldrb	r3, [r1, r3]
 8006806:	fa22 f303 	lsr.w	r3, r2, r3
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <HAL_RCC_ClockConfig+0x1cc>)
 800680c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800680e:	4b09      	ldr	r3, [pc, #36]	; (8006834 <HAL_RCC_ClockConfig+0x1d0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7fb fc94 	bl	8002140 <HAL_InitTick>

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40022000 	.word	0x40022000
 8006828:	40021000 	.word	0x40021000
 800682c:	08011428 	.word	0x08011428
 8006830:	20000000 	.word	0x20000000
 8006834:	20000004 	.word	0x20000004

08006838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006838:	b490      	push	{r4, r7}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800683e:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006840:	1d3c      	adds	r4, r7, #4
 8006842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006848:	f240 2301 	movw	r3, #513	; 0x201
 800684c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
 8006852:	2300      	movs	r3, #0
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006862:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f003 030c 	and.w	r3, r3, #12
 800686e:	2b04      	cmp	r3, #4
 8006870:	d002      	beq.n	8006878 <HAL_RCC_GetSysClockFreq+0x40>
 8006872:	2b08      	cmp	r3, #8
 8006874:	d003      	beq.n	800687e <HAL_RCC_GetSysClockFreq+0x46>
 8006876:	e02b      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006878:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800687a:	623b      	str	r3, [r7, #32]
      break;
 800687c:	e02b      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	0c9b      	lsrs	r3, r3, #18
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	3328      	adds	r3, #40	; 0x28
 8006888:	443b      	add	r3, r7
 800688a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800688e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d012      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800689a:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	0c5b      	lsrs	r3, r3, #17
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	3328      	adds	r3, #40	; 0x28
 80068a6:	443b      	add	r3, r7
 80068a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4a0e      	ldr	r2, [pc, #56]	; (80068ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80068b2:	fb03 f202 	mul.w	r2, r3, r2
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
 80068be:	e004      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	4a0b      	ldr	r2, [pc, #44]	; (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068c4:	fb02 f303 	mul.w	r3, r2, r3
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	623b      	str	r3, [r7, #32]
      break;
 80068ce:	e002      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80068d2:	623b      	str	r3, [r7, #32]
      break;
 80068d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068d6:	6a3b      	ldr	r3, [r7, #32]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3728      	adds	r7, #40	; 0x28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc90      	pop	{r4, r7}
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	08011200 	.word	0x08011200
 80068e8:	40021000 	.word	0x40021000
 80068ec:	007a1200 	.word	0x007a1200
 80068f0:	003d0900 	.word	0x003d0900

080068f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f8:	4b02      	ldr	r3, [pc, #8]	; (8006904 <HAL_RCC_GetHCLKFreq+0x10>)
 80068fa:	681b      	ldr	r3, [r3, #0]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	bc80      	pop	{r7}
 8006902:	4770      	bx	lr
 8006904:	20000000 	.word	0x20000000

08006908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800690c:	f7ff fff2 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	4903      	ldr	r1, [pc, #12]	; (800692c <HAL_RCC_GetPCLK1Freq+0x24>)
 800691e:	5ccb      	ldrb	r3, [r1, r3]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006924:	4618      	mov	r0, r3
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40021000 	.word	0x40021000
 800692c:	08011438 	.word	0x08011438

08006930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006934:	f7ff ffde 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8006938:	4602      	mov	r2, r0
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	0adb      	lsrs	r3, r3, #11
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	4903      	ldr	r1, [pc, #12]	; (8006954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006946:	5ccb      	ldrb	r3, [r1, r3]
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800694c:	4618      	mov	r0, r3
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40021000 	.word	0x40021000
 8006954:	08011438 	.word	0x08011438

08006958 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	220f      	movs	r2, #15
 8006966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006968:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <HAL_RCC_GetClockConfig+0x58>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f003 0203 	and.w	r2, r3, #3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006974:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <HAL_RCC_GetClockConfig+0x58>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <HAL_RCC_GetClockConfig+0x58>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800698c:	4b08      	ldr	r3, [pc, #32]	; (80069b0 <HAL_RCC_GetClockConfig+0x58>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	08db      	lsrs	r3, r3, #3
 8006992:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <HAL_RCC_GetClockConfig+0x5c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0207 	and.w	r2, r3, #7
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr
 80069b0:	40021000 	.word	0x40021000
 80069b4:	40022000 	.word	0x40022000

080069b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069c0:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <RCC_Delay+0x34>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a0a      	ldr	r2, [pc, #40]	; (80069f0 <RCC_Delay+0x38>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	0a5b      	lsrs	r3, r3, #9
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069d4:	bf00      	nop
  }
  while (Delay --);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	1e5a      	subs	r2, r3, #1
 80069da:	60fa      	str	r2, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f9      	bne.n	80069d4 <RCC_Delay+0x1c>
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr
 80069ec:	20000000 	.word	0x20000000
 80069f0:	10624dd3 	.word	0x10624dd3

080069f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d07d      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006a10:	2300      	movs	r3, #0
 8006a12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a14:	4b4f      	ldr	r3, [pc, #316]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10d      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a20:	4b4c      	ldr	r3, [pc, #304]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	4a4b      	ldr	r2, [pc, #300]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	61d3      	str	r3, [r2, #28]
 8006a2c:	4b49      	ldr	r3, [pc, #292]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3c:	4b46      	ldr	r3, [pc, #280]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d118      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a48:	4b43      	ldr	r3, [pc, #268]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a42      	ldr	r2, [pc, #264]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a54:	f7fd f902 	bl	8003c5c <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a5a:	e008      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a5c:	f7fd f8fe 	bl	8003c5c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b64      	cmp	r3, #100	; 0x64
 8006a68:	d901      	bls.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e06d      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6e:	4b3a      	ldr	r3, [pc, #232]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f0      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a7a:	4b36      	ldr	r3, [pc, #216]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d02e      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d027      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a98:	4b2e      	ldr	r3, [pc, #184]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006aa2:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006aa8:	4b2c      	ldr	r3, [pc, #176]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006aae:	4a29      	ldr	r2, [pc, #164]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d014      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006abe:	f7fd f8cd 	bl	8003c5c <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac4:	e00a      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac6:	f7fd f8c9 	bl	8003c5c <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e036      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006adc:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0ee      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4917      	ldr	r1, [pc, #92]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d105      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b00:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d008      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b18:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	490b      	ldr	r1, [pc, #44]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0310 	and.w	r3, r3, #16
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	4904      	ldr	r1, [pc, #16]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40007000 	.word	0x40007000
 8006b5c:	42420440 	.word	0x42420440

08006b60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b08d      	sub	sp, #52	; 0x34
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b68:	4b58      	ldr	r3, [pc, #352]	; (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006b6a:	f107 040c 	add.w	r4, r7, #12
 8006b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b74:	f240 2301 	movw	r3, #513	; 0x201
 8006b78:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7e:	2300      	movs	r3, #0
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b82:	2300      	movs	r3, #0
 8006b84:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b10      	cmp	r3, #16
 8006b92:	d00a      	beq.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	f200 808e 	bhi.w	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d049      	beq.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d079      	beq.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006ba8:	e086      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006baa:	4b49      	ldr	r3, [pc, #292]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006bb0:	4b47      	ldr	r3, [pc, #284]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d07f      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	0c9b      	lsrs	r3, r3, #18
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	3330      	adds	r3, #48	; 0x30
 8006bc6:	443b      	add	r3, r7
 8006bc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006bcc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d017      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006bd8:	4b3d      	ldr	r3, [pc, #244]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	0c5b      	lsrs	r3, r3, #17
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	3330      	adds	r3, #48	; 0x30
 8006be4:	443b      	add	r3, r7
 8006be6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00d      	beq.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006bf6:	4a37      	ldr	r2, [pc, #220]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	fb02 f303 	mul.w	r3, r2, r3
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c06:	e004      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	4a33      	ldr	r2, [pc, #204]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006c0c:	fb02 f303 	mul.w	r3, r2, r3
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006c12:	4b2f      	ldr	r3, [pc, #188]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c1e:	d102      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c24:	e04a      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c34:	e042      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006c36:	4b26      	ldr	r3, [pc, #152]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c46:	d108      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c58:	e01f      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c64:	d109      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006c72:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c78:	e00f      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c84:	d11c      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006c86:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d016      	beq.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006c92:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c98:	e012      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006c9a:	e011      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006c9c:	f7ff fe48 	bl	8006930 <HAL_RCC_GetPCLK2Freq>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	0b9b      	lsrs	r3, r3, #14
 8006ca8:	f003 0303 	and.w	r3, r3, #3
 8006cac:	3301      	adds	r3, #1
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006cb6:	e004      	b.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006cb8:	bf00      	nop
 8006cba:	e002      	b.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006cbc:	bf00      	nop
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006cc0:	bf00      	nop
    }
  }
  return (frequency);
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3734      	adds	r7, #52	; 0x34
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd90      	pop	{r4, r7, pc}
 8006ccc:	08011210 	.word	0x08011210
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	007a1200 	.word	0x007a1200
 8006cd8:	003d0900 	.word	0x003d0900
 8006cdc:	aaaaaaab 	.word	0xaaaaaaab

08006ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e041      	b.n	8006d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fb f90e 	bl	8001f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f000 fae8 	bl	80072f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d001      	beq.n	8006d98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e032      	b.n	8006dfe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <HAL_TIM_Base_Start+0x88>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00e      	beq.n	8006dc8 <HAL_TIM_Base_Start+0x48>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db2:	d009      	beq.n	8006dc8 <HAL_TIM_Base_Start+0x48>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a14      	ldr	r2, [pc, #80]	; (8006e0c <HAL_TIM_Base_Start+0x8c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d004      	beq.n	8006dc8 <HAL_TIM_Base_Start+0x48>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a13      	ldr	r2, [pc, #76]	; (8006e10 <HAL_TIM_Base_Start+0x90>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d111      	bne.n	8006dec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b06      	cmp	r3, #6
 8006dd8:	d010      	beq.n	8006dfc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0201 	orr.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dea:	e007      	b.n	8006dfc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800

08006e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d001      	beq.n	8006e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e03a      	b.n	8006ea2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a18      	ldr	r2, [pc, #96]	; (8006eac <HAL_TIM_Base_Start_IT+0x98>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00e      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x58>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e56:	d009      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x58>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a14      	ldr	r2, [pc, #80]	; (8006eb0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x58>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a13      	ldr	r2, [pc, #76]	; (8006eb4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d111      	bne.n	8006e90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b06      	cmp	r3, #6
 8006e7c:	d010      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0201 	orr.w	r2, r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e8e:	e007      	b.n	8006ea0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr
 8006eac:	40012c00 	.word	0x40012c00
 8006eb0:	40000400 	.word	0x40000400
 8006eb4:	40000800 	.word	0x40000800

08006eb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6a1a      	ldr	r2, [r3, #32]
 8006ed6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10f      	bne.n	8006f00 <HAL_TIM_Base_Stop_IT+0x48>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	f240 4344 	movw	r3, #1092	; 0x444
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d107      	bne.n	8006f00 <HAL_TIM_Base_Stop_IT+0x48>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0201 	bic.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d122      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d11b      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f06f 0202 	mvn.w	r2, #2
 8006f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f9b1 	bl	80072be <HAL_TIM_IC_CaptureCallback>
 8006f5c:	e005      	b.n	8006f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9a4 	bl	80072ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f9b3 	bl	80072d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d122      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d11b      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0204 	mvn.w	r2, #4
 8006f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f987 	bl	80072be <HAL_TIM_IC_CaptureCallback>
 8006fb0:	e005      	b.n	8006fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f97a 	bl	80072ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f989 	bl	80072d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d122      	bne.n	8007018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d11b      	bne.n	8007018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0208 	mvn.w	r2, #8
 8006fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2204      	movs	r2, #4
 8006fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f95d 	bl	80072be <HAL_TIM_IC_CaptureCallback>
 8007004:	e005      	b.n	8007012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f950 	bl	80072ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f95f 	bl	80072d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0310 	and.w	r3, r3, #16
 8007022:	2b10      	cmp	r3, #16
 8007024:	d122      	bne.n	800706c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0310 	and.w	r3, r3, #16
 8007030:	2b10      	cmp	r3, #16
 8007032:	d11b      	bne.n	800706c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f06f 0210 	mvn.w	r2, #16
 800703c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2208      	movs	r2, #8
 8007042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f933 	bl	80072be <HAL_TIM_IC_CaptureCallback>
 8007058:	e005      	b.n	8007066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f926 	bl	80072ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f935 	bl	80072d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b01      	cmp	r3, #1
 8007078:	d10e      	bne.n	8007098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b01      	cmp	r3, #1
 8007086:	d107      	bne.n	8007098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0201 	mvn.w	r2, #1
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fa fe0c 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a2:	2b80      	cmp	r3, #128	; 0x80
 80070a4:	d10e      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b0:	2b80      	cmp	r3, #128	; 0x80
 80070b2:	d107      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa77 	bl	80075b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d10e      	bne.n	80070f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d107      	bne.n	80070f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f8f9 	bl	80072e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d10e      	bne.n	800711c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b20      	cmp	r3, #32
 800710a:	d107      	bne.n	800711c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0220 	mvn.w	r2, #32
 8007114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa42 	bl	80075a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_TIM_ConfigClockSource+0x18>
 8007138:	2302      	movs	r3, #2
 800713a:	e0b3      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x180>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800715a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007162:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007174:	d03e      	beq.n	80071f4 <HAL_TIM_ConfigClockSource+0xd0>
 8007176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717a:	f200 8087 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x168>
 800717e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007182:	f000 8085 	beq.w	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718a:	d87f      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 800718c:	2b70      	cmp	r3, #112	; 0x70
 800718e:	d01a      	beq.n	80071c6 <HAL_TIM_ConfigClockSource+0xa2>
 8007190:	2b70      	cmp	r3, #112	; 0x70
 8007192:	d87b      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 8007194:	2b60      	cmp	r3, #96	; 0x60
 8007196:	d050      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x116>
 8007198:	2b60      	cmp	r3, #96	; 0x60
 800719a:	d877      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 800719c:	2b50      	cmp	r3, #80	; 0x50
 800719e:	d03c      	beq.n	800721a <HAL_TIM_ConfigClockSource+0xf6>
 80071a0:	2b50      	cmp	r3, #80	; 0x50
 80071a2:	d873      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d058      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x136>
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d86f      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 80071ac:	2b30      	cmp	r3, #48	; 0x30
 80071ae:	d064      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x156>
 80071b0:	2b30      	cmp	r3, #48	; 0x30
 80071b2:	d86b      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d060      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x156>
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d867      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d05c      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x156>
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d05a      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80071c4:	e062      	b.n	800728c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6899      	ldr	r1, [r3, #8]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f000 f966 	bl	80074a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	609a      	str	r2, [r3, #8]
      break;
 80071f2:	e04e      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	6899      	ldr	r1, [r3, #8]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f000 f94f 	bl	80074a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007216:	609a      	str	r2, [r3, #8]
      break;
 8007218:	e03b      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6859      	ldr	r1, [r3, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	461a      	mov	r2, r3
 8007228:	f000 f8c6 	bl	80073b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2150      	movs	r1, #80	; 0x50
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f91d 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8007238:	e02b      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6859      	ldr	r1, [r3, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	461a      	mov	r2, r3
 8007248:	f000 f8e4 	bl	8007414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2160      	movs	r1, #96	; 0x60
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f90d 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8007258:	e01b      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	6859      	ldr	r1, [r3, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	461a      	mov	r2, r3
 8007268:	f000 f8a6 	bl	80073b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2140      	movs	r1, #64	; 0x40
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f8fd 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8007278:	e00b      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f000 f8f4 	bl	8007472 <TIM_ITRx_SetConfig>
        break;
 800728a:	e002      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800728c:	bf00      	nop
 800728e:	e000      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007290:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr

080072be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr

080072e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr

080072f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a29      	ldr	r2, [pc, #164]	; (80073ac <TIM_Base_SetConfig+0xb8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00b      	beq.n	8007324 <TIM_Base_SetConfig+0x30>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007312:	d007      	beq.n	8007324 <TIM_Base_SetConfig+0x30>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a26      	ldr	r2, [pc, #152]	; (80073b0 <TIM_Base_SetConfig+0xbc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_Base_SetConfig+0x30>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a25      	ldr	r2, [pc, #148]	; (80073b4 <TIM_Base_SetConfig+0xc0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d108      	bne.n	8007336 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a1c      	ldr	r2, [pc, #112]	; (80073ac <TIM_Base_SetConfig+0xb8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00b      	beq.n	8007356 <TIM_Base_SetConfig+0x62>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007344:	d007      	beq.n	8007356 <TIM_Base_SetConfig+0x62>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a19      	ldr	r2, [pc, #100]	; (80073b0 <TIM_Base_SetConfig+0xbc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d003      	beq.n	8007356 <TIM_Base_SetConfig+0x62>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <TIM_Base_SetConfig+0xc0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d108      	bne.n	8007368 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a07      	ldr	r2, [pc, #28]	; (80073ac <TIM_Base_SetConfig+0xb8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d103      	bne.n	800739c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	615a      	str	r2, [r3, #20]
}
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr
 80073ac:	40012c00 	.word	0x40012c00
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800

080073b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f023 0201 	bic.w	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f023 030a 	bic.w	r3, r3, #10
 80073f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	621a      	str	r2, [r3, #32]
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f023 0210 	bic.w	r2, r3, #16
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800743e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	031b      	lsls	r3, r3, #12
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	621a      	str	r2, [r3, #32]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr

08007472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	f043 0307 	orr.w	r3, r3, #7
 8007494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	609a      	str	r2, [r3, #8]
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	021a      	lsls	r2, r3, #8
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	609a      	str	r2, [r3, #8]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e046      	b.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a16      	ldr	r2, [pc, #88]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00e      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007548:	d009      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a12      	ldr	r2, [pc, #72]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d004      	beq.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a10      	ldr	r2, [pc, #64]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d10c      	bne.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4313      	orrs	r3, r2
 800756e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	bc80      	pop	{r7}
 8007592:	4770      	bx	lr
 8007594:	40012c00 	.word	0x40012c00
 8007598:	40000400 	.word	0x40000400
 800759c:	40000800 	.word	0x40000800

080075a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr

080075b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e03f      	b.n	8007656 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fa fcd4 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2224      	movs	r2, #36	; 0x24
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f9a7 	bl	800795c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800761c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695a      	ldr	r2, [r3, #20]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800762c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800763c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b08a      	sub	sp, #40	; 0x28
 8007662:	af02      	add	r7, sp, #8
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	603b      	str	r3, [r7, #0]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b20      	cmp	r3, #32
 800767c:	d17c      	bne.n	8007778 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_UART_Transmit+0x2c>
 8007684:	88fb      	ldrh	r3, [r7, #6]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e075      	b.n	800777a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_UART_Transmit+0x3e>
 8007698:	2302      	movs	r3, #2
 800769a:	e06e      	b.n	800777a <HAL_UART_Transmit+0x11c>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2221      	movs	r2, #33	; 0x21
 80076ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076b2:	f7fc fad3 	bl	8003c5c <HAL_GetTick>
 80076b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	88fa      	ldrh	r2, [r7, #6]
 80076bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	88fa      	ldrh	r2, [r7, #6]
 80076c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076cc:	d108      	bne.n	80076e0 <HAL_UART_Transmit+0x82>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d104      	bne.n	80076e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	e003      	b.n	80076e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076f0:	e02a      	b.n	8007748 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2180      	movs	r1, #128	; 0x80
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f8e2 	bl	80078c6 <UART_WaitOnFlagUntilTimeout>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e036      	b.n	800777a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10b      	bne.n	800772a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007720:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	3302      	adds	r3, #2
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	e007      	b.n	800773a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	3301      	adds	r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1cf      	bne.n	80076f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2200      	movs	r2, #0
 800775a:	2140      	movs	r1, #64	; 0x40
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f8b2 	bl	80078c6 <UART_WaitOnFlagUntilTimeout>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e006      	b.n	800777a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	e000      	b.n	800777a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007778:	2302      	movs	r3, #2
  }
}
 800777a:	4618      	mov	r0, r3
 800777c:	3720      	adds	r7, #32
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b08a      	sub	sp, #40	; 0x28
 8007786:	af02      	add	r7, sp, #8
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	603b      	str	r3, [r7, #0]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b20      	cmp	r3, #32
 80077a0:	f040 808c 	bne.w	80078bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <HAL_UART_Receive+0x2e>
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e084      	b.n	80078be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d101      	bne.n	80077c2 <HAL_UART_Receive+0x40>
 80077be:	2302      	movs	r3, #2
 80077c0:	e07d      	b.n	80078be <HAL_UART_Receive+0x13c>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2222      	movs	r2, #34	; 0x22
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077de:	f7fc fa3d 	bl	8003c5c <HAL_GetTick>
 80077e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	88fa      	ldrh	r2, [r7, #6]
 80077e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f8:	d108      	bne.n	800780c <HAL_UART_Receive+0x8a>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e003      	b.n	8007814 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800781c:	e043      	b.n	80078a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2200      	movs	r2, #0
 8007826:	2120      	movs	r1, #32
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f84c 	bl	80078c6 <UART_WaitOnFlagUntilTimeout>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e042      	b.n	80078be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10c      	bne.n	8007858 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784a:	b29a      	uxth	r2, r3
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	3302      	adds	r3, #2
 8007854:	61bb      	str	r3, [r7, #24]
 8007856:	e01f      	b.n	8007898 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007860:	d007      	beq.n	8007872 <HAL_UART_Receive+0xf0>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <HAL_UART_Receive+0xfe>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	b2da      	uxtb	r2, r3
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e008      	b.n	8007892 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788c:	b2da      	uxtb	r2, r3
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	3301      	adds	r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1b6      	bne.n	800781e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	e000      	b.n	80078be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80078bc:	2302      	movs	r3, #2
  }
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3720      	adds	r7, #32
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	603b      	str	r3, [r7, #0]
 80078d2:	4613      	mov	r3, r2
 80078d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d6:	e02c      	b.n	8007932 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078de:	d028      	beq.n	8007932 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80078e6:	f7fc f9b9 	bl	8003c5c <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d21d      	bcs.n	8007932 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68da      	ldr	r2, [r3, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007904:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0201 	bic.w	r2, r2, #1
 8007914:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2220      	movs	r2, #32
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e00f      	b.n	8007952 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4013      	ands	r3, r2
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	429a      	cmp	r2, r3
 8007940:	bf0c      	ite	eq
 8007942:	2301      	moveq	r3, #1
 8007944:	2300      	movne	r3, #0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	429a      	cmp	r2, r3
 800794e:	d0c3      	beq.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007996:	f023 030c 	bic.w	r3, r3, #12
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	6812      	ldr	r2, [r2, #0]
 800799e:	68b9      	ldr	r1, [r7, #8]
 80079a0:	430b      	orrs	r3, r1
 80079a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a2c      	ldr	r2, [pc, #176]	; (8007a70 <UART_SetConfig+0x114>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d103      	bne.n	80079cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079c4:	f7fe ffb4 	bl	8006930 <HAL_RCC_GetPCLK2Freq>
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	e002      	b.n	80079d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80079cc:	f7fe ff9c 	bl	8006908 <HAL_RCC_GetPCLK1Freq>
 80079d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009a      	lsls	r2, r3, #2
 80079dc:	441a      	add	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e8:	4a22      	ldr	r2, [pc, #136]	; (8007a74 <UART_SetConfig+0x118>)
 80079ea:	fba2 2303 	umull	r2, r3, r2, r3
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	0119      	lsls	r1, r3, #4
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009a      	lsls	r2, r3, #2
 80079fc:	441a      	add	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a08:	4b1a      	ldr	r3, [pc, #104]	; (8007a74 <UART_SetConfig+0x118>)
 8007a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	2064      	movs	r0, #100	; 0x64
 8007a12:	fb00 f303 	mul.w	r3, r0, r3
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	3332      	adds	r3, #50	; 0x32
 8007a1c:	4a15      	ldr	r2, [pc, #84]	; (8007a74 <UART_SetConfig+0x118>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a28:	4419      	add	r1, r3
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009a      	lsls	r2, r3, #2
 8007a34:	441a      	add	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a40:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <UART_SetConfig+0x118>)
 8007a42:	fba3 0302 	umull	r0, r3, r3, r2
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	2064      	movs	r0, #100	; 0x64
 8007a4a:	fb00 f303 	mul.w	r3, r0, r3
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	3332      	adds	r3, #50	; 0x32
 8007a54:	4a07      	ldr	r2, [pc, #28]	; (8007a74 <UART_SetConfig+0x118>)
 8007a56:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	f003 020f 	and.w	r2, r3, #15
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	440a      	add	r2, r1
 8007a66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	40013800 	.word	0x40013800
 8007a74:	51eb851f 	.word	0x51eb851f

08007a78 <Flash_Erase>:

/**
 * Flash_Erase
*/
void Flash_Erase(uint32_t address)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8007a80:	f7fd f822 	bl	8004ac8 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.Banks = 1;
 8007a84:	2301      	movs	r3, #1
 8007a86:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages = 1;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.PageAddress = address;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInitStruct, &pageerr);
 8007a94:	f107 020c 	add.w	r2, r7, #12
 8007a98:	f107 0310 	add.w	r3, r7, #16
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd f8fa 	bl	8004c98 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8007aa4:	f7fd f836 	bl	8004b14 <HAL_FLASH_Lock>
}
 8007aa8:	bf00      	nop
 8007aaa:	3720      	adds	r7, #32
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <Flash_Write_Float>:

/**
 * Flash_Write_Float
*/
void Flash_Write_Float(uint32_t address, float f)
{
 8007ab0:	b5b0      	push	{r4, r5, r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8007aba:	f7fd f805 	bl	8004ac8 <HAL_FLASH_Unlock>
	uint8_t data[4];
	*(float*)data = f;
 8007abe:	f107 030c 	add.w	r3, r7, #12
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	601a      	str	r2, [r3, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address, *(uint32_t*)data);
 8007ac6:	f107 030c 	add.w	r3, r7, #12
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2200      	movs	r2, #0
 8007ace:	461c      	mov	r4, r3
 8007ad0:	4615      	mov	r5, r2
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	2002      	movs	r0, #2
 8007ada:	f7fc ff85 	bl	80049e8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8007ade:	f7fd f819 	bl	8004b14 <HAL_FLASH_Lock>
}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bdb0      	pop	{r4, r5, r7, pc}

08007aea <Flash_Read_Float>:

/**
 * Flash_Read_Float
*/
float Flash_Read_Float(uint32_t address)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
	uint32_t data = *(__IO uint32_t *)(address);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
	return *(float*)(&data);
 8007af8:	f107 030c 	add.w	r3, r7, #12
 8007afc:	681b      	ldr	r3, [r3, #0]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr

08007b08 <Hpma115S0_Dust_Sensor_Init>:
 * @param sensor_x 
 * @param uart 
 * @param time_out 
 */
void Hpma115S0_Dust_Sensor_Init(Hpma115S0_Dust_Sensor_Name *sensor_x, UART_HandleTypeDef *uart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
    sensor_x->uart_dust_sensor = uart;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	601a      	str	r2, [r3, #0]
    sensor_x->offset = 0;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	809a      	strh	r2, [r3, #4]
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <Hpma115S0_Start_Particle_Measure>:
 * @param huart_Display 
 * @param time_out 
 * @return uint8_t 
 */
uint8_t Hpma115S0_Start_Particle_Measure(Hpma115S0_Dust_Sensor_Name *sensor_x)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(sensor_x->uart_dust_sensor, (uint8_t*)fame_data_start_particle_peasure, sizeof(fame_data_start_particle_peasure)/sizeof(uint8_t), 1000);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6818      	ldr	r0, [r3, #0]
 8007b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b38:	2204      	movs	r2, #4
 8007b3a:	490a      	ldr	r1, [pc, #40]	; (8007b64 <Hpma115S0_Start_Particle_Measure+0x3c>)
 8007b3c:	f7ff fd8f 	bl	800765e <HAL_UART_Transmit>
    if(HAL_UART_Receive(sensor_x->uart_dust_sensor, (uint8_t*)ackn, sizeof(ackn)/sizeof(uint8_t), 5000) == HAL_OK)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b48:	2202      	movs	r2, #2
 8007b4a:	4907      	ldr	r1, [pc, #28]	; (8007b68 <Hpma115S0_Start_Particle_Measure+0x40>)
 8007b4c:	f7ff fe19 	bl	8007782 <HAL_UART_Receive>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <Hpma115S0_Start_Particle_Measure+0x32>
    {
        return 1;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <Hpma115S0_Start_Particle_Measure+0x34>
    }
    return 0;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	2000000c 	.word	0x2000000c
 8007b68:	20000820 	.word	0x20000820

08007b6c <Hpma115S0_Enable_Auto_Send>:
 * @param huart_Display 
 * @param time_out 
 * @return uint8_t 
 */
uint8_t Hpma115S0_Enable_Auto_Send(Hpma115S0_Dust_Sensor_Name *sensor_x)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(sensor_x->uart_dust_sensor, (uint8_t*)fame_data_enable_auto_send, sizeof(fame_data_enable_auto_send)/sizeof(uint8_t), 1000);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	490a      	ldr	r1, [pc, #40]	; (8007ba8 <Hpma115S0_Enable_Auto_Send+0x3c>)
 8007b80:	f7ff fd6d 	bl	800765e <HAL_UART_Transmit>
    if(HAL_UART_Receive(sensor_x->uart_dust_sensor, (uint8_t*)ackn, sizeof(ackn)/sizeof(uint8_t),  5000) == HAL_OK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	4907      	ldr	r1, [pc, #28]	; (8007bac <Hpma115S0_Enable_Auto_Send+0x40>)
 8007b90:	f7ff fdf7 	bl	8007782 <HAL_UART_Receive>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <Hpma115S0_Enable_Auto_Send+0x32>
    {
        return 1;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <Hpma115S0_Enable_Auto_Send+0x34>
    }
    return 0;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20000010 	.word	0x20000010
 8007bac:	20000820 	.word	0x20000820

08007bb0 <CLCD_Delay>:
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8007bba:	88fb      	ldrh	r3, [r7, #6]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fc f857 	bl	8003c70 <HAL_Delay>
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b086      	sub	sp, #24
 8007bce:	af02      	add	r7, sp, #8
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8007bda:	78fb      	ldrb	r3, [r7, #3]
 8007bdc:	f023 030f 	bic.w	r3, r3, #15
 8007be0:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	7adb      	ldrb	r3, [r3, #11]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	f043 0308 	orr.w	r3, r3, #8
 8007bf6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f043 0308 	orr.w	r3, r3, #8
 8007bfe:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8007c00:	78bb      	ldrb	r3, [r7, #2]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d108      	bne.n	8007c18 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	f043 0301 	orr.w	r3, r3, #1
 8007c0c:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	f043 0301 	orr.w	r3, r3, #1
 8007c14:	73bb      	strb	r3, [r7, #14]
 8007c16:	e00a      	b.n	8007c2e <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8007c18:	78bb      	ldrb	r3, [r7, #2]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d107      	bne.n	8007c2e <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	f043 0304 	orr.w	r3, r3, #4
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8007c38:	2001      	movs	r0, #1
 8007c3a:	f7ff ffb9 	bl	8007bb0 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	f043 0304 	orr.w	r3, r3, #4
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	f7ff ffaf 	bl	8007bb0 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	791b      	ldrb	r3, [r3, #4]
 8007c5e:	b299      	uxth	r1, r3
 8007c60:	f107 0208 	add.w	r2, r7, #8
 8007c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	2304      	movs	r3, #4
 8007c6c:	f7fd fbcc 	bl	8005408 <HAL_I2C_Master_Transmit>
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4611      	mov	r1, r2
 8007c84:	461a      	mov	r2, r3
 8007c86:	460b      	mov	r3, r1
 8007c88:	71fb      	strb	r3, [r7, #7]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	79fa      	ldrb	r2, [r7, #7]
 8007c98:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	79ba      	ldrb	r2, [r7, #6]
 8007c9e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	7e3a      	ldrb	r2, [r7, #24]
 8007ca4:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2228      	movs	r2, #40	; 0x28
 8007caa:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2206      	movs	r2, #6
 8007cb0:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	220c      	movs	r2, #12
 8007cb6:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2214      	movs	r2, #20
 8007cbc:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8007cc4:	2032      	movs	r0, #50	; 0x32
 8007cc6:	f7ff ff73 	bl	8007bb0 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2133      	movs	r1, #51	; 0x33
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7ff ff7b 	bl	8007bca <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2133      	movs	r1, #51	; 0x33
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7ff ff76 	bl	8007bca <CLCD_WriteI2C>
	CLCD_Delay(5);
 8007cde:	2005      	movs	r0, #5
 8007ce0:	f7ff ff66 	bl	8007bb0 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2132      	movs	r1, #50	; 0x32
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff ff6e 	bl	8007bca <CLCD_WriteI2C>
	CLCD_Delay(5);
 8007cee:	2005      	movs	r0, #5
 8007cf0:	f7ff ff5e 	bl	8007bb0 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2120      	movs	r1, #32
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff ff66 	bl	8007bca <CLCD_WriteI2C>
	CLCD_Delay(5);
 8007cfe:	2005      	movs	r0, #5
 8007d00:	f7ff ff56 	bl	8007bb0 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	79db      	ldrb	r3, [r3, #7]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff ff5c 	bl	8007bca <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	7a1b      	ldrb	r3, [r3, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	4619      	mov	r1, r3
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7ff ff55 	bl	8007bca <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	7a5b      	ldrb	r3, [r3, #9]
 8007d24:	2200      	movs	r2, #0
 8007d26:	4619      	mov	r1, r3
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f7ff ff4e 	bl	8007bca <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	7a9b      	ldrb	r3, [r3, #10]
 8007d32:	2200      	movs	r2, #0
 8007d34:	4619      	mov	r1, r3
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff ff47 	bl	8007bca <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2101      	movs	r1, #1
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff ff42 	bl	8007bca <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8007d46:	2200      	movs	r2, #0
 8007d48:	2102      	movs	r1, #2
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff ff3d 	bl	8007bca <CLCD_WriteI2C>
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
 8007d64:	4613      	mov	r3, r2
 8007d66:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	795b      	ldrb	r3, [r3, #5]
 8007d70:	78fa      	ldrb	r2, [r7, #3]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d303      	bcc.n	8007d7e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	795b      	ldrb	r3, [r3, #5]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	799b      	ldrb	r3, [r3, #6]
 8007d82:	78ba      	ldrb	r2, [r7, #2]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d303      	bcc.n	8007d90 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	799b      	ldrb	r3, [r3, #6]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8007d90:	78bb      	ldrb	r3, [r7, #2]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d102      	bne.n	8007d9c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	73fb      	strb	r3, [r7, #15]
 8007d9a:	e013      	b.n	8007dc4 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8007d9c:	78bb      	ldrb	r3, [r7, #2]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d103      	bne.n	8007daa <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	3340      	adds	r3, #64	; 0x40
 8007da6:	73fb      	strb	r3, [r7, #15]
 8007da8:	e00c      	b.n	8007dc4 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8007daa:	78bb      	ldrb	r3, [r7, #2]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d103      	bne.n	8007db8 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	3310      	adds	r3, #16
 8007db4:	73fb      	strb	r3, [r7, #15]
 8007db6:	e005      	b.n	8007dc4 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8007db8:	78bb      	ldrb	r3, [r7, #2]
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d102      	bne.n	8007dc4 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 8007dbe:	78fb      	ldrb	r3, [r7, #3]
 8007dc0:	3350      	adds	r3, #80	; 0x50
 8007dc2:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff fefa 	bl	8007bca <CLCD_WriteI2C>
}
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	2201      	movs	r2, #1
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff feea 	bl	8007bca <CLCD_WriteI2C>
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8007e08:	e007      	b.n	8007e1a <CLCD_I2C_WriteString+0x1c>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	603a      	str	r2, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff ffe2 	bl	8007dde <CLCD_I2C_WriteChar>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f3      	bne.n	8007e0a <CLCD_I2C_WriteString+0xc>
}
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8007e34:	2200      	movs	r2, #0
 8007e36:	2101      	movs	r1, #1
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff fec6 	bl	8007bca <CLCD_WriteI2C>
	CLCD_Delay(5);
 8007e3e:	2005      	movs	r0, #5
 8007e40:	f7ff feb6 	bl	8007bb0 <CLCD_Delay>
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <LM335A_Init>:
 * @param Lm335a_Chanel_ADC 
 * @param Lm335a_Rank_ADC 
 * @param Lm335a_Sample_Time 
 */
void LM335A_Init(LM335A_HandleTypeDef *Lm335a_x,ADC_HandleTypeDef *adc)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
    Lm335a_x->ADC_LM335A = adc;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	601a      	str	r2, [r3, #0]
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc80      	pop	{r7}
 8007e64:	4770      	bx	lr

08007e66 <Mh_Z19B_Co2_Sensor_Init>:
 * @brief Mh_Z19B_Co2_Sensor_Init
 * 
 * @param sensor_x 
 */
void Mh_Z19B_Co2_Sensor_Init(Mh_Z19B_Co2_Sensor_Name *sensor_x, UART_HandleTypeDef *uart)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
    sensor_x->uart_co2_sensor = uart;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	601a      	str	r2, [r3, #0]
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr

08007e80 <Sensor_Set_Auto_Calibration>:
 * 
 * @param sensor_x 
 * @return uint8_t 
 */
uint8_t Sensor_Set_Auto_Calibration(Mh_Z19B_Co2_Sensor_Name *sensor_x)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(sensor_x->uart_co2_sensor,(uint8_t*)sensor_auto_calibration, sizeof(sensor_auto_calibration)/sizeof(uint8_t), 1000);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e90:	2209      	movs	r2, #9
 8007e92:	4904      	ldr	r1, [pc, #16]	; (8007ea4 <Sensor_Set_Auto_Calibration+0x24>)
 8007e94:	f7ff fbe3 	bl	800765e <HAL_UART_Transmit>
    return 0;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000020 	.word	0x20000020

08007ea8 <Mh_Z19B_Co2_Sensor_Concentration>:
 * @param huart3_Debug 
 * @param time_out 
 * @return uint16_t 
 */
uint16_t Mh_Z19B_Co2_Sensor_Concentration(Mh_Z19B_Co2_Sensor_Name *sensor_x)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
     * @brief The Data transmission frame of 8 byte in which the 3rd byte is byte command 
     * The returned result consists of 8 btye, where the 2nd and 3rd bytes are the low and high bytes 
     * containing the parameters of the co2 gas in the environment.
     */  

    uint16_t ppm_co2 = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit(sensor_x->uart_co2_sensor, (uint8_t*)(particle_measure), sizeof(particle_measure)/sizeof(uint8_t), 1000);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ebc:	2209      	movs	r2, #9
 8007ebe:	490f      	ldr	r1, [pc, #60]	; (8007efc <Mh_Z19B_Co2_Sensor_Concentration+0x54>)
 8007ec0:	f7ff fbcd 	bl	800765e <HAL_UART_Transmit>
    if(HAL_UART_Receive(sensor_x->uart_co2_sensor, (uint8_t*)particle_measure_data_co2_sensor, sizeof(particle_measure_data_co2_sensor)/sizeof(uint8_t), 5000) == HAL_OK)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ecc:	2209      	movs	r2, #9
 8007ece:	490c      	ldr	r1, [pc, #48]	; (8007f00 <Mh_Z19B_Co2_Sensor_Concentration+0x58>)
 8007ed0:	f7ff fc57 	bl	8007782 <HAL_UART_Receive>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <Mh_Z19B_Co2_Sensor_Concentration+0x48>
    {
       ppm_co2 = particle_measure_data_co2_sensor[2] << 8;
 8007eda:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <Mh_Z19B_Co2_Sensor_Concentration+0x58>)
 8007edc:	789b      	ldrb	r3, [r3, #2]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	021b      	lsls	r3, r3, #8
 8007ee2:	81fb      	strh	r3, [r7, #14]
       ppm_co2 = ppm_co2 | particle_measure_data_co2_sensor[3];
 8007ee4:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <Mh_Z19B_Co2_Sensor_Concentration+0x58>)
 8007ee6:	78db      	ldrb	r3, [r3, #3]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	89fb      	ldrh	r3, [r7, #14]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	81fb      	strh	r3, [r7, #14]
    }
    return ppm_co2;
 8007ef0:	89fb      	ldrh	r3, [r7, #14]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000014 	.word	0x20000014
 8007f00:	20000824 	.word	0x20000824

08007f04 <Mh_Z19B_Co2_Sensor_Caclulator_Average>:
 * @param sensor_x 
 * @param sample 
 * @return uint16_t 
 */
float Mh_Z19B_Co2_Sensor_Caclulator_Average(Mh_Z19B_Co2_Sensor_Name *sensor_x, uint8_t sample)
{
 8007f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	b08d      	sub	sp, #52	; 0x34
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	72fb      	strb	r3, [r7, #11]
 8007f12:	466b      	mov	r3, sp
 8007f14:	461e      	mov	r6, r3
    float data = 0;
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	623b      	str	r3, [r7, #32]
    uint16_t arr_buff[sample];
 8007f1c:	7af9      	ldrb	r1, [r7, #11]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	3b01      	subs	r3, #1
 8007f22:	61fb      	str	r3, [r7, #28]
 8007f24:	b2cb      	uxtb	r3, r1
 8007f26:	2200      	movs	r2, #0
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	0103      	lsls	r3, r0, #4
 8007f38:	6838      	ldr	r0, [r7, #0]
 8007f3a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8007f3e:	6838      	ldr	r0, [r7, #0]
 8007f40:	0102      	lsls	r2, r0, #4
 8007f42:	b2cb      	uxtb	r3, r1
 8007f44:	2200      	movs	r2, #0
 8007f46:	469a      	mov	sl, r3
 8007f48:	4693      	mov	fp, r2
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8007f56:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8007f5a:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8007f5e:	460b      	mov	r3, r1
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	3307      	adds	r3, #7
 8007f64:	08db      	lsrs	r3, r3, #3
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	ebad 0d03 	sub.w	sp, sp, r3
 8007f6c:	466b      	mov	r3, sp
 8007f6e:	3301      	adds	r3, #1
 8007f70:	085b      	lsrs	r3, r3, #1
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	61bb      	str	r3, [r7, #24]
    uint16_t copy_buff[sample];
 8007f76:	7af9      	ldrb	r1, [r7, #11]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	b2cb      	uxtb	r3, r1
 8007f80:	2200      	movs	r2, #0
 8007f82:	4698      	mov	r8, r3
 8007f84:	4691      	mov	r9, r2
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8007f92:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8007f96:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8007f9a:	b2cb      	uxtb	r3, r1
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	461c      	mov	r4, r3
 8007fa0:	4615      	mov	r5, r2
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	012b      	lsls	r3, r5, #4
 8007fac:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8007fb0:	0122      	lsls	r2, r4, #4
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	3307      	adds	r3, #7
 8007fb8:	08db      	lsrs	r3, r3, #3
 8007fba:	00db      	lsls	r3, r3, #3
 8007fbc:	ebad 0d03 	sub.w	sp, sp, r3
 8007fc0:	466b      	mov	r3, sp
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	085b      	lsrs	r3, r3, #1
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	613b      	str	r3, [r7, #16]
    uint32_t sum =0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t index = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    for(uint8_t i = 0; i< sample; i++)
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8007fda:	e011      	b.n	8008000 <Mh_Z19B_Co2_Sensor_Caclulator_Average+0xfc>
    {
        arr_buff[i] = Mh_Z19B_Co2_Sensor_Concentration(sensor_x);
 8007fdc:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7ff ff61 	bl	8007ea8 <Mh_Z19B_Co2_Sensor_Concentration>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	461a      	mov	r2, r3
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        HAL_Delay(5);
 8007ff0:	2005      	movs	r0, #5
 8007ff2:	f7fb fe3d 	bl	8003c70 <HAL_Delay>
    for(uint8_t i = 0; i< sample; i++)
 8007ff6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8008000:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008004:	7afb      	ldrb	r3, [r7, #11]
 8008006:	429a      	cmp	r2, r3
 8008008:	d3e8      	bcc.n	8007fdc <Mh_Z19B_Co2_Sensor_Caclulator_Average+0xd8>
    }

    for(uint8_t i =0; i < sample; i++)
 800800a:	2300      	movs	r3, #0
 800800c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8008010:	e00d      	b.n	800802e <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x12a>
    {
        sum += arr_buff[i];
 8008012:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800801c:	461a      	mov	r2, r3
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	4413      	add	r3, r2
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
    for(uint8_t i =0; i < sample; i++)
 8008024:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008028:	3301      	adds	r3, #1
 800802a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800802e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	429a      	cmp	r2, r3
 8008036:	d3ec      	bcc.n	8008012 <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x10e>
    }

    data = (float)sum / sample;
 8008038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800803a:	f7f8 fe2b 	bl	8000c94 <__aeabi_ui2f>
 800803e:	4604      	mov	r4, r0
 8008040:	7afb      	ldrb	r3, [r7, #11]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f8 fe2a 	bl	8000c9c <__aeabi_i2f>
 8008048:	4603      	mov	r3, r0
 800804a:	4619      	mov	r1, r3
 800804c:	4620      	mov	r0, r4
 800804e:	f7f8 ff2d 	bl	8000eac <__aeabi_fdiv>
 8008052:	4603      	mov	r3, r0
 8008054:	623b      	str	r3, [r7, #32]

    for(uint8_t i =0; i < sample; i++)
 8008056:	2300      	movs	r3, #0
 8008058:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800805c:	e033      	b.n	80080c6 <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x1c2>
    {
        if(abs(data - arr_buff[i]) < data)
 800805e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008068:	4618      	mov	r0, r3
 800806a:	f7f8 fe17 	bl	8000c9c <__aeabi_i2f>
 800806e:	4603      	mov	r3, r0
 8008070:	4619      	mov	r1, r3
 8008072:	6a38      	ldr	r0, [r7, #32]
 8008074:	f7f8 fd5c 	bl	8000b30 <__aeabi_fsub>
 8008078:	4603      	mov	r3, r0
 800807a:	4618      	mov	r0, r3
 800807c:	f7f9 f828 	bl	80010d0 <__aeabi_f2iz>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	bfb8      	it	lt
 8008086:	425b      	neglt	r3, r3
 8008088:	4618      	mov	r0, r3
 800808a:	f7f8 fe07 	bl	8000c9c <__aeabi_i2f>
 800808e:	4603      	mov	r3, r0
 8008090:	4619      	mov	r1, r3
 8008092:	6a38      	ldr	r0, [r7, #32]
 8008094:	f7f9 f812 	bl	80010bc <__aeabi_fcmpgt>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00e      	beq.n	80080bc <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x1b8>
        {
        	copy_buff[index]= arr_buff[i];
 800809e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80080a2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            index ++;
 80080b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080b6:	3301      	adds	r3, #1
 80080b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for(uint8_t i =0; i < sample; i++)
 80080bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80080c0:	3301      	adds	r3, #1
 80080c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80080c6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d3c6      	bcc.n	800805e <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x15a>
        }
    }

    sum = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
    data = 0;
 80080d4:	f04f 0300 	mov.w	r3, #0
 80080d8:	623b      	str	r3, [r7, #32]
    for(uint8_t i =0; i < index; i++)
 80080da:	2300      	movs	r3, #0
 80080dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80080e0:	e00d      	b.n	80080fe <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x1fa>
    {
        sum += copy_buff[i];
 80080e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80080ec:	461a      	mov	r2, r3
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	4413      	add	r3, r2
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
    for(uint8_t i =0; i < index; i++)
 80080f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080f8:	3301      	adds	r3, #1
 80080fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80080fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008102:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008106:	429a      	cmp	r2, r3
 8008108:	d3eb      	bcc.n	80080e2 <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x1de>
    }

    data = (float)sum / index;
 800810a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800810c:	f7f8 fdc2 	bl	8000c94 <__aeabi_ui2f>
 8008110:	4604      	mov	r4, r0
 8008112:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008116:	4618      	mov	r0, r3
 8008118:	f7f8 fdc0 	bl	8000c9c <__aeabi_i2f>
 800811c:	4603      	mov	r3, r0
 800811e:	4619      	mov	r1, r3
 8008120:	4620      	mov	r0, r4
 8008122:	f7f8 fec3 	bl	8000eac <__aeabi_fdiv>
 8008126:	4603      	mov	r3, r0
 8008128:	623b      	str	r3, [r7, #32]

    if(data >= 1000)
 800812a:	490d      	ldr	r1, [pc, #52]	; (8008160 <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x25c>)
 800812c:	6a38      	ldr	r0, [r7, #32]
 800812e:	f7f8 ffbb 	bl	80010a8 <__aeabi_fcmpge>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x238>
    {
        data = 1000;
 8008138:	4b09      	ldr	r3, [pc, #36]	; (8008160 <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x25c>)
 800813a:	623b      	str	r3, [r7, #32]
    }

    if(data <= 0)
 800813c:	f04f 0100 	mov.w	r1, #0
 8008140:	6a38      	ldr	r0, [r7, #32]
 8008142:	f7f8 ffa7 	bl	8001094 <__aeabi_fcmple>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <Mh_Z19B_Co2_Sensor_Caclulator_Average+0x24e>
    {
    	data = 0;
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	623b      	str	r3, [r7, #32]
    }

    return data;
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	46b5      	mov	sp, r6

}
 8008156:	4618      	mov	r0, r3
 8008158:	3734      	adds	r7, #52	; 0x34
 800815a:	46bd      	mov	sp, r7
 800815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008160:	447a0000 	.word	0x447a0000

08008164 <vApplicationStackOverflowHook>:
 *
 * @param xTask
 * @param pcTaskName
 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800816e:	b672      	cpsid	i
}
 8008170:	bf00      	nop
   __disable_irq();
  while(1)
  {
	HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_SET);
 8008172:	2201      	movs	r2, #1
 8008174:	2101      	movs	r1, #1
 8008176:	480a      	ldr	r0, [pc, #40]	; (80081a0 <vApplicationStackOverflowHook+0x3c>)
 8008178:	f7fc ffd1 	bl	800511e <HAL_GPIO_WritePin>
	Transmit_Data_To_Computer(&pgm_1, (uint8_t*)"memory overflow applications\r\n", strlen("memory overflow applications\r\n"));
 800817c:	221e      	movs	r2, #30
 800817e:	4909      	ldr	r1, [pc, #36]	; (80081a4 <vApplicationStackOverflowHook+0x40>)
 8008180:	4809      	ldr	r0, [pc, #36]	; (80081a8 <vApplicationStackOverflowHook+0x44>)
 8008182:	f7fa fbed 	bl	8002960 <Transmit_Data_To_Computer>
	vTaskDelay(100);
 8008186:	2064      	movs	r0, #100	; 0x64
 8008188:	f000 fffc 	bl	8009184 <vTaskDelay>
	HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800818c:	2200      	movs	r2, #0
 800818e:	2101      	movs	r1, #1
 8008190:	4803      	ldr	r0, [pc, #12]	; (80081a0 <vApplicationStackOverflowHook+0x3c>)
 8008192:	f7fc ffc4 	bl	800511e <HAL_GPIO_WritePin>
	vTaskDelay(100);
 8008196:	2064      	movs	r0, #100	; 0x64
 8008198:	f000 fff4 	bl	8009184 <vTaskDelay>
  {
 800819c:	e7e9      	b.n	8008172 <vApplicationStackOverflowHook+0xe>
 800819e:	bf00      	nop
 80081a0:	40011800 	.word	0x40011800
 80081a4:	08011220 	.word	0x08011220
 80081a8:	2000083c 	.word	0x2000083c

080081ac <vApplicationMallocFailedHook>:
/**
 * @brief Application Malloc Failed Hook
 *
 */
void vApplicationMallocFailedHook(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80081b0:	b672      	cpsid	i
}
 80081b2:	bf00      	nop
	/* Force an assert. */
  // configASSERT( ( volatile void * ) NULL );
  __disable_irq();
  while (1)
  {
    HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_SET);
 80081b4:	2201      	movs	r2, #1
 80081b6:	2101      	movs	r1, #1
 80081b8:	480a      	ldr	r0, [pc, #40]	; (80081e4 <vApplicationMallocFailedHook+0x38>)
 80081ba:	f7fc ffb0 	bl	800511e <HAL_GPIO_WritePin>
    Transmit_Data_To_Computer(&pgm_1, (uint8_t*)("lack of memory allocation for applications\r\n"), strlen("lack of memory allocation for applications\r\n"));
 80081be:	222c      	movs	r2, #44	; 0x2c
 80081c0:	4909      	ldr	r1, [pc, #36]	; (80081e8 <vApplicationMallocFailedHook+0x3c>)
 80081c2:	480a      	ldr	r0, [pc, #40]	; (80081ec <vApplicationMallocFailedHook+0x40>)
 80081c4:	f7fa fbcc 	bl	8002960 <Transmit_Data_To_Computer>
	vTaskDelay(1000);
 80081c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081cc:	f000 ffda 	bl	8009184 <vTaskDelay>
	HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 80081d0:	2200      	movs	r2, #0
 80081d2:	2101      	movs	r1, #1
 80081d4:	4803      	ldr	r0, [pc, #12]	; (80081e4 <vApplicationMallocFailedHook+0x38>)
 80081d6:	f7fc ffa2 	bl	800511e <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 80081da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081de:	f000 ffd1 	bl	8009184 <vTaskDelay>
  {
 80081e2:	e7e7      	b.n	80081b4 <vApplicationMallocFailedHook+0x8>
 80081e4:	40011800 	.word	0x40011800
 80081e8:	08011240 	.word	0x08011240
 80081ec:	2000083c 	.word	0x2000083c

080081f0 <Init_Debug_Program>:
/**
 * @brief Init_Debug_Program
 * 
 */
static void Init_Debug_Program(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af02      	add	r7, sp, #8
	  Debug_Program_Config(&pgm_1, &huart3, Led_MCH_GPIO_Port, Led_MCH_Pin, 1000);
 80081f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	2302      	movs	r3, #2
 80081fe:	4a04      	ldr	r2, [pc, #16]	; (8008210 <Init_Debug_Program+0x20>)
 8008200:	4904      	ldr	r1, [pc, #16]	; (8008214 <Init_Debug_Program+0x24>)
 8008202:	4805      	ldr	r0, [pc, #20]	; (8008218 <Init_Debug_Program+0x28>)
 8008204:	f7fa fb94 	bl	8002930 <Debug_Program_Config>
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	40011800 	.word	0x40011800
 8008214:	2000076c 	.word	0x2000076c
 8008218:	2000083c 	.word	0x2000083c

0800821c <Init_LCD_Display>:
/**
 * @brief Init_LCD_Display
 * 
 */
static void Init_LCD_Display(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af02      	add	r7, sp, #8
	  CLCD_I2C_Init(&lcd1, &hi2c2, 0x4e, 20, 4);
 8008222:	2304      	movs	r3, #4
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	2314      	movs	r3, #20
 8008228:	224e      	movs	r2, #78	; 0x4e
 800822a:	4910      	ldr	r1, [pc, #64]	; (800826c <Init_LCD_Display+0x50>)
 800822c:	4810      	ldr	r0, [pc, #64]	; (8008270 <Init_LCD_Display+0x54>)
 800822e:	f7ff fd23 	bl	8007c78 <CLCD_I2C_Init>
	  CLCD_I2C_SetCursor(&lcd1, 0, 1);
 8008232:	2201      	movs	r2, #1
 8008234:	2100      	movs	r1, #0
 8008236:	480e      	ldr	r0, [pc, #56]	; (8008270 <Init_LCD_Display+0x54>)
 8008238:	f7ff fd8e 	bl	8007d58 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(&lcd1, "**WELLCOME AQI**");
 800823c:	490d      	ldr	r1, [pc, #52]	; (8008274 <Init_LCD_Display+0x58>)
 800823e:	480c      	ldr	r0, [pc, #48]	; (8008270 <Init_LCD_Display+0x54>)
 8008240:	f7ff fddd 	bl	8007dfe <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(&lcd1, 0, 2);
 8008244:	2202      	movs	r2, #2
 8008246:	2100      	movs	r1, #0
 8008248:	4809      	ldr	r0, [pc, #36]	; (8008270 <Init_LCD_Display+0x54>)
 800824a:	f7ff fd85 	bl	8007d58 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(&lcd1, "AQI CALIBRATION");
 800824e:	490a      	ldr	r1, [pc, #40]	; (8008278 <Init_LCD_Display+0x5c>)
 8008250:	4807      	ldr	r0, [pc, #28]	; (8008270 <Init_LCD_Display+0x54>)
 8008252:	f7ff fdd4 	bl	8007dfe <CLCD_I2C_WriteString>
	  HAL_Delay(5000);
 8008256:	f241 3088 	movw	r0, #5000	; 0x1388
 800825a:	f7fb fd09 	bl	8003c70 <HAL_Delay>
	  CLCD_I2C_Clear(&lcd1);
 800825e:	4804      	ldr	r0, [pc, #16]	; (8008270 <Init_LCD_Display+0x54>)
 8008260:	f7ff fde4 	bl	8007e2c <CLCD_I2C_Clear>
}
 8008264:	bf00      	nop
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000600 	.word	0x20000600
 8008270:	2000086c 	.word	0x2000086c
 8008274:	08011270 	.word	0x08011270
 8008278:	08011284 	.word	0x08011284

0800827c <Init_Transimir_Lora_Mode_Uart>:
/**
 * @brief Init_Transimir_Lora_Mode_Uart
 * 
 */
static void Init_Transimir_Lora_Mode_Uart(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
    Uart_Lora_Init(&moudle_lora_01, &huart3, 1000);
 8008280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008284:	4902      	ldr	r1, [pc, #8]	; (8008290 <Init_Transimir_Lora_Mode_Uart+0x14>)
 8008286:	4803      	ldr	r0, [pc, #12]	; (8008294 <Init_Transimir_Lora_Mode_Uart+0x18>)
 8008288:	f002 f9c0 	bl	800a60c <Uart_Lora_Init>
}
 800828c:	bf00      	nop
 800828e:	bd80      	pop	{r7, pc}
 8008290:	2000076c 	.word	0x2000076c
 8008294:	2000084c 	.word	0x2000084c

08008298 <Init_Cmd_Transmit_Lora>:
/**
 * @brief Init_Cmd_Transmit_Lora
 * 
 */
void Init_Cmd_Transmit_Lora(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
	Transmit_Data_To_Computer(&pgm_1, (uint8_t*)"ATZ\r\n", (uint16_t)strlen("ATZ\r\n"));
 800829c:	2205      	movs	r2, #5
 800829e:	4903      	ldr	r1, [pc, #12]	; (80082ac <Init_Cmd_Transmit_Lora+0x14>)
 80082a0:	4803      	ldr	r0, [pc, #12]	; (80082b0 <Init_Cmd_Transmit_Lora+0x18>)
 80082a2:	f7fa fb5d 	bl	8002960 <Transmit_Data_To_Computer>
}
 80082a6:	bf00      	nop
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	08011294 	.word	0x08011294
 80082b0:	2000083c 	.word	0x2000083c

080082b4 <Init_HC595>:
/**
 * @brief Init_HC595
 * 
 */
static void Init_HC595(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
	Send_Data_74HC595(0xFF);
 80082b8:	20ff      	movs	r0, #255	; 0xff
 80082ba:	f7fb fc71 	bl	8003ba0 <Send_Data_74HC595>
}
 80082be:	bf00      	nop
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <Init_RTOS_System_Project>:
 * @brief Init_RTOS_System_Project
 * 
 */
#if USE_RTOS_MACHINE_SYSTEM
void Init_RTOS_System_Project(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af02      	add	r7, sp, #8
	  /* USER CODE BEGIN RTOS_MUTEX */
	  /* add mutexes, ... */
	  /* USER CODE END RTOS_MUTEX */

	  /* USER CODE BEGIN RTOS_SEMAPHORES */
	  countingsem = xSemaphoreCreateCounting(2, 0);
 80082ca:	2100      	movs	r1, #0
 80082cc:	2002      	movs	r0, #2
 80082ce:	f000 fa7a 	bl	80087c6 <xQueueCreateCountingSemaphore>
 80082d2:	4603      	mov	r3, r0
 80082d4:	4a0d      	ldr	r2, [pc, #52]	; (800830c <Init_RTOS_System_Project+0x48>)
 80082d6:	6013      	str	r3, [r2, #0]
	  /* add queues, ... */
	  /* USER CODE END RTOS_QUEUES */

	  /* Create the thread(s) */
	  /* USER CODE BEGIN RTOS_THREADS */
		xTaskCreate(Task01_Routine_System, NAME_TASK01_ROUTINE_SYSTEM,  STACK_SIZE_TASK01_ROUTINE_SYSTEM, NULL, PRORITY_TASK01_ROUTINE_SYSTEM,   &my_task01_routine_system);
 80082d8:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <Init_RTOS_System_Project+0x4c>)
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	2303      	movs	r3, #3
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2300      	movs	r3, #0
 80082e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e6:	490b      	ldr	r1, [pc, #44]	; (8008314 <Init_RTOS_System_Project+0x50>)
 80082e8:	480b      	ldr	r0, [pc, #44]	; (8008318 <Init_RTOS_System_Project+0x54>)
 80082ea:	f000 fe06 	bl	8008efa <xTaskCreate>
		xTaskCreate(Task02_Status_Machine, NAME_TASK02_STATUS_MACHINE,  STACK_SIZE_TASK02_STATUS_MACHINE, NULL, PRORITY_TASK02_STATUS_MACHINE,   &my_task02_status_machine);
 80082ee:	4b0b      	ldr	r3, [pc, #44]	; (800831c <Init_RTOS_System_Project+0x58>)
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	2302      	movs	r3, #2
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	2300      	movs	r3, #0
 80082f8:	2240      	movs	r2, #64	; 0x40
 80082fa:	4909      	ldr	r1, [pc, #36]	; (8008320 <Init_RTOS_System_Project+0x5c>)
 80082fc:	4809      	ldr	r0, [pc, #36]	; (8008324 <Init_RTOS_System_Project+0x60>)
 80082fe:	f000 fdfc 	bl	8008efa <xTaskCreate>
		vTaskStartScheduler();
 8008302:	f000 ff73 	bl	80091ec <vTaskStartScheduler>
	  /* Start scheduler */

	  /* We should never get here as control is now taken by the scheduler */
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
}
 8008306:	bf00      	nop
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000838 	.word	0x20000838
 8008310:	20000830 	.word	0x20000830
 8008314:	0801129c 	.word	0x0801129c
 8008318:	08008359 	.word	0x08008359
 800831c:	20000834 	.word	0x20000834
 8008320:	080112b4 	.word	0x080112b4
 8008324:	0800841d 	.word	0x0800841d

08008328 <Init_System_Funtion_Project>:
/**
 * @brief Init_System_Funtion_Project
 * 
 */
void Init_System_Funtion_Project(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
	/* Init Program Sensor*/
	Init_Sensor();
 800832c:	f005 fa5c 	bl	800d7e8 <Init_Sensor>

	/*Init Program Process Bebug*/
	Init_Debug_Program();
 8008330:	f7ff ff5e 	bl	80081f0 <Init_Debug_Program>

	/*Init driver hc595*/
	Init_HC595();
 8008334:	f7ff ffbe 	bl	80082b4 <Init_HC595>

	/*Init Display LCD*/
	Init_LCD_Display();
 8008338:	f7ff ff70 	bl	800821c <Init_LCD_Display>

	/*Init Transmit data from MCU to Module lora*/
	Init_Transimir_Lora_Mode_Uart();
 800833c:	f7ff ff9e 	bl	800827c <Init_Transimir_Lora_Mode_Uart>

	/*Init command control module lora*/
	Init_Cmd_Transmit_Lora();
 8008340:	f7ff ffaa 	bl	8008298 <Init_Cmd_Transmit_Lora>

	/*Init timer start*/
	//HAL_TIM_Base_Start_IT(&htim3);
}
 8008344:	bf00      	nop
 8008346:	bd80      	pop	{r7, pc}

08008348 <Routine01_Task_01_Routine_System>:
 * @brief Routine01_Task_01_Request_Sensor
 * 
 * @return uint8_t 
 */
static uint8_t Routine01_Task_01_Routine_System(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
	  Funtion_Routine_Hightlevel();
 800834c:	f005 fb30 	bl	800d9b0 <Funtion_Routine_Hightlevel>
      return 0;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <Task01_Routine_System>:
 * @brief Task01_Request_Sensor
 *
 * @param parameter
 */
static void Task01_Routine_System(void *parameter)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t time_wakeup_sensor = xTaskGetTickCount();
 8008360:	f001 f858 	bl	8009414 <xTaskGetTickCount>
 8008364:	60f8      	str	r0, [r7, #12]
  static __IO uint8_t check_sate_machine = 0;
  while(1)
  {
    // HAL_IWDG_Refresh(&hiwdg);
	xSemaphoreGive(countingsem);
 8008366:	4b27      	ldr	r3, [pc, #156]	; (8008404 <Task01_Routine_System+0xac>)
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	2300      	movs	r3, #0
 800836c:	2200      	movs	r2, #0
 800836e:	2100      	movs	r1, #0
 8008370:	f000 fa5c 	bl	800882c <xQueueGenericSend>
    switch(check_sate_machine)
 8008374:	4b24      	ldr	r3, [pc, #144]	; (8008408 <Task01_Routine_System+0xb0>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b03      	cmp	r3, #3
 800837c:	d83c      	bhi.n	80083f8 <Task01_Routine_System+0xa0>
 800837e:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <Task01_Routine_System+0x2c>)
 8008380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008384:	08008395 	.word	0x08008395
 8008388:	080083cb 	.word	0x080083cb
 800838c:	080083e1 	.word	0x080083e1
 8008390:	080083f3 	.word	0x080083f3
    {
    	case 0:
    		Init_Cmd_Transmit_Lora();
 8008394:	f7ff ff80 	bl	8008298 <Init_Cmd_Transmit_Lora>
    		while(xTaskGetTickCount() - time_wakeup_sensor <= TIME_WAKE_UP_SENSOR)
 8008398:	e008      	b.n	80083ac <Task01_Routine_System+0x54>
    		{
	 			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800839a:	2200      	movs	r2, #0
 800839c:	2100      	movs	r1, #0
 800839e:	481b      	ldr	r0, [pc, #108]	; (800840c <Task01_Routine_System+0xb4>)
 80083a0:	f7ff fcda 	bl	8007d58 <CLCD_I2C_SetCursor>
	 			CLCD_I2C_WriteString(&lcd1, "Waiting 3m...");
 80083a4:	491a      	ldr	r1, [pc, #104]	; (8008410 <Task01_Routine_System+0xb8>)
 80083a6:	4819      	ldr	r0, [pc, #100]	; (800840c <Task01_Routine_System+0xb4>)
 80083a8:	f7ff fd29 	bl	8007dfe <CLCD_I2C_WriteString>
    		while(xTaskGetTickCount() - time_wakeup_sensor <= TIME_WAKE_UP_SENSOR)
 80083ac:	f001 f832 	bl	8009414 <xTaskGetTickCount>
 80083b0:	4602      	mov	r2, r0
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	4a17      	ldr	r2, [pc, #92]	; (8008414 <Task01_Routine_System+0xbc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d9ee      	bls.n	800839a <Task01_Routine_System+0x42>
    		}
    		HAL_TIM_Base_Start_IT(&htim3);
 80083bc:	4816      	ldr	r0, [pc, #88]	; (8008418 <Task01_Routine_System+0xc0>)
 80083be:	f7fe fd29 	bl	8006e14 <HAL_TIM_Base_Start_IT>
    		check_sate_machine = 1;
 80083c2:	4b11      	ldr	r3, [pc, #68]	; (8008408 <Task01_Routine_System+0xb0>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	701a      	strb	r2, [r3, #0]
    		break;
 80083c8:	e017      	b.n	80083fa <Task01_Routine_System+0xa2>
    	case 1:
    		CLCD_I2C_Clear(&lcd1);
 80083ca:	4810      	ldr	r0, [pc, #64]	; (800840c <Task01_Routine_System+0xb4>)
 80083cc:	f7ff fd2e 	bl	8007e2c <CLCD_I2C_Clear>
    		check_sate_machine ++;
 80083d0:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <Task01_Routine_System+0xb0>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	3301      	adds	r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <Task01_Routine_System+0xb0>)
 80083dc:	701a      	strb	r2, [r3, #0]
    		break;
 80083de:	e00c      	b.n	80083fa <Task01_Routine_System+0xa2>
    	case 2:
    		Routine01_Task_01_Routine_System();;
 80083e0:	f7ff ffb2 	bl	8008348 <Routine01_Task_01_Routine_System>
    	    check_sate_machine ++;
 80083e4:	4b08      	ldr	r3, [pc, #32]	; (8008408 <Task01_Routine_System+0xb0>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	3301      	adds	r3, #1
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	4b06      	ldr	r3, [pc, #24]	; (8008408 <Task01_Routine_System+0xb0>)
 80083f0:	701a      	strb	r2, [r3, #0]
    	case 3:
    		//Routine02_Task_02_Status_Machine();
    		check_sate_machine = 2;
 80083f2:	4b05      	ldr	r3, [pc, #20]	; (8008408 <Task01_Routine_System+0xb0>)
 80083f4:	2202      	movs	r2, #2
 80083f6:	701a      	strb	r2, [r3, #0]
    	default:
    		break;
 80083f8:	bf00      	nop
    }
    vTaskDelay(1);
 80083fa:	2001      	movs	r0, #1
 80083fc:	f000 fec2 	bl	8009184 <vTaskDelay>
	xSemaphoreGive(countingsem);
 8008400:	e7b1      	b.n	8008366 <Task01_Routine_System+0xe>
 8008402:	bf00      	nop
 8008404:	20000838 	.word	0x20000838
 8008408:	20000878 	.word	0x20000878
 800840c:	2000086c 	.word	0x2000086c
 8008410:	080112cc 	.word	0x080112cc
 8008414:	0002bf20 	.word	0x0002bf20
 8008418:	2000069c 	.word	0x2000069c

0800841c <Task02_Status_Machine>:
 * @brief Task03_Status Machine
 *
 * @param parameter
 */
static void Task02_Status_Machine(void *parameter)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  while(1)
  {
	xSemaphoreTake(countingsem, portMAX_DELAY);
 8008424:	4b05      	ldr	r3, [pc, #20]	; (800843c <Task02_Status_Machine+0x20>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fafb 	bl	8008a28 <xQueueSemaphoreTake>
//    Routine02_Task_02_Status_Machine();
    vTaskDelay(1);
 8008432:	2001      	movs	r0, #1
 8008434:	f000 fea6 	bl	8009184 <vTaskDelay>
	xSemaphoreTake(countingsem, portMAX_DELAY);
 8008438:	e7f4      	b.n	8008424 <Task02_Status_Machine+0x8>
 800843a:	bf00      	nop
 800843c:	20000838 	.word	0x20000838

08008440 <Routine_Machine_NotUseRTOS>:
 * @brief Routine_Machine_NotUseRTOS
 * 
 * @return uint8_t 
 */
uint8_t Routine_Machine_NotUseRTOS(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
    uint32_t tick_wake_up_sensor = HAL_GetTick();
 8008446:	f7fb fc09 	bl	8003c5c <HAL_GetTick>
 800844a:	6078      	str	r0, [r7, #4]
    static __IO uint8_t check_sate_machine = 0;
    switch(check_sate_machine)
 800844c:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <Routine_Machine_NotUseRTOS+0x88>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d831      	bhi.n	80084ba <Routine_Machine_NotUseRTOS+0x7a>
 8008456:	a201      	add	r2, pc, #4	; (adr r2, 800845c <Routine_Machine_NotUseRTOS+0x1c>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	0800846d 	.word	0x0800846d
 8008460:	080084a3 	.word	0x080084a3
 8008464:	080084b1 	.word	0x080084b1
 8008468:	080084b5 	.word	0x080084b5
	{
		case 0:
			Init_Cmd_Transmit_Lora();
 800846c:	f7ff ff14 	bl	8008298 <Init_Cmd_Transmit_Lora>
			while(HAL_GetTick() - tick_wake_up_sensor <= TIME_WAKE_UP_SENSOR)
 8008470:	e008      	b.n	8008484 <Routine_Machine_NotUseRTOS+0x44>
			{
				CLCD_I2C_SetCursor(&lcd1, 0, 0);
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	4815      	ldr	r0, [pc, #84]	; (80084cc <Routine_Machine_NotUseRTOS+0x8c>)
 8008478:	f7ff fc6e 	bl	8007d58 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&lcd1, "Waitting 4m...");
 800847c:	4914      	ldr	r1, [pc, #80]	; (80084d0 <Routine_Machine_NotUseRTOS+0x90>)
 800847e:	4813      	ldr	r0, [pc, #76]	; (80084cc <Routine_Machine_NotUseRTOS+0x8c>)
 8008480:	f7ff fcbd 	bl	8007dfe <CLCD_I2C_WriteString>
			while(HAL_GetTick() - tick_wake_up_sensor <= TIME_WAKE_UP_SENSOR)
 8008484:	f7fb fbea 	bl	8003c5c <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	4a11      	ldr	r2, [pc, #68]	; (80084d4 <Routine_Machine_NotUseRTOS+0x94>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d9ee      	bls.n	8008472 <Routine_Machine_NotUseRTOS+0x32>
			}
			HAL_TIM_Base_Start_IT(&htim3);
 8008494:	4810      	ldr	r0, [pc, #64]	; (80084d8 <Routine_Machine_NotUseRTOS+0x98>)
 8008496:	f7fe fcbd 	bl	8006e14 <HAL_TIM_Base_Start_IT>
			check_sate_machine = 1;
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <Routine_Machine_NotUseRTOS+0x88>)
 800849c:	2201      	movs	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]
			break;
 80084a0:	e00c      	b.n	80084bc <Routine_Machine_NotUseRTOS+0x7c>
		case 1:
			CLCD_I2C_Clear(&lcd1);
 80084a2:	480a      	ldr	r0, [pc, #40]	; (80084cc <Routine_Machine_NotUseRTOS+0x8c>)
 80084a4:	f7ff fcc2 	bl	8007e2c <CLCD_I2C_Clear>
			check_sate_machine = 2;
 80084a8:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <Routine_Machine_NotUseRTOS+0x88>)
 80084aa:	2202      	movs	r2, #2
 80084ac:	701a      	strb	r2, [r3, #0]
			break;
 80084ae:	e005      	b.n	80084bc <Routine_Machine_NotUseRTOS+0x7c>
		case 2:
			Routine01_Task_01_Routine_System();
 80084b0:	f7ff ff4a 	bl	8008348 <Routine01_Task_01_Routine_System>
		case 3:
			//Routine02_Task_02_Status_Machine();
			check_sate_machine = 2;
 80084b4:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <Routine_Machine_NotUseRTOS+0x88>)
 80084b6:	2202      	movs	r2, #2
 80084b8:	701a      	strb	r2, [r3, #0]
		default:
			break;
 80084ba:	bf00      	nop
	}
    return 0;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000879 	.word	0x20000879
 80084cc:	2000086c 	.word	0x2000086c
 80084d0:	080112dc 	.word	0x080112dc
 80084d4:	0002bf20 	.word	0x0002bf20
 80084d8:	2000069c 	.word	0x2000069c

080084dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f103 0208 	add.w	r2, r3, #8
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f103 0208 	add.w	r2, r3, #8
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f103 0208 	add.w	r2, r3, #8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr

0800851a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr

08008532 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008532:	b480      	push	{r7}
 8008534:	b085      	sub	sp, #20
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	601a      	str	r2, [r3, #0]
}
 800856e:	bf00      	nop
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr

08008578 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800858e:	d103      	bne.n	8008598 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	60fb      	str	r3, [r7, #12]
 8008596:	e00c      	b.n	80085b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3308      	adds	r3, #8
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	e002      	b.n	80085a6 <vListInsert+0x2e>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d2f6      	bcs.n	80085a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	601a      	str	r2, [r3, #0]
}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr

080085e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6892      	ldr	r2, [r2, #8]
 80085fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	6852      	ldr	r2, [r2, #4]
 8008608:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	429a      	cmp	r2, r3
 8008612:	d103      	bne.n	800861c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	1e5a      	subs	r2, r3, #1
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
	...

0800863c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008666:	f001 fd31 	bl	800a0cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008672:	68f9      	ldr	r1, [r7, #12]
 8008674:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008676:	fb01 f303 	mul.w	r3, r1, r3
 800867a:	441a      	add	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	3b01      	subs	r3, #1
 8008698:	68f9      	ldr	r1, [r7, #12]
 800869a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800869c:	fb01 f303 	mul.w	r3, r1, r3
 80086a0:	441a      	add	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	22ff      	movs	r2, #255	; 0xff
 80086aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	22ff      	movs	r2, #255	; 0xff
 80086b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d114      	bne.n	80086e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01a      	beq.n	80086fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3310      	adds	r3, #16
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 f805 	bl	80096d8 <xTaskRemoveFromEventList>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d012      	beq.n	80086fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086d4:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <xQueueGenericReset+0xcc>)
 80086d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	e009      	b.n	80086fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3310      	adds	r3, #16
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff fef6 	bl	80084dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3324      	adds	r3, #36	; 0x24
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fef1 	bl	80084dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086fa:	f001 fd17 	bl	800a12c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086fe:	2301      	movs	r3, #1
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af02      	add	r7, sp, #8
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	4613      	mov	r3, r2
 8008718:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	613b      	str	r3, [r7, #16]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800873c:	2300      	movs	r3, #0
 800873e:	61fb      	str	r3, [r7, #28]
 8008740:	e004      	b.n	800874c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	fb02 f303 	mul.w	r3, r2, r3
 800874a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	3348      	adds	r3, #72	; 0x48
 8008750:	4618      	mov	r0, r3
 8008752:	f001 fd7d 	bl	800a250 <pvPortMalloc>
 8008756:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00f      	beq.n	800877e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	3348      	adds	r3, #72	; 0x48
 8008762:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800876c:	79fa      	ldrb	r2, [r7, #7]
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	4613      	mov	r3, r2
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	68b9      	ldr	r1, [r7, #8]
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f805 	bl	8008788 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800877e:	69bb      	ldr	r3, [r7, #24]
	}
 8008780:	4618      	mov	r0, r3
 8008782:	3720      	adds	r7, #32
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d103      	bne.n	80087a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	e002      	b.n	80087aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087b6:	2101      	movs	r1, #1
 80087b8:	69b8      	ldr	r0, [r7, #24]
 80087ba:	f7ff ff3f 	bl	800863c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b086      	sub	sp, #24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10a      	bne.n	80087ec <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	613b      	str	r3, [r7, #16]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d90a      	bls.n	800880a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	60fb      	str	r3, [r7, #12]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800880a:	2202      	movs	r2, #2
 800880c:	2100      	movs	r1, #0
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff ff7c 	bl	800870c <xQueueGenericCreate>
 8008814:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008822:	697b      	ldr	r3, [r7, #20]
	}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08e      	sub	sp, #56	; 0x38
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800883a:	2300      	movs	r3, #0
 800883c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <xQueueGenericSend+0x32>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <xQueueGenericSend+0x40>
 8008864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <xQueueGenericSend+0x44>
 800886c:	2301      	movs	r3, #1
 800886e:	e000      	b.n	8008872 <xQueueGenericSend+0x46>
 8008870:	2300      	movs	r3, #0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10a      	bne.n	800888c <xQueueGenericSend+0x60>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d103      	bne.n	800889a <xQueueGenericSend+0x6e>
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <xQueueGenericSend+0x72>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <xQueueGenericSend+0x74>
 800889e:	2300      	movs	r3, #0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <xQueueGenericSend+0x8e>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	623b      	str	r3, [r7, #32]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088ba:	f001 f8d1 	bl	8009a60 <xTaskGetSchedulerState>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d102      	bne.n	80088ca <xQueueGenericSend+0x9e>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <xQueueGenericSend+0xa2>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e000      	b.n	80088d0 <xQueueGenericSend+0xa4>
 80088ce:	2300      	movs	r3, #0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <xQueueGenericSend+0xbe>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	61fb      	str	r3, [r7, #28]
}
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088ea:	f001 fbef 	bl	800a0cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d302      	bcc.n	8008900 <xQueueGenericSend+0xd4>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d129      	bne.n	8008954 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008906:	f000 f9b2 	bl	8008c6e <prvCopyDataToQueue>
 800890a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	2b00      	cmp	r3, #0
 8008912:	d010      	beq.n	8008936 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	3324      	adds	r3, #36	; 0x24
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fedd 	bl	80096d8 <xTaskRemoveFromEventList>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d013      	beq.n	800894c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008924:	4b3f      	ldr	r3, [pc, #252]	; (8008a24 <xQueueGenericSend+0x1f8>)
 8008926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	e00a      	b.n	800894c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800893c:	4b39      	ldr	r3, [pc, #228]	; (8008a24 <xQueueGenericSend+0x1f8>)
 800893e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800894c:	f001 fbee 	bl	800a12c <vPortExitCritical>
				return pdPASS;
 8008950:	2301      	movs	r3, #1
 8008952:	e063      	b.n	8008a1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d103      	bne.n	8008962 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800895a:	f001 fbe7 	bl	800a12c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800895e:	2300      	movs	r3, #0
 8008960:	e05c      	b.n	8008a1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008968:	f107 0314 	add.w	r3, r7, #20
 800896c:	4618      	mov	r0, r3
 800896e:	f000 ff15 	bl	800979c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008972:	2301      	movs	r3, #1
 8008974:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008976:	f001 fbd9 	bl	800a12c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800897a:	f000 fca1 	bl	80092c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800897e:	f001 fba5 	bl	800a0cc <vPortEnterCritical>
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008988:	b25b      	sxtb	r3, r3
 800898a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800898e:	d103      	bne.n	8008998 <xQueueGenericSend+0x16c>
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	2200      	movs	r2, #0
 8008994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800899e:	b25b      	sxtb	r3, r3
 80089a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089a4:	d103      	bne.n	80089ae <xQueueGenericSend+0x182>
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089ae:	f001 fbbd 	bl	800a12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089b2:	1d3a      	adds	r2, r7, #4
 80089b4:	f107 0314 	add.w	r3, r7, #20
 80089b8:	4611      	mov	r1, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 ff04 	bl	80097c8 <xTaskCheckForTimeOut>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d124      	bne.n	8008a10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089c8:	f000 fa23 	bl	8008e12 <prvIsQueueFull>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d018      	beq.n	8008a04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	3310      	adds	r3, #16
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fe58 	bl	8009690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e2:	f000 f9ae 	bl	8008d42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089e6:	f000 fc79 	bl	80092dc <xTaskResumeAll>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f47f af7c 	bne.w	80088ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80089f2:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <xQueueGenericSend+0x1f8>)
 80089f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	e772      	b.n	80088ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a06:	f000 f99c 	bl	8008d42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a0a:	f000 fc67 	bl	80092dc <xTaskResumeAll>
 8008a0e:	e76c      	b.n	80088ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a12:	f000 f996 	bl	8008d42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a16:	f000 fc61 	bl	80092dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a1a:	2300      	movs	r3, #0
		}
	}
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3738      	adds	r7, #56	; 0x38
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	e000ed04 	.word	0xe000ed04

08008a28 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08e      	sub	sp, #56	; 0x38
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	623b      	str	r3, [r7, #32]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	61fb      	str	r3, [r7, #28]
}
 8008a74:	bf00      	nop
 8008a76:	e7fe      	b.n	8008a76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a78:	f000 fff2 	bl	8009a60 <xTaskGetSchedulerState>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d102      	bne.n	8008a88 <xQueueSemaphoreTake+0x60>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <xQueueSemaphoreTake+0x64>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <xQueueSemaphoreTake+0x66>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	61bb      	str	r3, [r7, #24]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aa8:	f001 fb10 	bl	800a0cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d024      	beq.n	8008b02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	1e5a      	subs	r2, r3, #1
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008ac8:	f001 f994 	bl	8009df4 <pvTaskIncrementMutexHeldCount>
 8008acc:	4602      	mov	r2, r0
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00f      	beq.n	8008afa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	3310      	adds	r3, #16
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fdfa 	bl	80096d8 <xTaskRemoveFromEventList>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d007      	beq.n	8008afa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008aea:	4b54      	ldr	r3, [pc, #336]	; (8008c3c <xQueueSemaphoreTake+0x214>)
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008afa:	f001 fb17 	bl	800a12c <vPortExitCritical>
				return pdPASS;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e097      	b.n	8008c32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d111      	bne.n	8008b2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	617b      	str	r3, [r7, #20]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b24:	f001 fb02 	bl	800a12c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e082      	b.n	8008c32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b32:	f107 030c 	add.w	r3, r7, #12
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fe30 	bl	800979c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b40:	f001 faf4 	bl	800a12c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b44:	f000 fbbc 	bl	80092c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b48:	f001 fac0 	bl	800a0cc <vPortEnterCritical>
 8008b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b58:	d103      	bne.n	8008b62 <xQueueSemaphoreTake+0x13a>
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b68:	b25b      	sxtb	r3, r3
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b6e:	d103      	bne.n	8008b78 <xQueueSemaphoreTake+0x150>
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b78:	f001 fad8 	bl	800a12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b7c:	463a      	mov	r2, r7
 8008b7e:	f107 030c 	add.w	r3, r7, #12
 8008b82:	4611      	mov	r1, r2
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fe1f 	bl	80097c8 <xTaskCheckForTimeOut>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d132      	bne.n	8008bf6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b92:	f000 f928 	bl	8008de6 <prvIsQueueEmpty>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d026      	beq.n	8008bea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d109      	bne.n	8008bb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008ba4:	f001 fa92 	bl	800a0cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 ff75 	bl	8009a9c <xTaskPriorityInherit>
 8008bb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008bb4:	f001 faba 	bl	800a12c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	3324      	adds	r3, #36	; 0x24
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fd65 	bl	8009690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bc8:	f000 f8bb 	bl	8008d42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bcc:	f000 fb86 	bl	80092dc <xTaskResumeAll>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f47f af68 	bne.w	8008aa8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008bd8:	4b18      	ldr	r3, [pc, #96]	; (8008c3c <xQueueSemaphoreTake+0x214>)
 8008bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	e75e      	b.n	8008aa8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bec:	f000 f8a9 	bl	8008d42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bf0:	f000 fb74 	bl	80092dc <xTaskResumeAll>
 8008bf4:	e758      	b.n	8008aa8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bf8:	f000 f8a3 	bl	8008d42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bfc:	f000 fb6e 	bl	80092dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c02:	f000 f8f0 	bl	8008de6 <prvIsQueueEmpty>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f43f af4d 	beq.w	8008aa8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00d      	beq.n	8008c30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008c14:	f001 fa5a 	bl	800a0cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c1a:	f000 f811 	bl	8008c40 <prvGetDisinheritPriorityAfterTimeout>
 8008c1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c26:	4618      	mov	r0, r3
 8008c28:	f001 f844 	bl	8009cb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c2c:	f001 fa7e 	bl	800a12c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3738      	adds	r7, #56	; 0x38
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	e000ed04 	.word	0xe000ed04

08008c40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d006      	beq.n	8008c5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f1c3 0307 	rsb	r3, r3, #7
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	e001      	b.n	8008c62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008c62:	68fb      	ldr	r3, [r7, #12]
	}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bc80      	pop	{r7}
 8008c6c:	4770      	bx	lr

08008c6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10d      	bne.n	8008ca8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d14d      	bne.n	8008d30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 ff85 	bl	8009ba8 <xTaskPriorityDisinherit>
 8008c9e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	605a      	str	r2, [r3, #4]
 8008ca6:	e043      	b.n	8008d30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d119      	bne.n	8008ce2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6898      	ldr	r0, [r3, #8]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	68b9      	ldr	r1, [r7, #8]
 8008cba:	f005 fbee 	bl	800e49a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	689a      	ldr	r2, [r3, #8]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	441a      	add	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d32b      	bcc.n	8008d30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	e026      	b.n	8008d30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	68d8      	ldr	r0, [r3, #12]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	461a      	mov	r2, r3
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	f005 fbd4 	bl	800e49a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	425b      	negs	r3, r3
 8008cfc:	441a      	add	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d207      	bcs.n	8008d1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	425b      	negs	r3, r3
 8008d18:	441a      	add	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d105      	bne.n	8008d30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d38:	697b      	ldr	r3, [r7, #20]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d4a:	f001 f9bf 	bl	800a0cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d54:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d56:	e011      	b.n	8008d7c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d012      	beq.n	8008d86 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fcb7 	bl	80096d8 <xTaskRemoveFromEventList>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d70:	f000 fd8c 	bl	800988c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dce9      	bgt.n	8008d58 <prvUnlockQueue+0x16>
 8008d84:	e000      	b.n	8008d88 <prvUnlockQueue+0x46>
					break;
 8008d86:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	22ff      	movs	r2, #255	; 0xff
 8008d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d90:	f001 f9cc 	bl	800a12c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d94:	f001 f99a 	bl	800a0cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d9e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008da0:	e011      	b.n	8008dc6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d012      	beq.n	8008dd0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	3310      	adds	r3, #16
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fc92 	bl	80096d8 <xTaskRemoveFromEventList>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008dba:	f000 fd67 	bl	800988c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dce9      	bgt.n	8008da2 <prvUnlockQueue+0x60>
 8008dce:	e000      	b.n	8008dd2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dd0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	22ff      	movs	r2, #255	; 0xff
 8008dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008dda:	f001 f9a7 	bl	800a12c <vPortExitCritical>
}
 8008dde:	bf00      	nop
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dee:	f001 f96d 	bl	800a0cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e001      	b.n	8008e04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e04:	f001 f992 	bl	800a12c <vPortExitCritical>

	return xReturn;
 8008e08:	68fb      	ldr	r3, [r7, #12]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e1a:	f001 f957 	bl	800a0cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d102      	bne.n	8008e30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	e001      	b.n	8008e34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e34:	f001 f97a 	bl	800a12c <vPortExitCritical>

	return xReturn;
 8008e38:	68fb      	ldr	r3, [r7, #12]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b08e      	sub	sp, #56	; 0x38
 8008e46:	af04      	add	r7, sp, #16
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	623b      	str	r3, [r7, #32]
}
 8008e68:	bf00      	nop
 8008e6a:	e7fe      	b.n	8008e6a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <xTaskCreateStatic+0x46>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	61fb      	str	r3, [r7, #28]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e88:	23c4      	movs	r3, #196	; 0xc4
 8008e8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2bc4      	cmp	r3, #196	; 0xc4
 8008e90:	d00a      	beq.n	8008ea8 <xTaskCreateStatic+0x66>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	61bb      	str	r3, [r7, #24]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01e      	beq.n	8008eec <xTaskCreateStatic+0xaa>
 8008eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01b      	beq.n	8008eec <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ebc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9303      	str	r3, [sp, #12]
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	9302      	str	r3, [sp, #8]
 8008ece:	f107 0314 	add.w	r3, r7, #20
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 f850 	bl	8008f84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ee6:	f000 f8e3 	bl	80090b0 <prvAddNewTaskToReadyList>
 8008eea:	e001      	b.n	8008ef0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ef0:	697b      	ldr	r3, [r7, #20]
	}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3728      	adds	r7, #40	; 0x28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b08c      	sub	sp, #48	; 0x30
 8008efe:	af04      	add	r7, sp, #16
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	603b      	str	r3, [r7, #0]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 f99e 	bl	800a250 <pvPortMalloc>
 8008f14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00e      	beq.n	8008f3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008f1c:	20c4      	movs	r0, #196	; 0xc4
 8008f1e:	f001 f997 	bl	800a250 <pvPortMalloc>
 8008f22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8008f30:	e005      	b.n	8008f3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f32:	6978      	ldr	r0, [r7, #20]
 8008f34:	f001 fa56 	bl	800a3e4 <vPortFree>
 8008f38:	e001      	b.n	8008f3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d017      	beq.n	8008f74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f4c:	88fa      	ldrh	r2, [r7, #6]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9303      	str	r3, [sp, #12]
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68b9      	ldr	r1, [r7, #8]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f80e 	bl	8008f84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f68:	69f8      	ldr	r0, [r7, #28]
 8008f6a:	f000 f8a1 	bl	80090b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	61bb      	str	r3, [r7, #24]
 8008f72:	e002      	b.n	8008f7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f7a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3720      	adds	r7, #32
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b088      	sub	sp, #32
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	f023 0307 	bic.w	r3, r3, #7
 8008faa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <prvInitialiseNewTask+0x48>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	617b      	str	r3, [r7, #20]
}
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	e012      	b.n	8008ff8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	7819      	ldrb	r1, [r3, #0]
 8008fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	4413      	add	r3, r2
 8008fe0:	3334      	adds	r3, #52	; 0x34
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d006      	beq.n	8009000 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	2b1d      	cmp	r3, #29
 8008ffc:	d9e9      	bls.n	8008fd2 <prvInitialiseNewTask+0x4e>
 8008ffe:	e000      	b.n	8009002 <prvInitialiseNewTask+0x7e>
		{
			break;
 8009000:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	2b06      	cmp	r3, #6
 800900e:	d901      	bls.n	8009014 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009010:	2306      	movs	r3, #6
 8009012:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009018:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800901e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	2200      	movs	r2, #0
 8009024:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	3304      	adds	r3, #4
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff fa75 	bl	800851a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	3318      	adds	r3, #24
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff fa70 	bl	800851a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	f1c3 0207 	rsb	r2, r3, #7
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800904e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	2200      	movs	r2, #0
 800905c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	335c      	adds	r3, #92	; 0x5c
 8009064:	2260      	movs	r2, #96	; 0x60
 8009066:	2100      	movs	r1, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f005 fa24 	bl	800e4b6 <memset>
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	4a0c      	ldr	r2, [pc, #48]	; (80090a4 <prvInitialiseNewTask+0x120>)
 8009072:	661a      	str	r2, [r3, #96]	; 0x60
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	4a0c      	ldr	r2, [pc, #48]	; (80090a8 <prvInitialiseNewTask+0x124>)
 8009078:	665a      	str	r2, [r3, #100]	; 0x64
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	4a0b      	ldr	r2, [pc, #44]	; (80090ac <prvInitialiseNewTask+0x128>)
 800907e:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	68f9      	ldr	r1, [r7, #12]
 8009084:	69b8      	ldr	r0, [r7, #24]
 8009086:	f000 ff2f 	bl	8009ee8 <pxPortInitialiseStack>
 800908a:	4602      	mov	r2, r0
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d002      	beq.n	800909c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800909c:	bf00      	nop
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	08011460 	.word	0x08011460
 80090a8:	08011480 	.word	0x08011480
 80090ac:	08011440 	.word	0x08011440

080090b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090b8:	f001 f808 	bl	800a0cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090bc:	4b2a      	ldr	r3, [pc, #168]	; (8009168 <prvAddNewTaskToReadyList+0xb8>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	4a29      	ldr	r2, [pc, #164]	; (8009168 <prvAddNewTaskToReadyList+0xb8>)
 80090c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090c6:	4b29      	ldr	r3, [pc, #164]	; (800916c <prvAddNewTaskToReadyList+0xbc>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090ce:	4a27      	ldr	r2, [pc, #156]	; (800916c <prvAddNewTaskToReadyList+0xbc>)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090d4:	4b24      	ldr	r3, [pc, #144]	; (8009168 <prvAddNewTaskToReadyList+0xb8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d110      	bne.n	80090fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090dc:	f000 fbfa 	bl	80098d4 <prvInitialiseTaskLists>
 80090e0:	e00d      	b.n	80090fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090e2:	4b23      	ldr	r3, [pc, #140]	; (8009170 <prvAddNewTaskToReadyList+0xc0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d109      	bne.n	80090fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090ea:	4b20      	ldr	r3, [pc, #128]	; (800916c <prvAddNewTaskToReadyList+0xbc>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d802      	bhi.n	80090fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090f8:	4a1c      	ldr	r2, [pc, #112]	; (800916c <prvAddNewTaskToReadyList+0xbc>)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090fe:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <prvAddNewTaskToReadyList+0xc4>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3301      	adds	r3, #1
 8009104:	4a1b      	ldr	r2, [pc, #108]	; (8009174 <prvAddNewTaskToReadyList+0xc4>)
 8009106:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	2201      	movs	r2, #1
 800910e:	409a      	lsls	r2, r3
 8009110:	4b19      	ldr	r3, [pc, #100]	; (8009178 <prvAddNewTaskToReadyList+0xc8>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4313      	orrs	r3, r2
 8009116:	4a18      	ldr	r2, [pc, #96]	; (8009178 <prvAddNewTaskToReadyList+0xc8>)
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4a15      	ldr	r2, [pc, #84]	; (800917c <prvAddNewTaskToReadyList+0xcc>)
 8009128:	441a      	add	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3304      	adds	r3, #4
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f7ff f9fe 	bl	8008532 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009136:	f000 fff9 	bl	800a12c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800913a:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <prvAddNewTaskToReadyList+0xc0>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00e      	beq.n	8009160 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <prvAddNewTaskToReadyList+0xbc>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	429a      	cmp	r2, r3
 800914e:	d207      	bcs.n	8009160 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009150:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <prvAddNewTaskToReadyList+0xd0>)
 8009152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	2000097c 	.word	0x2000097c
 800916c:	2000087c 	.word	0x2000087c
 8009170:	20000988 	.word	0x20000988
 8009174:	20000998 	.word	0x20000998
 8009178:	20000984 	.word	0x20000984
 800917c:	20000880 	.word	0x20000880
 8009180:	e000ed04 	.word	0xe000ed04

08009184 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d017      	beq.n	80091c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009196:	4b13      	ldr	r3, [pc, #76]	; (80091e4 <vTaskDelay+0x60>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <vTaskDelay+0x30>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60bb      	str	r3, [r7, #8]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80091b4:	f000 f884 	bl	80092c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091b8:	2100      	movs	r1, #0
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fe2e 	bl	8009e1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091c0:	f000 f88c 	bl	80092dc <xTaskResumeAll>
 80091c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d107      	bne.n	80091dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80091cc:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <vTaskDelay+0x64>)
 80091ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091dc:	bf00      	nop
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	200009a4 	.word	0x200009a4
 80091e8:	e000ed04 	.word	0xe000ed04

080091ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	; 0x28
 80091f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091fa:	463a      	mov	r2, r7
 80091fc:	1d39      	adds	r1, r7, #4
 80091fe:	f107 0308 	add.w	r3, r7, #8
 8009202:	4618      	mov	r0, r3
 8009204:	f7f8 fa46 	bl	8001694 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	9202      	str	r2, [sp, #8]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	2300      	movs	r3, #0
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	2300      	movs	r3, #0
 8009218:	460a      	mov	r2, r1
 800921a:	4921      	ldr	r1, [pc, #132]	; (80092a0 <vTaskStartScheduler+0xb4>)
 800921c:	4821      	ldr	r0, [pc, #132]	; (80092a4 <vTaskStartScheduler+0xb8>)
 800921e:	f7ff fe10 	bl	8008e42 <xTaskCreateStatic>
 8009222:	4603      	mov	r3, r0
 8009224:	4a20      	ldr	r2, [pc, #128]	; (80092a8 <vTaskStartScheduler+0xbc>)
 8009226:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009228:	4b1f      	ldr	r3, [pc, #124]	; (80092a8 <vTaskStartScheduler+0xbc>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009230:	2301      	movs	r3, #1
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	e001      	b.n	800923a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009236:	2300      	movs	r3, #0
 8009238:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d11b      	bne.n	8009278 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	613b      	str	r3, [r7, #16]
}
 8009252:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009254:	4b15      	ldr	r3, [pc, #84]	; (80092ac <vTaskStartScheduler+0xc0>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	335c      	adds	r3, #92	; 0x5c
 800925a:	4a15      	ldr	r2, [pc, #84]	; (80092b0 <vTaskStartScheduler+0xc4>)
 800925c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800925e:	4b15      	ldr	r3, [pc, #84]	; (80092b4 <vTaskStartScheduler+0xc8>)
 8009260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009264:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <vTaskStartScheduler+0xcc>)
 8009268:	2201      	movs	r2, #1
 800926a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800926c:	4b13      	ldr	r3, [pc, #76]	; (80092bc <vTaskStartScheduler+0xd0>)
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009272:	f000 feb9 	bl	8009fe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009276:	e00e      	b.n	8009296 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800927e:	d10a      	bne.n	8009296 <vTaskStartScheduler+0xaa>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	60fb      	str	r3, [r7, #12]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <vTaskStartScheduler+0xa8>
}
 8009296:	bf00      	nop
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	080112ec 	.word	0x080112ec
 80092a4:	080098a5 	.word	0x080098a5
 80092a8:	200009a0 	.word	0x200009a0
 80092ac:	2000087c 	.word	0x2000087c
 80092b0:	200000d8 	.word	0x200000d8
 80092b4:	2000099c 	.word	0x2000099c
 80092b8:	20000988 	.word	0x20000988
 80092bc:	20000980 	.word	0x20000980

080092c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092c0:	b480      	push	{r7}
 80092c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80092c4:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <vTaskSuspendAll+0x18>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3301      	adds	r3, #1
 80092ca:	4a03      	ldr	r2, [pc, #12]	; (80092d8 <vTaskSuspendAll+0x18>)
 80092cc:	6013      	str	r3, [r2, #0]
}
 80092ce:	bf00      	nop
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bc80      	pop	{r7}
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	200009a4 	.word	0x200009a4

080092dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092ea:	4b41      	ldr	r3, [pc, #260]	; (80093f0 <xTaskResumeAll+0x114>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10a      	bne.n	8009308 <xTaskResumeAll+0x2c>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	603b      	str	r3, [r7, #0]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009308:	f000 fee0 	bl	800a0cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800930c:	4b38      	ldr	r3, [pc, #224]	; (80093f0 <xTaskResumeAll+0x114>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3b01      	subs	r3, #1
 8009312:	4a37      	ldr	r2, [pc, #220]	; (80093f0 <xTaskResumeAll+0x114>)
 8009314:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009316:	4b36      	ldr	r3, [pc, #216]	; (80093f0 <xTaskResumeAll+0x114>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d161      	bne.n	80093e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800931e:	4b35      	ldr	r3, [pc, #212]	; (80093f4 <xTaskResumeAll+0x118>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d05d      	beq.n	80093e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009326:	e02e      	b.n	8009386 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009328:	4b33      	ldr	r3, [pc, #204]	; (80093f8 <xTaskResumeAll+0x11c>)
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3318      	adds	r3, #24
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff f957 	bl	80085e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3304      	adds	r3, #4
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff f952 	bl	80085e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	2201      	movs	r2, #1
 800934a:	409a      	lsls	r2, r3
 800934c:	4b2b      	ldr	r3, [pc, #172]	; (80093fc <xTaskResumeAll+0x120>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4313      	orrs	r3, r2
 8009352:	4a2a      	ldr	r2, [pc, #168]	; (80093fc <xTaskResumeAll+0x120>)
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4a27      	ldr	r2, [pc, #156]	; (8009400 <xTaskResumeAll+0x124>)
 8009364:	441a      	add	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3304      	adds	r3, #4
 800936a:	4619      	mov	r1, r3
 800936c:	4610      	mov	r0, r2
 800936e:	f7ff f8e0 	bl	8008532 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009376:	4b23      	ldr	r3, [pc, #140]	; (8009404 <xTaskResumeAll+0x128>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937c:	429a      	cmp	r2, r3
 800937e:	d302      	bcc.n	8009386 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009380:	4b21      	ldr	r3, [pc, #132]	; (8009408 <xTaskResumeAll+0x12c>)
 8009382:	2201      	movs	r2, #1
 8009384:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009386:	4b1c      	ldr	r3, [pc, #112]	; (80093f8 <xTaskResumeAll+0x11c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1cc      	bne.n	8009328 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009394:	f000 fb40 	bl	8009a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009398:	4b1c      	ldr	r3, [pc, #112]	; (800940c <xTaskResumeAll+0x130>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d010      	beq.n	80093c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093a4:	f000 f844 	bl	8009430 <xTaskIncrementTick>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80093ae:	4b16      	ldr	r3, [pc, #88]	; (8009408 <xTaskResumeAll+0x12c>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1f1      	bne.n	80093a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80093c0:	4b12      	ldr	r3, [pc, #72]	; (800940c <xTaskResumeAll+0x130>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <xTaskResumeAll+0x12c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d009      	beq.n	80093e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093ce:	2301      	movs	r3, #1
 80093d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093d2:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <xTaskResumeAll+0x134>)
 80093d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093e2:	f000 fea3 	bl	800a12c <vPortExitCritical>

	return xAlreadyYielded;
 80093e6:	68bb      	ldr	r3, [r7, #8]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	200009a4 	.word	0x200009a4
 80093f4:	2000097c 	.word	0x2000097c
 80093f8:	2000093c 	.word	0x2000093c
 80093fc:	20000984 	.word	0x20000984
 8009400:	20000880 	.word	0x20000880
 8009404:	2000087c 	.word	0x2000087c
 8009408:	20000990 	.word	0x20000990
 800940c:	2000098c 	.word	0x2000098c
 8009410:	e000ed04 	.word	0xe000ed04

08009414 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800941a:	4b04      	ldr	r3, [pc, #16]	; (800942c <xTaskGetTickCount+0x18>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009420:	687b      	ldr	r3, [r7, #4]
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	bc80      	pop	{r7}
 800942a:	4770      	bx	lr
 800942c:	20000980 	.word	0x20000980

08009430 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800943a:	4b51      	ldr	r3, [pc, #324]	; (8009580 <xTaskIncrementTick+0x150>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	f040 808d 	bne.w	800955e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009444:	4b4f      	ldr	r3, [pc, #316]	; (8009584 <xTaskIncrementTick+0x154>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800944c:	4a4d      	ldr	r2, [pc, #308]	; (8009584 <xTaskIncrementTick+0x154>)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d120      	bne.n	800949a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009458:	4b4b      	ldr	r3, [pc, #300]	; (8009588 <xTaskIncrementTick+0x158>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <xTaskIncrementTick+0x48>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	603b      	str	r3, [r7, #0]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <xTaskIncrementTick+0x46>
 8009478:	4b43      	ldr	r3, [pc, #268]	; (8009588 <xTaskIncrementTick+0x158>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	4b43      	ldr	r3, [pc, #268]	; (800958c <xTaskIncrementTick+0x15c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a41      	ldr	r2, [pc, #260]	; (8009588 <xTaskIncrementTick+0x158>)
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	4a41      	ldr	r2, [pc, #260]	; (800958c <xTaskIncrementTick+0x15c>)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	4b40      	ldr	r3, [pc, #256]	; (8009590 <xTaskIncrementTick+0x160>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3301      	adds	r3, #1
 8009492:	4a3f      	ldr	r2, [pc, #252]	; (8009590 <xTaskIncrementTick+0x160>)
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	f000 fabf 	bl	8009a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800949a:	4b3e      	ldr	r3, [pc, #248]	; (8009594 <xTaskIncrementTick+0x164>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d34d      	bcc.n	8009540 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094a4:	4b38      	ldr	r3, [pc, #224]	; (8009588 <xTaskIncrementTick+0x158>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <xTaskIncrementTick+0x82>
 80094ae:	2301      	movs	r3, #1
 80094b0:	e000      	b.n	80094b4 <xTaskIncrementTick+0x84>
 80094b2:	2300      	movs	r3, #0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b8:	4b36      	ldr	r3, [pc, #216]	; (8009594 <xTaskIncrementTick+0x164>)
 80094ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094be:	601a      	str	r2, [r3, #0]
					break;
 80094c0:	e03e      	b.n	8009540 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80094c2:	4b31      	ldr	r3, [pc, #196]	; (8009588 <xTaskIncrementTick+0x158>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d203      	bcs.n	80094e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094da:	4a2e      	ldr	r2, [pc, #184]	; (8009594 <xTaskIncrementTick+0x164>)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6013      	str	r3, [r2, #0]
						break;
 80094e0:	e02e      	b.n	8009540 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	3304      	adds	r3, #4
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff f87e 	bl	80085e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d004      	beq.n	80094fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	3318      	adds	r3, #24
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7ff f875 	bl	80085e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009502:	2201      	movs	r2, #1
 8009504:	409a      	lsls	r2, r3
 8009506:	4b24      	ldr	r3, [pc, #144]	; (8009598 <xTaskIncrementTick+0x168>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4313      	orrs	r3, r2
 800950c:	4a22      	ldr	r2, [pc, #136]	; (8009598 <xTaskIncrementTick+0x168>)
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4a1f      	ldr	r2, [pc, #124]	; (800959c <xTaskIncrementTick+0x16c>)
 800951e:	441a      	add	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	3304      	adds	r3, #4
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7ff f803 	bl	8008532 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009530:	4b1b      	ldr	r3, [pc, #108]	; (80095a0 <xTaskIncrementTick+0x170>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009536:	429a      	cmp	r2, r3
 8009538:	d3b4      	bcc.n	80094a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800953a:	2301      	movs	r3, #1
 800953c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800953e:	e7b1      	b.n	80094a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009540:	4b17      	ldr	r3, [pc, #92]	; (80095a0 <xTaskIncrementTick+0x170>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009546:	4915      	ldr	r1, [pc, #84]	; (800959c <xTaskIncrementTick+0x16c>)
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d907      	bls.n	8009568 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009558:	2301      	movs	r3, #1
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	e004      	b.n	8009568 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800955e:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <xTaskIncrementTick+0x174>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	4a0f      	ldr	r2, [pc, #60]	; (80095a4 <xTaskIncrementTick+0x174>)
 8009566:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009568:	4b0f      	ldr	r3, [pc, #60]	; (80095a8 <xTaskIncrementTick+0x178>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009570:	2301      	movs	r3, #1
 8009572:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009574:	697b      	ldr	r3, [r7, #20]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	200009a4 	.word	0x200009a4
 8009584:	20000980 	.word	0x20000980
 8009588:	20000934 	.word	0x20000934
 800958c:	20000938 	.word	0x20000938
 8009590:	20000994 	.word	0x20000994
 8009594:	2000099c 	.word	0x2000099c
 8009598:	20000984 	.word	0x20000984
 800959c:	20000880 	.word	0x20000880
 80095a0:	2000087c 	.word	0x2000087c
 80095a4:	2000098c 	.word	0x2000098c
 80095a8:	20000990 	.word	0x20000990

080095ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095b2:	4b31      	ldr	r3, [pc, #196]	; (8009678 <vTaskSwitchContext+0xcc>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095ba:	4b30      	ldr	r3, [pc, #192]	; (800967c <vTaskSwitchContext+0xd0>)
 80095bc:	2201      	movs	r2, #1
 80095be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095c0:	e055      	b.n	800966e <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 80095c2:	4b2e      	ldr	r3, [pc, #184]	; (800967c <vTaskSwitchContext+0xd0>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80095c8:	4b2d      	ldr	r3, [pc, #180]	; (8009680 <vTaskSwitchContext+0xd4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	4b2c      	ldr	r3, [pc, #176]	; (8009680 <vTaskSwitchContext+0xd4>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d808      	bhi.n	80095ea <vTaskSwitchContext+0x3e>
 80095d8:	4b29      	ldr	r3, [pc, #164]	; (8009680 <vTaskSwitchContext+0xd4>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	4b28      	ldr	r3, [pc, #160]	; (8009680 <vTaskSwitchContext+0xd4>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3334      	adds	r3, #52	; 0x34
 80095e2:	4619      	mov	r1, r3
 80095e4:	4610      	mov	r0, r2
 80095e6:	f7fe fdbd 	bl	8008164 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80095ea:	4b26      	ldr	r3, [pc, #152]	; (8009684 <vTaskSwitchContext+0xd8>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	fab3 f383 	clz	r3, r3
 80095f6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	f1c3 031f 	rsb	r3, r3, #31
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	4921      	ldr	r1, [pc, #132]	; (8009688 <vTaskSwitchContext+0xdc>)
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <vTaskSwitchContext+0x7e>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	607b      	str	r3, [r7, #4]
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <vTaskSwitchContext+0x7c>
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4a14      	ldr	r2, [pc, #80]	; (8009688 <vTaskSwitchContext+0xdc>)
 8009636:	4413      	add	r3, r2
 8009638:	613b      	str	r3, [r7, #16]
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	605a      	str	r2, [r3, #4]
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	3308      	adds	r3, #8
 800964c:	429a      	cmp	r2, r3
 800964e:	d104      	bne.n	800965a <vTaskSwitchContext+0xae>
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	605a      	str	r2, [r3, #4]
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	4a07      	ldr	r2, [pc, #28]	; (8009680 <vTaskSwitchContext+0xd4>)
 8009662:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009664:	4b06      	ldr	r3, [pc, #24]	; (8009680 <vTaskSwitchContext+0xd4>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	335c      	adds	r3, #92	; 0x5c
 800966a:	4a08      	ldr	r2, [pc, #32]	; (800968c <vTaskSwitchContext+0xe0>)
 800966c:	6013      	str	r3, [r2, #0]
}
 800966e:	bf00      	nop
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	200009a4 	.word	0x200009a4
 800967c:	20000990 	.word	0x20000990
 8009680:	2000087c 	.word	0x2000087c
 8009684:	20000984 	.word	0x20000984
 8009688:	20000880 	.word	0x20000880
 800968c:	200000d8 	.word	0x200000d8

08009690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	60fb      	str	r3, [r7, #12]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096b6:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <vTaskPlaceOnEventList+0x44>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3318      	adds	r3, #24
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7fe ff5a 	bl	8008578 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096c4:	2101      	movs	r1, #1
 80096c6:	6838      	ldr	r0, [r7, #0]
 80096c8:	f000 fba8 	bl	8009e1c <prvAddCurrentTaskToDelayedList>
}
 80096cc:	bf00      	nop
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	2000087c 	.word	0x2000087c

080096d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	60fb      	str	r3, [r7, #12]
}
 8009700:	bf00      	nop
 8009702:	e7fe      	b.n	8009702 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	3318      	adds	r3, #24
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe ff6d 	bl	80085e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800970e:	4b1d      	ldr	r3, [pc, #116]	; (8009784 <xTaskRemoveFromEventList+0xac>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d11c      	bne.n	8009750 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	3304      	adds	r3, #4
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe ff64 	bl	80085e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	2201      	movs	r2, #1
 8009726:	409a      	lsls	r2, r3
 8009728:	4b17      	ldr	r3, [pc, #92]	; (8009788 <xTaskRemoveFromEventList+0xb0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4313      	orrs	r3, r2
 800972e:	4a16      	ldr	r2, [pc, #88]	; (8009788 <xTaskRemoveFromEventList+0xb0>)
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009736:	4613      	mov	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4a13      	ldr	r2, [pc, #76]	; (800978c <xTaskRemoveFromEventList+0xb4>)
 8009740:	441a      	add	r2, r3
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f7fe fef2 	bl	8008532 <vListInsertEnd>
 800974e:	e005      	b.n	800975c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	3318      	adds	r3, #24
 8009754:	4619      	mov	r1, r3
 8009756:	480e      	ldr	r0, [pc, #56]	; (8009790 <xTaskRemoveFromEventList+0xb8>)
 8009758:	f7fe feeb 	bl	8008532 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <xTaskRemoveFromEventList+0xbc>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	429a      	cmp	r2, r3
 8009768:	d905      	bls.n	8009776 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800976a:	2301      	movs	r3, #1
 800976c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800976e:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <xTaskRemoveFromEventList+0xc0>)
 8009770:	2201      	movs	r2, #1
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	e001      	b.n	800977a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009776:	2300      	movs	r3, #0
 8009778:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800977a:	697b      	ldr	r3, [r7, #20]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200009a4 	.word	0x200009a4
 8009788:	20000984 	.word	0x20000984
 800978c:	20000880 	.word	0x20000880
 8009790:	2000093c 	.word	0x2000093c
 8009794:	2000087c 	.word	0x2000087c
 8009798:	20000990 	.word	0x20000990

0800979c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097a4:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <vTaskInternalSetTimeOutState+0x24>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097ac:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <vTaskInternalSetTimeOutState+0x28>)
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	605a      	str	r2, [r3, #4]
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bc80      	pop	{r7}
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	20000994 	.word	0x20000994
 80097c4:	20000980 	.word	0x20000980

080097c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10a      	bne.n	80097ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80097d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	613b      	str	r3, [r7, #16]
}
 80097ea:	bf00      	nop
 80097ec:	e7fe      	b.n	80097ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10a      	bne.n	800980a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	60fb      	str	r3, [r7, #12]
}
 8009806:	bf00      	nop
 8009808:	e7fe      	b.n	8009808 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800980a:	f000 fc5f 	bl	800a0cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800980e:	4b1d      	ldr	r3, [pc, #116]	; (8009884 <xTaskCheckForTimeOut+0xbc>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009826:	d102      	bne.n	800982e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009828:	2300      	movs	r3, #0
 800982a:	61fb      	str	r3, [r7, #28]
 800982c:	e023      	b.n	8009876 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	4b15      	ldr	r3, [pc, #84]	; (8009888 <xTaskCheckForTimeOut+0xc0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	429a      	cmp	r2, r3
 8009838:	d007      	beq.n	800984a <xTaskCheckForTimeOut+0x82>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	429a      	cmp	r2, r3
 8009842:	d302      	bcc.n	800984a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009844:	2301      	movs	r3, #1
 8009846:	61fb      	str	r3, [r7, #28]
 8009848:	e015      	b.n	8009876 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	429a      	cmp	r2, r3
 8009852:	d20b      	bcs.n	800986c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	1ad2      	subs	r2, r2, r3
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ff9b 	bl	800979c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009866:	2300      	movs	r3, #0
 8009868:	61fb      	str	r3, [r7, #28]
 800986a:	e004      	b.n	8009876 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009872:	2301      	movs	r3, #1
 8009874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009876:	f000 fc59 	bl	800a12c <vPortExitCritical>

	return xReturn;
 800987a:	69fb      	ldr	r3, [r7, #28]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3720      	adds	r7, #32
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000980 	.word	0x20000980
 8009888:	20000994 	.word	0x20000994

0800988c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009890:	4b03      	ldr	r3, [pc, #12]	; (80098a0 <vTaskMissedYield+0x14>)
 8009892:	2201      	movs	r2, #1
 8009894:	601a      	str	r2, [r3, #0]
}
 8009896:	bf00      	nop
 8009898:	46bd      	mov	sp, r7
 800989a:	bc80      	pop	{r7}
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20000990 	.word	0x20000990

080098a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098ac:	f000 f852 	bl	8009954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098b0:	4b06      	ldr	r3, [pc, #24]	; (80098cc <prvIdleTask+0x28>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d9f9      	bls.n	80098ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <prvIdleTask+0x2c>)
 80098ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098c8:	e7f0      	b.n	80098ac <prvIdleTask+0x8>
 80098ca:	bf00      	nop
 80098cc:	20000880 	.word	0x20000880
 80098d0:	e000ed04 	.word	0xe000ed04

080098d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098da:	2300      	movs	r3, #0
 80098dc:	607b      	str	r3, [r7, #4]
 80098de:	e00c      	b.n	80098fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4a12      	ldr	r2, [pc, #72]	; (8009934 <prvInitialiseTaskLists+0x60>)
 80098ec:	4413      	add	r3, r2
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fdf4 	bl	80084dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3301      	adds	r3, #1
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b06      	cmp	r3, #6
 80098fe:	d9ef      	bls.n	80098e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009900:	480d      	ldr	r0, [pc, #52]	; (8009938 <prvInitialiseTaskLists+0x64>)
 8009902:	f7fe fdeb 	bl	80084dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009906:	480d      	ldr	r0, [pc, #52]	; (800993c <prvInitialiseTaskLists+0x68>)
 8009908:	f7fe fde8 	bl	80084dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800990c:	480c      	ldr	r0, [pc, #48]	; (8009940 <prvInitialiseTaskLists+0x6c>)
 800990e:	f7fe fde5 	bl	80084dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009912:	480c      	ldr	r0, [pc, #48]	; (8009944 <prvInitialiseTaskLists+0x70>)
 8009914:	f7fe fde2 	bl	80084dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009918:	480b      	ldr	r0, [pc, #44]	; (8009948 <prvInitialiseTaskLists+0x74>)
 800991a:	f7fe fddf 	bl	80084dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800991e:	4b0b      	ldr	r3, [pc, #44]	; (800994c <prvInitialiseTaskLists+0x78>)
 8009920:	4a05      	ldr	r2, [pc, #20]	; (8009938 <prvInitialiseTaskLists+0x64>)
 8009922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009924:	4b0a      	ldr	r3, [pc, #40]	; (8009950 <prvInitialiseTaskLists+0x7c>)
 8009926:	4a05      	ldr	r2, [pc, #20]	; (800993c <prvInitialiseTaskLists+0x68>)
 8009928:	601a      	str	r2, [r3, #0]
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20000880 	.word	0x20000880
 8009938:	2000090c 	.word	0x2000090c
 800993c:	20000920 	.word	0x20000920
 8009940:	2000093c 	.word	0x2000093c
 8009944:	20000950 	.word	0x20000950
 8009948:	20000968 	.word	0x20000968
 800994c:	20000934 	.word	0x20000934
 8009950:	20000938 	.word	0x20000938

08009954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800995a:	e019      	b.n	8009990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800995c:	f000 fbb6 	bl	800a0cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009960:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <prvCheckTasksWaitingTermination+0x50>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	4618      	mov	r0, r3
 800996e:	f7fe fe3b 	bl	80085e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009972:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <prvCheckTasksWaitingTermination+0x54>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3b01      	subs	r3, #1
 8009978:	4a0b      	ldr	r2, [pc, #44]	; (80099a8 <prvCheckTasksWaitingTermination+0x54>)
 800997a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800997c:	4b0b      	ldr	r3, [pc, #44]	; (80099ac <prvCheckTasksWaitingTermination+0x58>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3b01      	subs	r3, #1
 8009982:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <prvCheckTasksWaitingTermination+0x58>)
 8009984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009986:	f000 fbd1 	bl	800a12c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f810 	bl	80099b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009990:	4b06      	ldr	r3, [pc, #24]	; (80099ac <prvCheckTasksWaitingTermination+0x58>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e1      	bne.n	800995c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009998:	bf00      	nop
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20000950 	.word	0x20000950
 80099a8:	2000097c 	.word	0x2000097c
 80099ac:	20000964 	.word	0x20000964

080099b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	335c      	adds	r3, #92	; 0x5c
 80099bc:	4618      	mov	r0, r3
 80099be:	f005 fa85 	bl	800eecc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d108      	bne.n	80099de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 fd07 	bl	800a3e4 <vPortFree>
				vPortFree( pxTCB );
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fd04 	bl	800a3e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099dc:	e018      	b.n	8009a10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d103      	bne.n	80099f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fcfb 	bl	800a3e4 <vPortFree>
	}
 80099ee:	e00f      	b.n	8009a10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d00a      	beq.n	8009a10 <prvDeleteTCB+0x60>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	60fb      	str	r3, [r7, #12]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <prvDeleteTCB+0x5e>
	}
 8009a10:	bf00      	nop
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a1e:	4b0e      	ldr	r3, [pc, #56]	; (8009a58 <prvResetNextTaskUnblockTime+0x40>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <prvResetNextTaskUnblockTime+0x14>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e000      	b.n	8009a2e <prvResetNextTaskUnblockTime+0x16>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d004      	beq.n	8009a3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a32:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <prvResetNextTaskUnblockTime+0x44>)
 8009a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a3a:	e008      	b.n	8009a4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009a3c:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <prvResetNextTaskUnblockTime+0x40>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	4a04      	ldr	r2, [pc, #16]	; (8009a5c <prvResetNextTaskUnblockTime+0x44>)
 8009a4c:	6013      	str	r3, [r2, #0]
}
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bc80      	pop	{r7}
 8009a56:	4770      	bx	lr
 8009a58:	20000934 	.word	0x20000934
 8009a5c:	2000099c 	.word	0x2000099c

08009a60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a66:	4b0b      	ldr	r3, [pc, #44]	; (8009a94 <xTaskGetSchedulerState+0x34>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d102      	bne.n	8009a74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	607b      	str	r3, [r7, #4]
 8009a72:	e008      	b.n	8009a86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a74:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <xTaskGetSchedulerState+0x38>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	607b      	str	r3, [r7, #4]
 8009a80:	e001      	b.n	8009a86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a82:	2300      	movs	r3, #0
 8009a84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a86:	687b      	ldr	r3, [r7, #4]
	}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20000988 	.word	0x20000988
 8009a98:	200009a4 	.word	0x200009a4

08009a9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d06e      	beq.n	8009b90 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab6:	4b39      	ldr	r3, [pc, #228]	; (8009b9c <xTaskPriorityInherit+0x100>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d25e      	bcs.n	8009b7e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	db06      	blt.n	8009ad6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ac8:	4b34      	ldr	r3, [pc, #208]	; (8009b9c <xTaskPriorityInherit+0x100>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	f1c3 0207 	rsb	r2, r3, #7
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6959      	ldr	r1, [r3, #20]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4a2e      	ldr	r2, [pc, #184]	; (8009ba0 <xTaskPriorityInherit+0x104>)
 8009ae8:	4413      	add	r3, r2
 8009aea:	4299      	cmp	r1, r3
 8009aec:	d101      	bne.n	8009af2 <xTaskPriorityInherit+0x56>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <xTaskPriorityInherit+0x58>
 8009af2:	2300      	movs	r3, #0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d03a      	beq.n	8009b6e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fd73 	bl	80085e8 <uxListRemove>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d115      	bne.n	8009b34 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0c:	4924      	ldr	r1, [pc, #144]	; (8009ba0 <xTaskPriorityInherit+0x104>)
 8009b0e:	4613      	mov	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	440b      	add	r3, r1
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10a      	bne.n	8009b34 <xTaskPriorityInherit+0x98>
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b22:	2201      	movs	r2, #1
 8009b24:	fa02 f303 	lsl.w	r3, r2, r3
 8009b28:	43da      	mvns	r2, r3
 8009b2a:	4b1e      	ldr	r3, [pc, #120]	; (8009ba4 <xTaskPriorityInherit+0x108>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4013      	ands	r3, r2
 8009b30:	4a1c      	ldr	r2, [pc, #112]	; (8009ba4 <xTaskPriorityInherit+0x108>)
 8009b32:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b34:	4b19      	ldr	r3, [pc, #100]	; (8009b9c <xTaskPriorityInherit+0x100>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	2201      	movs	r2, #1
 8009b44:	409a      	lsls	r2, r3
 8009b46:	4b17      	ldr	r3, [pc, #92]	; (8009ba4 <xTaskPriorityInherit+0x108>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	4a15      	ldr	r2, [pc, #84]	; (8009ba4 <xTaskPriorityInherit+0x108>)
 8009b4e:	6013      	str	r3, [r2, #0]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b54:	4613      	mov	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4a10      	ldr	r2, [pc, #64]	; (8009ba0 <xTaskPriorityInherit+0x104>)
 8009b5e:	441a      	add	r2, r3
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	3304      	adds	r3, #4
 8009b64:	4619      	mov	r1, r3
 8009b66:	4610      	mov	r0, r2
 8009b68:	f7fe fce3 	bl	8008532 <vListInsertEnd>
 8009b6c:	e004      	b.n	8009b78 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b6e:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <xTaskPriorityInherit+0x100>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	e008      	b.n	8009b90 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b82:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <xTaskPriorityInherit+0x100>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d201      	bcs.n	8009b90 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b90:	68fb      	ldr	r3, [r7, #12]
	}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	2000087c 	.word	0x2000087c
 8009ba0:	20000880 	.word	0x20000880
 8009ba4:	20000984 	.word	0x20000984

08009ba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d06e      	beq.n	8009c9c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bbe:	4b3a      	ldr	r3, [pc, #232]	; (8009ca8 <xTaskPriorityDisinherit+0x100>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d00a      	beq.n	8009bde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	60fb      	str	r3, [r7, #12]
}
 8009bda:	bf00      	nop
 8009bdc:	e7fe      	b.n	8009bdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10a      	bne.n	8009bfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	60bb      	str	r3, [r7, #8]
}
 8009bf8:	bf00      	nop
 8009bfa:	e7fe      	b.n	8009bfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c00:	1e5a      	subs	r2, r3, #1
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d044      	beq.n	8009c9c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d140      	bne.n	8009c9c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fce2 	bl	80085e8 <uxListRemove>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d115      	bne.n	8009c56 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2e:	491f      	ldr	r1, [pc, #124]	; (8009cac <xTaskPriorityDisinherit+0x104>)
 8009c30:	4613      	mov	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10a      	bne.n	8009c56 <xTaskPriorityDisinherit+0xae>
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	2201      	movs	r2, #1
 8009c46:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4a:	43da      	mvns	r2, r3
 8009c4c:	4b18      	ldr	r3, [pc, #96]	; (8009cb0 <xTaskPriorityDisinherit+0x108>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4013      	ands	r3, r2
 8009c52:	4a17      	ldr	r2, [pc, #92]	; (8009cb0 <xTaskPriorityDisinherit+0x108>)
 8009c54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c62:	f1c3 0207 	rsb	r2, r3, #7
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6e:	2201      	movs	r2, #1
 8009c70:	409a      	lsls	r2, r3
 8009c72:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <xTaskPriorityDisinherit+0x108>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	4a0d      	ldr	r2, [pc, #52]	; (8009cb0 <xTaskPriorityDisinherit+0x108>)
 8009c7a:	6013      	str	r3, [r2, #0]
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4a08      	ldr	r2, [pc, #32]	; (8009cac <xTaskPriorityDisinherit+0x104>)
 8009c8a:	441a      	add	r2, r3
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	4619      	mov	r1, r3
 8009c92:	4610      	mov	r0, r2
 8009c94:	f7fe fc4d 	bl	8008532 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c9c:	697b      	ldr	r3, [r7, #20]
	}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	2000087c 	.word	0x2000087c
 8009cac:	20000880 	.word	0x20000880
 8009cb0:	20000984 	.word	0x20000984

08009cb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 8088 	beq.w	8009dde <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10a      	bne.n	8009cec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60fb      	str	r3, [r7, #12]
}
 8009ce8:	bf00      	nop
 8009cea:	e7fe      	b.n	8009cea <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d902      	bls.n	8009cfc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	61fb      	str	r3, [r7, #28]
 8009cfa:	e002      	b.n	8009d02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d06:	69fa      	ldr	r2, [r7, #28]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d068      	beq.n	8009dde <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d163      	bne.n	8009dde <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d16:	4b34      	ldr	r3, [pc, #208]	; (8009de8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d10a      	bne.n	8009d36 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	60bb      	str	r3, [r7, #8]
}
 8009d32:	bf00      	nop
 8009d34:	e7fe      	b.n	8009d34 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	db04      	blt.n	8009d54 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	f1c3 0207 	rsb	r2, r3, #7
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	6959      	ldr	r1, [r3, #20]
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4a22      	ldr	r2, [pc, #136]	; (8009dec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009d64:	4413      	add	r3, r2
 8009d66:	4299      	cmp	r1, r3
 8009d68:	d101      	bne.n	8009d6e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e000      	b.n	8009d70 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d034      	beq.n	8009dde <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	3304      	adds	r3, #4
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fc35 	bl	80085e8 <uxListRemove>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d115      	bne.n	8009db0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d88:	4918      	ldr	r1, [pc, #96]	; (8009dec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	440b      	add	r3, r1
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10a      	bne.n	8009db0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	2201      	movs	r2, #1
 8009da0:	fa02 f303 	lsl.w	r3, r2, r3
 8009da4:	43da      	mvns	r2, r3
 8009da6:	4b12      	ldr	r3, [pc, #72]	; (8009df0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4013      	ands	r3, r2
 8009dac:	4a10      	ldr	r2, [pc, #64]	; (8009df0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009dae:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	2201      	movs	r2, #1
 8009db6:	409a      	lsls	r2, r3
 8009db8:	4b0d      	ldr	r3, [pc, #52]	; (8009df0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	4a0c      	ldr	r2, [pc, #48]	; (8009df0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4a07      	ldr	r2, [pc, #28]	; (8009dec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009dd0:	441a      	add	r2, r3
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4610      	mov	r0, r2
 8009dda:	f7fe fbaa 	bl	8008532 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dde:	bf00      	nop
 8009de0:	3720      	adds	r7, #32
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	2000087c 	.word	0x2000087c
 8009dec:	20000880 	.word	0x20000880
 8009df0:	20000984 	.word	0x20000984

08009df4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009df8:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e00:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e06:	3201      	adds	r2, #1
 8009e08:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8009e0a:	4b03      	ldr	r3, [pc, #12]	; (8009e18 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
	}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bc80      	pop	{r7}
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	2000087c 	.word	0x2000087c

08009e1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e26:	4b29      	ldr	r3, [pc, #164]	; (8009ecc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e2c:	4b28      	ldr	r3, [pc, #160]	; (8009ed0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3304      	adds	r3, #4
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fbd8 	bl	80085e8 <uxListRemove>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10b      	bne.n	8009e56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009e3e:	4b24      	ldr	r3, [pc, #144]	; (8009ed0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	2201      	movs	r2, #1
 8009e46:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4a:	43da      	mvns	r2, r3
 8009e4c:	4b21      	ldr	r3, [pc, #132]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4013      	ands	r3, r2
 8009e52:	4a20      	ldr	r2, [pc, #128]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e5c:	d10a      	bne.n	8009e74 <prvAddCurrentTaskToDelayedList+0x58>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d007      	beq.n	8009e74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e64:	4b1a      	ldr	r3, [pc, #104]	; (8009ed0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	481a      	ldr	r0, [pc, #104]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e6e:	f7fe fb60 	bl	8008532 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e72:	e026      	b.n	8009ec2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4413      	add	r3, r2
 8009e7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e7c:	4b14      	ldr	r3, [pc, #80]	; (8009ed0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d209      	bcs.n	8009ea0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e8c:	4b13      	ldr	r3, [pc, #76]	; (8009edc <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	4b0f      	ldr	r3, [pc, #60]	; (8009ed0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3304      	adds	r3, #4
 8009e96:	4619      	mov	r1, r3
 8009e98:	4610      	mov	r0, r2
 8009e9a:	f7fe fb6d 	bl	8008578 <vListInsert>
}
 8009e9e:	e010      	b.n	8009ec2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ea0:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4610      	mov	r0, r2
 8009eae:	f7fe fb63 	bl	8008578 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d202      	bcs.n	8009ec2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ebc:	4a09      	ldr	r2, [pc, #36]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	6013      	str	r3, [r2, #0]
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000980 	.word	0x20000980
 8009ed0:	2000087c 	.word	0x2000087c
 8009ed4:	20000984 	.word	0x20000984
 8009ed8:	20000968 	.word	0x20000968
 8009edc:	20000938 	.word	0x20000938
 8009ee0:	20000934 	.word	0x20000934
 8009ee4:	2000099c 	.word	0x2000099c

08009ee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3b04      	subs	r3, #4
 8009ef8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3b04      	subs	r3, #4
 8009f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f023 0201 	bic.w	r2, r3, #1
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3b04      	subs	r3, #4
 8009f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f18:	4a08      	ldr	r2, [pc, #32]	; (8009f3c <pxPortInitialiseStack+0x54>)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3b14      	subs	r3, #20
 8009f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3b20      	subs	r3, #32
 8009f2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f30:	68fb      	ldr	r3, [r7, #12]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bc80      	pop	{r7}
 8009f3a:	4770      	bx	lr
 8009f3c:	08009f41 	.word	0x08009f41

08009f40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f4a:	4b12      	ldr	r3, [pc, #72]	; (8009f94 <prvTaskExitError+0x54>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f52:	d00a      	beq.n	8009f6a <prvTaskExitError+0x2a>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	60fb      	str	r3, [r7, #12]
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <prvTaskExitError+0x28>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	60bb      	str	r3, [r7, #8]
}
 8009f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f7e:	bf00      	nop
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0fc      	beq.n	8009f80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f86:	bf00      	nop
 8009f88:	bf00      	nop
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bc80      	pop	{r7}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	2000002c 	.word	0x2000002c
	...

08009fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fa0:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <pxCurrentTCBConst2>)
 8009fa2:	6819      	ldr	r1, [r3, #0]
 8009fa4:	6808      	ldr	r0, [r1, #0]
 8009fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009faa:	f380 8809 	msr	PSP, r0
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f04f 0000 	mov.w	r0, #0
 8009fb6:	f380 8811 	msr	BASEPRI, r0
 8009fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8009fbe:	4770      	bx	lr

08009fc0 <pxCurrentTCBConst2>:
 8009fc0:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop

08009fc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009fc8:	4806      	ldr	r0, [pc, #24]	; (8009fe4 <prvPortStartFirstTask+0x1c>)
 8009fca:	6800      	ldr	r0, [r0, #0]
 8009fcc:	6800      	ldr	r0, [r0, #0]
 8009fce:	f380 8808 	msr	MSP, r0
 8009fd2:	b662      	cpsie	i
 8009fd4:	b661      	cpsie	f
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	df00      	svc	0
 8009fe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fe2:	bf00      	nop
 8009fe4:	e000ed08 	.word	0xe000ed08

08009fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fee:	4b32      	ldr	r3, [pc, #200]	; (800a0b8 <xPortStartScheduler+0xd0>)
 8009ff0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	22ff      	movs	r2, #255	; 0xff
 8009ffe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	b2db      	uxtb	r3, r3
 800a006:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a008:	78fb      	ldrb	r3, [r7, #3]
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a010:	b2da      	uxtb	r2, r3
 800a012:	4b2a      	ldr	r3, [pc, #168]	; (800a0bc <xPortStartScheduler+0xd4>)
 800a014:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a016:	4b2a      	ldr	r3, [pc, #168]	; (800a0c0 <xPortStartScheduler+0xd8>)
 800a018:	2207      	movs	r2, #7
 800a01a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a01c:	e009      	b.n	800a032 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a01e:	4b28      	ldr	r3, [pc, #160]	; (800a0c0 <xPortStartScheduler+0xd8>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3b01      	subs	r3, #1
 800a024:	4a26      	ldr	r2, [pc, #152]	; (800a0c0 <xPortStartScheduler+0xd8>)
 800a026:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	b2db      	uxtb	r3, r3
 800a036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a03a:	2b80      	cmp	r3, #128	; 0x80
 800a03c:	d0ef      	beq.n	800a01e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a03e:	4b20      	ldr	r3, [pc, #128]	; (800a0c0 <xPortStartScheduler+0xd8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f1c3 0307 	rsb	r3, r3, #7
 800a046:	2b04      	cmp	r3, #4
 800a048:	d00a      	beq.n	800a060 <xPortStartScheduler+0x78>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	60bb      	str	r3, [r7, #8]
}
 800a05c:	bf00      	nop
 800a05e:	e7fe      	b.n	800a05e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a060:	4b17      	ldr	r3, [pc, #92]	; (800a0c0 <xPortStartScheduler+0xd8>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	021b      	lsls	r3, r3, #8
 800a066:	4a16      	ldr	r2, [pc, #88]	; (800a0c0 <xPortStartScheduler+0xd8>)
 800a068:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a06a:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <xPortStartScheduler+0xd8>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a072:	4a13      	ldr	r2, [pc, #76]	; (800a0c0 <xPortStartScheduler+0xd8>)
 800a074:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a07e:	4b11      	ldr	r3, [pc, #68]	; (800a0c4 <xPortStartScheduler+0xdc>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a10      	ldr	r2, [pc, #64]	; (800a0c4 <xPortStartScheduler+0xdc>)
 800a084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a088:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a08a:	4b0e      	ldr	r3, [pc, #56]	; (800a0c4 <xPortStartScheduler+0xdc>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a0d      	ldr	r2, [pc, #52]	; (800a0c4 <xPortStartScheduler+0xdc>)
 800a090:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a094:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a096:	f000 f8b9 	bl	800a20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a09a:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <xPortStartScheduler+0xe0>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0a0:	f7ff ff92 	bl	8009fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0a4:	f7ff fa82 	bl	80095ac <vTaskSwitchContext>
	prvTaskExitError();
 800a0a8:	f7ff ff4a 	bl	8009f40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	e000e400 	.word	0xe000e400
 800a0bc:	200009a8 	.word	0x200009a8
 800a0c0:	200009ac 	.word	0x200009ac
 800a0c4:	e000ed20 	.word	0xe000ed20
 800a0c8:	2000002c 	.word	0x2000002c

0800a0cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	607b      	str	r3, [r7, #4]
}
 800a0e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0e6:	4b0f      	ldr	r3, [pc, #60]	; (800a124 <vPortEnterCritical+0x58>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	4a0d      	ldr	r2, [pc, #52]	; (800a124 <vPortEnterCritical+0x58>)
 800a0ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <vPortEnterCritical+0x58>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d10f      	bne.n	800a118 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0f8:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <vPortEnterCritical+0x5c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00a      	beq.n	800a118 <vPortEnterCritical+0x4c>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	603b      	str	r3, [r7, #0]
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <vPortEnterCritical+0x4a>
	}
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bc80      	pop	{r7}
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	2000002c 	.word	0x2000002c
 800a128:	e000ed04 	.word	0xe000ed04

0800a12c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a132:	4b11      	ldr	r3, [pc, #68]	; (800a178 <vPortExitCritical+0x4c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10a      	bne.n	800a150 <vPortExitCritical+0x24>
	__asm volatile
 800a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13e:	f383 8811 	msr	BASEPRI, r3
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	607b      	str	r3, [r7, #4]
}
 800a14c:	bf00      	nop
 800a14e:	e7fe      	b.n	800a14e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a150:	4b09      	ldr	r3, [pc, #36]	; (800a178 <vPortExitCritical+0x4c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	3b01      	subs	r3, #1
 800a156:	4a08      	ldr	r2, [pc, #32]	; (800a178 <vPortExitCritical+0x4c>)
 800a158:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a15a:	4b07      	ldr	r3, [pc, #28]	; (800a178 <vPortExitCritical+0x4c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d105      	bne.n	800a16e <vPortExitCritical+0x42>
 800a162:	2300      	movs	r3, #0
 800a164:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a16c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	bc80      	pop	{r7}
 800a176:	4770      	bx	lr
 800a178:	2000002c 	.word	0x2000002c
 800a17c:	00000000 	.word	0x00000000

0800a180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a180:	f3ef 8009 	mrs	r0, PSP
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <pxCurrentTCBConst>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a190:	6010      	str	r0, [r2, #0]
 800a192:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a196:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a19a:	f380 8811 	msr	BASEPRI, r0
 800a19e:	f7ff fa05 	bl	80095ac <vTaskSwitchContext>
 800a1a2:	f04f 0000 	mov.w	r0, #0
 800a1a6:	f380 8811 	msr	BASEPRI, r0
 800a1aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a1ae:	6819      	ldr	r1, [r3, #0]
 800a1b0:	6808      	ldr	r0, [r1, #0]
 800a1b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a1b6:	f380 8809 	msr	PSP, r0
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	4770      	bx	lr

0800a1c0 <pxCurrentTCBConst>:
 800a1c0:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop

0800a1c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	607b      	str	r3, [r7, #4]
}
 800a1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1e2:	f7ff f925 	bl	8009430 <xTaskIncrementTick>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1ec:	4b06      	ldr	r3, [pc, #24]	; (800a208 <SysTick_Handler+0x40>)
 800a1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f383 8811 	msr	BASEPRI, r3
}
 800a1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a210:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <vPortSetupTimerInterrupt+0x30>)
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a216:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <vPortSetupTimerInterrupt+0x34>)
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a21c:	4b09      	ldr	r3, [pc, #36]	; (800a244 <vPortSetupTimerInterrupt+0x38>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a09      	ldr	r2, [pc, #36]	; (800a248 <vPortSetupTimerInterrupt+0x3c>)
 800a222:	fba2 2303 	umull	r2, r3, r2, r3
 800a226:	099b      	lsrs	r3, r3, #6
 800a228:	4a08      	ldr	r2, [pc, #32]	; (800a24c <vPortSetupTimerInterrupt+0x40>)
 800a22a:	3b01      	subs	r3, #1
 800a22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a22e:	4b03      	ldr	r3, [pc, #12]	; (800a23c <vPortSetupTimerInterrupt+0x30>)
 800a230:	2207      	movs	r2, #7
 800a232:	601a      	str	r2, [r3, #0]
}
 800a234:	bf00      	nop
 800a236:	46bd      	mov	sp, r7
 800a238:	bc80      	pop	{r7}
 800a23a:	4770      	bx	lr
 800a23c:	e000e010 	.word	0xe000e010
 800a240:	e000e018 	.word	0xe000e018
 800a244:	20000000 	.word	0x20000000
 800a248:	10624dd3 	.word	0x10624dd3
 800a24c:	e000e014 	.word	0xe000e014

0800a250 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08a      	sub	sp, #40	; 0x28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a258:	2300      	movs	r3, #0
 800a25a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a25c:	f7ff f830 	bl	80092c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a260:	4b5b      	ldr	r3, [pc, #364]	; (800a3d0 <pvPortMalloc+0x180>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a268:	f000 f916 	bl	800a498 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a26c:	4b59      	ldr	r3, [pc, #356]	; (800a3d4 <pvPortMalloc+0x184>)
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4013      	ands	r3, r2
 800a274:	2b00      	cmp	r3, #0
 800a276:	f040 808e 	bne.w	800a396 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d01d      	beq.n	800a2bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a280:	2208      	movs	r2, #8
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4413      	add	r3, r2
 800a286:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d014      	beq.n	800a2bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f023 0307 	bic.w	r3, r3, #7
 800a298:	3308      	adds	r3, #8
 800a29a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00a      	beq.n	800a2bc <pvPortMalloc+0x6c>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	617b      	str	r3, [r7, #20]
}
 800a2b8:	bf00      	nop
 800a2ba:	e7fe      	b.n	800a2ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d069      	beq.n	800a396 <pvPortMalloc+0x146>
 800a2c2:	4b45      	ldr	r3, [pc, #276]	; (800a3d8 <pvPortMalloc+0x188>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d864      	bhi.n	800a396 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2cc:	4b43      	ldr	r3, [pc, #268]	; (800a3dc <pvPortMalloc+0x18c>)
 800a2ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2d0:	4b42      	ldr	r3, [pc, #264]	; (800a3dc <pvPortMalloc+0x18c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2d6:	e004      	b.n	800a2e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d903      	bls.n	800a2f4 <pvPortMalloc+0xa4>
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1f1      	bne.n	800a2d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2f4:	4b36      	ldr	r3, [pc, #216]	; (800a3d0 <pvPortMalloc+0x180>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d04b      	beq.n	800a396 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2208      	movs	r2, #8
 800a304:	4413      	add	r3, r2
 800a306:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	1ad2      	subs	r2, r2, r3
 800a318:	2308      	movs	r3, #8
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d91f      	bls.n	800a360 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4413      	add	r3, r2
 800a326:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	f003 0307 	and.w	r3, r3, #7
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00a      	beq.n	800a348 <pvPortMalloc+0xf8>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	613b      	str	r3, [r7, #16]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a35a:	69b8      	ldr	r0, [r7, #24]
 800a35c:	f000 f8fe 	bl	800a55c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a360:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <pvPortMalloc+0x188>)
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	4a1b      	ldr	r2, [pc, #108]	; (800a3d8 <pvPortMalloc+0x188>)
 800a36c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a36e:	4b1a      	ldr	r3, [pc, #104]	; (800a3d8 <pvPortMalloc+0x188>)
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	4b1b      	ldr	r3, [pc, #108]	; (800a3e0 <pvPortMalloc+0x190>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d203      	bcs.n	800a382 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a37a:	4b17      	ldr	r3, [pc, #92]	; (800a3d8 <pvPortMalloc+0x188>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a18      	ldr	r2, [pc, #96]	; (800a3e0 <pvPortMalloc+0x190>)
 800a380:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	4b13      	ldr	r3, [pc, #76]	; (800a3d4 <pvPortMalloc+0x184>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	431a      	orrs	r2, r3
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a396:	f7fe ffa1 	bl	80092dc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a3a0:	f7fd ff04 	bl	80081ac <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <pvPortMalloc+0x174>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	60fb      	str	r3, [r7, #12]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <pvPortMalloc+0x172>
	return pvReturn;
 800a3c4:	69fb      	ldr	r3, [r7, #28]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3728      	adds	r7, #40	; 0x28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	200019b8 	.word	0x200019b8
 800a3d4:	200019c4 	.word	0x200019c4
 800a3d8:	200019bc 	.word	0x200019bc
 800a3dc:	200019b0 	.word	0x200019b0
 800a3e0:	200019c0 	.word	0x200019c0

0800a3e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d048      	beq.n	800a488 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3f6:	2308      	movs	r3, #8
 800a3f8:	425b      	negs	r3, r3
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	4b21      	ldr	r3, [pc, #132]	; (800a490 <vPortFree+0xac>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4013      	ands	r3, r2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10a      	bne.n	800a428 <vPortFree+0x44>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	60fb      	str	r3, [r7, #12]
}
 800a424:	bf00      	nop
 800a426:	e7fe      	b.n	800a426 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00a      	beq.n	800a446 <vPortFree+0x62>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	60bb      	str	r3, [r7, #8]
}
 800a442:	bf00      	nop
 800a444:	e7fe      	b.n	800a444 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	4b11      	ldr	r3, [pc, #68]	; (800a490 <vPortFree+0xac>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4013      	ands	r3, r2
 800a450:	2b00      	cmp	r3, #0
 800a452:	d019      	beq.n	800a488 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d115      	bne.n	800a488 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <vPortFree+0xac>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	43db      	mvns	r3, r3
 800a466:	401a      	ands	r2, r3
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a46c:	f7fe ff28 	bl	80092c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	4b07      	ldr	r3, [pc, #28]	; (800a494 <vPortFree+0xb0>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4413      	add	r3, r2
 800a47a:	4a06      	ldr	r2, [pc, #24]	; (800a494 <vPortFree+0xb0>)
 800a47c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a47e:	6938      	ldr	r0, [r7, #16]
 800a480:	f000 f86c 	bl	800a55c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a484:	f7fe ff2a 	bl	80092dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a488:	bf00      	nop
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	200019c4 	.word	0x200019c4
 800a494:	200019bc 	.word	0x200019bc

0800a498 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4a4:	4b27      	ldr	r3, [pc, #156]	; (800a544 <prvHeapInit+0xac>)
 800a4a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f003 0307 	and.w	r3, r3, #7
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00c      	beq.n	800a4cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3307      	adds	r3, #7
 800a4b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f023 0307 	bic.w	r3, r3, #7
 800a4be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	4a1f      	ldr	r2, [pc, #124]	; (800a544 <prvHeapInit+0xac>)
 800a4c8:	4413      	add	r3, r2
 800a4ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4d0:	4a1d      	ldr	r2, [pc, #116]	; (800a548 <prvHeapInit+0xb0>)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4d6:	4b1c      	ldr	r3, [pc, #112]	; (800a548 <prvHeapInit+0xb0>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4e4:	2208      	movs	r2, #8
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	1a9b      	subs	r3, r3, r2
 800a4ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 0307 	bic.w	r3, r3, #7
 800a4f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	4a15      	ldr	r2, [pc, #84]	; (800a54c <prvHeapInit+0xb4>)
 800a4f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4fa:	4b14      	ldr	r3, [pc, #80]	; (800a54c <prvHeapInit+0xb4>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2200      	movs	r2, #0
 800a500:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a502:	4b12      	ldr	r3, [pc, #72]	; (800a54c <prvHeapInit+0xb4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2200      	movs	r2, #0
 800a508:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	1ad2      	subs	r2, r2, r3
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a518:	4b0c      	ldr	r3, [pc, #48]	; (800a54c <prvHeapInit+0xb4>)
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	4a0a      	ldr	r2, [pc, #40]	; (800a550 <prvHeapInit+0xb8>)
 800a526:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	4a09      	ldr	r2, [pc, #36]	; (800a554 <prvHeapInit+0xbc>)
 800a52e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a530:	4b09      	ldr	r3, [pc, #36]	; (800a558 <prvHeapInit+0xc0>)
 800a532:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a536:	601a      	str	r2, [r3, #0]
}
 800a538:	bf00      	nop
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bc80      	pop	{r7}
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	200009b0 	.word	0x200009b0
 800a548:	200019b0 	.word	0x200019b0
 800a54c:	200019b8 	.word	0x200019b8
 800a550:	200019c0 	.word	0x200019c0
 800a554:	200019bc 	.word	0x200019bc
 800a558:	200019c4 	.word	0x200019c4

0800a55c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a564:	4b27      	ldr	r3, [pc, #156]	; (800a604 <prvInsertBlockIntoFreeList+0xa8>)
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	e002      	b.n	800a570 <prvInsertBlockIntoFreeList+0x14>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	60fb      	str	r3, [r7, #12]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	429a      	cmp	r2, r3
 800a578:	d8f7      	bhi.n	800a56a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	4413      	add	r3, r2
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d108      	bne.n	800a59e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	441a      	add	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	441a      	add	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d118      	bne.n	800a5e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	4b14      	ldr	r3, [pc, #80]	; (800a608 <prvInsertBlockIntoFreeList+0xac>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d00d      	beq.n	800a5da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	441a      	add	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	e008      	b.n	800a5ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5da:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <prvInsertBlockIntoFreeList+0xac>)
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e003      	b.n	800a5ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d002      	beq.n	800a5fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5fa:	bf00      	nop
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bc80      	pop	{r7}
 800a602:	4770      	bx	lr
 800a604:	200019b0 	.word	0x200019b0
 800a608:	200019b8 	.word	0x200019b8

0800a60c <Uart_Lora_Init>:
#endif

#if LORA_TRANSMIT_MODE_UART

void Uart_Lora_Init(Frame_Transmit_Data *frame_data_x, UART_HandleTypeDef *UART, uint16_t time_out)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	4613      	mov	r3, r2
 800a618:	80fb      	strh	r3, [r7, #6]
    frame_data_x->UART_LORA = UART;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	601a      	str	r2, [r3, #0]
    frame_data_x->index = 0;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	76da      	strb	r2, [r3, #27]
    frame_data_x->time_out_uart = time_out;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	88fa      	ldrh	r2, [r7, #6]
 800a62a:	839a      	strh	r2, [r3, #28]
    memset(frame_data_x->Fame_Transimt_Data, 0, ARRAY_MAX);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	3304      	adds	r3, #4
 800a630:	2217      	movs	r2, #23
 800a632:	2100      	movs	r1, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f003 ff3e 	bl	800e4b6 <memset>
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <Lora_Uart_Master_Send_Data_To_Salve>:

uint8_t Lora_Uart_Master_Send_Data_To_Salve(Frame_Transmit_Data *frame_data_x, float Temperature, uint16_t Humidity, uint16_t Average_PPM_Co2, uint16_t Average_PPM_So2,
                                                     uint16_t Average_Sum_PM, uint16_t Average_PM2_5, uint16_t Battery_Voltage, uint16_t VDC_Input_Voltage, uint16_t Solar_Panel_Voltage)
{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4611      	mov	r1, r2
 800a650:	461a      	mov	r2, r3
 800a652:	460b      	mov	r3, r1
 800a654:	80fb      	strh	r3, [r7, #6]
 800a656:	4613      	mov	r3, r2
 800a658:	80bb      	strh	r3, [r7, #4]
    uint16_t lengh_string = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	82fb      	strh	r3, [r7, #22]
    #endif

    #if !defined(PROTOCOL_TEXT)
        // #error Not Define USE
    #else
    sprintf(Buffer_Nun_Error, "%d", ERRORR_STATUS_FRAME);
 800a65e:	22aa      	movs	r2, #170	; 0xaa
 800a660:	49a0      	ldr	r1, [pc, #640]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a662:	48a1      	ldr	r0, [pc, #644]	; (800a8e8 <Lora_Uart_Master_Send_Data_To_Salve+0x2a4>)
 800a664:	f004 fc9e 	bl	800efa4 <siprintf>
    sprintf(Buffer_Number_Sensor, "%d", NUMBER_SENSOR);
 800a668:	2206      	movs	r2, #6
 800a66a:	499e      	ldr	r1, [pc, #632]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a66c:	489f      	ldr	r0, [pc, #636]	; (800a8ec <Lora_Uart_Master_Send_Data_To_Salve+0x2a8>)
 800a66e:	f004 fc99 	bl	800efa4 <siprintf>
    sprintf(Buffer_Temp, "%.1f", Temperature);
 800a672:	68b8      	ldr	r0, [r7, #8]
 800a674:	f7f5 fed8 	bl	8000428 <__aeabi_f2d>
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	499c      	ldr	r1, [pc, #624]	; (800a8f0 <Lora_Uart_Master_Send_Data_To_Salve+0x2ac>)
 800a67e:	489d      	ldr	r0, [pc, #628]	; (800a8f4 <Lora_Uart_Master_Send_Data_To_Salve+0x2b0>)
 800a680:	f004 fc90 	bl	800efa4 <siprintf>
    sprintf(Buffer_Hum, "%d", Humidity);
 800a684:	88fb      	ldrh	r3, [r7, #6]
 800a686:	461a      	mov	r2, r3
 800a688:	4996      	ldr	r1, [pc, #600]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a68a:	489b      	ldr	r0, [pc, #620]	; (800a8f8 <Lora_Uart_Master_Send_Data_To_Salve+0x2b4>)
 800a68c:	f004 fc8a 	bl	800efa4 <siprintf>
    sprintf(Buffer_Co2, "%d", Average_PPM_Co2);
 800a690:	88bb      	ldrh	r3, [r7, #4]
 800a692:	461a      	mov	r2, r3
 800a694:	4993      	ldr	r1, [pc, #588]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a696:	4899      	ldr	r0, [pc, #612]	; (800a8fc <Lora_Uart_Master_Send_Data_To_Salve+0x2b8>)
 800a698:	f004 fc84 	bl	800efa4 <siprintf>
    sprintf(Buffer_So2, "%d", Average_PPM_So2);
 800a69c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a69e:	461a      	mov	r2, r3
 800a6a0:	4990      	ldr	r1, [pc, #576]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a6a2:	4897      	ldr	r0, [pc, #604]	; (800a900 <Lora_Uart_Master_Send_Data_To_Salve+0x2bc>)
 800a6a4:	f004 fc7e 	bl	800efa4 <siprintf>
    sprintf(Buffer_Sum_Pm, "%d", Average_Sum_PM);
 800a6a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	498d      	ldr	r1, [pc, #564]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a6ae:	4895      	ldr	r0, [pc, #596]	; (800a904 <Lora_Uart_Master_Send_Data_To_Salve+0x2c0>)
 800a6b0:	f004 fc78 	bl	800efa4 <siprintf>
    sprintf(Buffer_Pm2_5, "%d", Average_PM2_5);
 800a6b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	498a      	ldr	r1, [pc, #552]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a6ba:	4893      	ldr	r0, [pc, #588]	; (800a908 <Lora_Uart_Master_Send_Data_To_Salve+0x2c4>)
 800a6bc:	f004 fc72 	bl	800efa4 <siprintf>
    sprintf(Buffer_Bat_Vol, "%d", Battery_Voltage);
 800a6c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	4987      	ldr	r1, [pc, #540]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a6c6:	4891      	ldr	r0, [pc, #580]	; (800a90c <Lora_Uart_Master_Send_Data_To_Salve+0x2c8>)
 800a6c8:	f004 fc6c 	bl	800efa4 <siprintf>
    sprintf(Buffer_Vdc_Input, "%d", VDC_Input_Voltage);
 800a6cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4984      	ldr	r1, [pc, #528]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a6d2:	488f      	ldr	r0, [pc, #572]	; (800a910 <Lora_Uart_Master_Send_Data_To_Salve+0x2cc>)
 800a6d4:	f004 fc66 	bl	800efa4 <siprintf>
    sprintf(Buffer_Solar_Vol, "%d", Solar_Panel_Voltage);
 800a6d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4981      	ldr	r1, [pc, #516]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a6de:	488d      	ldr	r0, [pc, #564]	; (800a914 <Lora_Uart_Master_Send_Data_To_Salve+0x2d0>)
 800a6e0:	f004 fc60 	bl	800efa4 <siprintf>

    memset(Buffer_Data, '\0', sizeof(Buffer_Data));
 800a6e4:	2280      	movs	r2, #128	; 0x80
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	488b      	ldr	r0, [pc, #556]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a6ea:	f003 fee4 	bl	800e4b6 <memset>
    strcpy(Buffer_Data, ",");
 800a6ee:	4b8a      	ldr	r3, [pc, #552]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a6f0:	222c      	movs	r2, #44	; 0x2c
 800a6f2:	801a      	strh	r2, [r3, #0]
    strcat(Buffer_Data, Buffer_Nun_Error);
 800a6f4:	497c      	ldr	r1, [pc, #496]	; (800a8e8 <Lora_Uart_Master_Send_Data_To_Salve+0x2a4>)
 800a6f6:	4888      	ldr	r0, [pc, #544]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a6f8:	f004 fcb7 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a6fc:	4886      	ldr	r0, [pc, #536]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a6fe:	f7f5 fd27 	bl	8000150 <strlen>
 800a702:	4603      	mov	r3, r0
 800a704:	461a      	mov	r2, r3
 800a706:	4b84      	ldr	r3, [pc, #528]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a708:	4413      	add	r3, r2
 800a70a:	4984      	ldr	r1, [pc, #528]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a70c:	461a      	mov	r2, r3
 800a70e:	460b      	mov	r3, r1
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_Number_Sensor);
 800a714:	4975      	ldr	r1, [pc, #468]	; (800a8ec <Lora_Uart_Master_Send_Data_To_Salve+0x2a8>)
 800a716:	4880      	ldr	r0, [pc, #512]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a718:	f004 fca7 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a71c:	487e      	ldr	r0, [pc, #504]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a71e:	f7f5 fd17 	bl	8000150 <strlen>
 800a722:	4603      	mov	r3, r0
 800a724:	461a      	mov	r2, r3
 800a726:	4b7c      	ldr	r3, [pc, #496]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a728:	4413      	add	r3, r2
 800a72a:	497c      	ldr	r1, [pc, #496]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a72c:	461a      	mov	r2, r3
 800a72e:	460b      	mov	r3, r1
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_Temp);
 800a734:	496f      	ldr	r1, [pc, #444]	; (800a8f4 <Lora_Uart_Master_Send_Data_To_Salve+0x2b0>)
 800a736:	4878      	ldr	r0, [pc, #480]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a738:	f004 fc97 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a73c:	4876      	ldr	r0, [pc, #472]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a73e:	f7f5 fd07 	bl	8000150 <strlen>
 800a742:	4603      	mov	r3, r0
 800a744:	461a      	mov	r2, r3
 800a746:	4b74      	ldr	r3, [pc, #464]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a748:	4413      	add	r3, r2
 800a74a:	4974      	ldr	r1, [pc, #464]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a74c:	461a      	mov	r2, r3
 800a74e:	460b      	mov	r3, r1
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_Hum);
 800a754:	4968      	ldr	r1, [pc, #416]	; (800a8f8 <Lora_Uart_Master_Send_Data_To_Salve+0x2b4>)
 800a756:	4870      	ldr	r0, [pc, #448]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a758:	f004 fc87 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a75c:	486e      	ldr	r0, [pc, #440]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a75e:	f7f5 fcf7 	bl	8000150 <strlen>
 800a762:	4603      	mov	r3, r0
 800a764:	461a      	mov	r2, r3
 800a766:	4b6c      	ldr	r3, [pc, #432]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a768:	4413      	add	r3, r2
 800a76a:	496c      	ldr	r1, [pc, #432]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a76c:	461a      	mov	r2, r3
 800a76e:	460b      	mov	r3, r1
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_Co2);
 800a774:	4961      	ldr	r1, [pc, #388]	; (800a8fc <Lora_Uart_Master_Send_Data_To_Salve+0x2b8>)
 800a776:	4868      	ldr	r0, [pc, #416]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a778:	f004 fc77 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a77c:	4866      	ldr	r0, [pc, #408]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a77e:	f7f5 fce7 	bl	8000150 <strlen>
 800a782:	4603      	mov	r3, r0
 800a784:	461a      	mov	r2, r3
 800a786:	4b64      	ldr	r3, [pc, #400]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a788:	4413      	add	r3, r2
 800a78a:	4964      	ldr	r1, [pc, #400]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a78c:	461a      	mov	r2, r3
 800a78e:	460b      	mov	r3, r1
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_So2);
 800a794:	495a      	ldr	r1, [pc, #360]	; (800a900 <Lora_Uart_Master_Send_Data_To_Salve+0x2bc>)
 800a796:	4860      	ldr	r0, [pc, #384]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a798:	f004 fc67 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a79c:	485e      	ldr	r0, [pc, #376]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a79e:	f7f5 fcd7 	bl	8000150 <strlen>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4b5c      	ldr	r3, [pc, #368]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a7a8:	4413      	add	r3, r2
 800a7aa:	495c      	ldr	r1, [pc, #368]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_Sum_Pm);
 800a7b4:	4953      	ldr	r1, [pc, #332]	; (800a904 <Lora_Uart_Master_Send_Data_To_Salve+0x2c0>)
 800a7b6:	4858      	ldr	r0, [pc, #352]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a7b8:	f004 fc57 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a7bc:	4856      	ldr	r0, [pc, #344]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a7be:	f7f5 fcc7 	bl	8000150 <strlen>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	4b54      	ldr	r3, [pc, #336]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a7c8:	4413      	add	r3, r2
 800a7ca:	4954      	ldr	r1, [pc, #336]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_Pm2_5);
 800a7d4:	494c      	ldr	r1, [pc, #304]	; (800a908 <Lora_Uart_Master_Send_Data_To_Salve+0x2c4>)
 800a7d6:	4850      	ldr	r0, [pc, #320]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a7d8:	f004 fc47 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a7dc:	484e      	ldr	r0, [pc, #312]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a7de:	f7f5 fcb7 	bl	8000150 <strlen>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4b4c      	ldr	r3, [pc, #304]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a7e8:	4413      	add	r3, r2
 800a7ea:	494c      	ldr	r1, [pc, #304]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_Bat_Vol);
 800a7f4:	4945      	ldr	r1, [pc, #276]	; (800a90c <Lora_Uart_Master_Send_Data_To_Salve+0x2c8>)
 800a7f6:	4848      	ldr	r0, [pc, #288]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a7f8:	f004 fc37 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a7fc:	4846      	ldr	r0, [pc, #280]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a7fe:	f7f5 fca7 	bl	8000150 <strlen>
 800a802:	4603      	mov	r3, r0
 800a804:	461a      	mov	r2, r3
 800a806:	4b44      	ldr	r3, [pc, #272]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a808:	4413      	add	r3, r2
 800a80a:	4944      	ldr	r1, [pc, #272]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a80c:	461a      	mov	r2, r3
 800a80e:	460b      	mov	r3, r1
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_Vdc_Input);
 800a814:	493e      	ldr	r1, [pc, #248]	; (800a910 <Lora_Uart_Master_Send_Data_To_Salve+0x2cc>)
 800a816:	4840      	ldr	r0, [pc, #256]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a818:	f004 fc27 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a81c:	483e      	ldr	r0, [pc, #248]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a81e:	f7f5 fc97 	bl	8000150 <strlen>
 800a822:	4603      	mov	r3, r0
 800a824:	461a      	mov	r2, r3
 800a826:	4b3c      	ldr	r3, [pc, #240]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a828:	4413      	add	r3, r2
 800a82a:	493c      	ldr	r1, [pc, #240]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a82c:	461a      	mov	r2, r3
 800a82e:	460b      	mov	r3, r1
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	8013      	strh	r3, [r2, #0]
    strcat(Buffer_Data, Buffer_Solar_Vol);
 800a834:	4937      	ldr	r1, [pc, #220]	; (800a914 <Lora_Uart_Master_Send_Data_To_Salve+0x2d0>)
 800a836:	4838      	ldr	r0, [pc, #224]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a838:	f004 fc17 	bl	800f06a <strcat>
    strcat(Buffer_Data, ",");
 800a83c:	4836      	ldr	r0, [pc, #216]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a83e:	f7f5 fc87 	bl	8000150 <strlen>
 800a842:	4603      	mov	r3, r0
 800a844:	461a      	mov	r2, r3
 800a846:	4b34      	ldr	r3, [pc, #208]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a848:	4413      	add	r3, r2
 800a84a:	4934      	ldr	r1, [pc, #208]	; (800a91c <Lora_Uart_Master_Send_Data_To_Salve+0x2d8>)
 800a84c:	461a      	mov	r2, r3
 800a84e:	460b      	mov	r3, r1
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	8013      	strh	r3, [r2, #0]

    lengh_string = strlen(Buffer_Data);
 800a854:	4830      	ldr	r0, [pc, #192]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a856:	f7f5 fc7b 	bl	8000150 <strlen>
 800a85a:	4603      	mov	r3, r0
 800a85c:	82fb      	strh	r3, [r7, #22]

    sprintf(Buffer_Size_Frame, "%d", lengh_string);
 800a85e:	8afb      	ldrh	r3, [r7, #22]
 800a860:	461a      	mov	r2, r3
 800a862:	4920      	ldr	r1, [pc, #128]	; (800a8e4 <Lora_Uart_Master_Send_Data_To_Salve+0x2a0>)
 800a864:	482e      	ldr	r0, [pc, #184]	; (800a920 <Lora_Uart_Master_Send_Data_To_Salve+0x2dc>)
 800a866:	f004 fb9d 	bl	800efa4 <siprintf>

    sprintf(Buffer_Check_Sum, "%d\r", 0XFFFF-lengh_string);
 800a86a:	8afb      	ldrh	r3, [r7, #22]
 800a86c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800a870:	33ff      	adds	r3, #255	; 0xff
 800a872:	461a      	mov	r2, r3
 800a874:	492b      	ldr	r1, [pc, #172]	; (800a924 <Lora_Uart_Master_Send_Data_To_Salve+0x2e0>)
 800a876:	482c      	ldr	r0, [pc, #176]	; (800a928 <Lora_Uart_Master_Send_Data_To_Salve+0x2e4>)
 800a878:	f004 fb94 	bl	800efa4 <siprintf>

    HAL_UART_Transmit(frame_data_x->UART_LORA, (uint8_t*)LORA_AT_SEND, strlen(LORA_AT_SEND), frame_data_x->time_out_uart);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	8b9b      	ldrh	r3, [r3, #28]
 800a884:	220a      	movs	r2, #10
 800a886:	4929      	ldr	r1, [pc, #164]	; (800a92c <Lora_Uart_Master_Send_Data_To_Salve+0x2e8>)
 800a888:	f7fc fee9 	bl	800765e <HAL_UART_Transmit>
    HAL_UART_Transmit(frame_data_x->UART_LORA, (uint8_t*)Buffer_Size_Frame, strlen(Buffer_Size_Frame), frame_data_x->time_out_uart);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681c      	ldr	r4, [r3, #0]
 800a890:	4823      	ldr	r0, [pc, #140]	; (800a920 <Lora_Uart_Master_Send_Data_To_Salve+0x2dc>)
 800a892:	f7f5 fc5d 	bl	8000150 <strlen>
 800a896:	4603      	mov	r3, r0
 800a898:	b29a      	uxth	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	8b9b      	ldrh	r3, [r3, #28]
 800a89e:	4920      	ldr	r1, [pc, #128]	; (800a920 <Lora_Uart_Master_Send_Data_To_Salve+0x2dc>)
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f7fc fedc 	bl	800765e <HAL_UART_Transmit>
    HAL_UART_Transmit(frame_data_x->UART_LORA, (uint8_t*)Buffer_Data, strlen(Buffer_Data), frame_data_x->time_out_uart);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681c      	ldr	r4, [r3, #0]
 800a8aa:	481b      	ldr	r0, [pc, #108]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a8ac:	f7f5 fc50 	bl	8000150 <strlen>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	8b9b      	ldrh	r3, [r3, #28]
 800a8b8:	4917      	ldr	r1, [pc, #92]	; (800a918 <Lora_Uart_Master_Send_Data_To_Salve+0x2d4>)
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f7fc fecf 	bl	800765e <HAL_UART_Transmit>
    HAL_UART_Transmit(frame_data_x->UART_LORA, (uint8_t*)Buffer_Check_Sum, strlen(Buffer_Check_Sum), frame_data_x->time_out_uart);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681c      	ldr	r4, [r3, #0]
 800a8c4:	4818      	ldr	r0, [pc, #96]	; (800a928 <Lora_Uart_Master_Send_Data_To_Salve+0x2e4>)
 800a8c6:	f7f5 fc43 	bl	8000150 <strlen>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	8b9b      	ldrh	r3, [r3, #28]
 800a8d2:	4915      	ldr	r1, [pc, #84]	; (800a928 <Lora_Uart_Master_Send_Data_To_Salve+0x2e4>)
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7fc fec2 	bl	800765e <HAL_UART_Transmit>

    return 0;
 800a8da:	2300      	movs	r3, #0

    #endif
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	371c      	adds	r7, #28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd90      	pop	{r4, r7, pc}
 800a8e4:	080112f4 	.word	0x080112f4
 800a8e8:	200019d8 	.word	0x200019d8
 800a8ec:	200019e4 	.word	0x200019e4
 800a8f0:	080112f8 	.word	0x080112f8
 800a8f4:	20001a70 	.word	0x20001a70
 800a8f8:	20001a80 	.word	0x20001a80
 800a8fc:	20001a90 	.word	0x20001a90
 800a900:	20001aa0 	.word	0x20001aa0
 800a904:	20001ab4 	.word	0x20001ab4
 800a908:	20001ac4 	.word	0x20001ac4
 800a90c:	20001ad4 	.word	0x20001ad4
 800a910:	20001ae4 	.word	0x20001ae4
 800a914:	20001af4 	.word	0x20001af4
 800a918:	200019f0 	.word	0x200019f0
 800a91c:	08011300 	.word	0x08011300
 800a920:	200019c8 	.word	0x200019c8
 800a924:	08011304 	.word	0x08011304
 800a928:	20001b04 	.word	0x20001b04
 800a92c:	08011308 	.word	0x08011308

0800a930 <Save_Value_Float_Flash>:
 * @param address 
 * @param value_reload 
 * @return uint8_t 
 */
static uint8_t Save_Value_Float_Flash(uint32_t address, float *array, uint8_t lenght_array)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	4613      	mov	r3, r2
 800a93c:	71fb      	strb	r3, [r7, #7]
	float value = 0;
 800a93e:	f04f 0300 	mov.w	r3, #0
 800a942:	613b      	str	r3, [r7, #16]
	for(uint8_t i =0; i < lenght_array; i++)
 800a944:	2300      	movs	r3, #0
 800a946:	75fb      	strb	r3, [r7, #23]
 800a948:	e026      	b.n	800a998 <Save_Value_Float_Flash+0x68>
	{
		value = Flash_Read_Float(address + 4*i);
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	461a      	mov	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4413      	add	r3, r2
 800a954:	4618      	mov	r0, r3
 800a956:	f7fd f8c8 	bl	8007aea <Flash_Read_Float>
 800a95a:	6138      	str	r0, [r7, #16]
		if(value == *(array + i))
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	4413      	add	r3, r2
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4619      	mov	r1, r3
 800a968:	6938      	ldr	r0, [r7, #16]
 800a96a:	f7f6 fb7f 	bl	800106c <__aeabi_fcmpeq>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10d      	bne.n	800a990 <Save_Value_Float_Flash+0x60>
			continue;
		else
		Flash_Write_Float(address + 4*i, *(array+i));
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	461a      	mov	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	18d0      	adds	r0, r2, r3
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	4413      	add	r3, r2
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4619      	mov	r1, r3
 800a98a:	f7fd f891 	bl	8007ab0 <Flash_Write_Float>
 800a98e:	e000      	b.n	800a992 <Save_Value_Float_Flash+0x62>
			continue;
 800a990:	bf00      	nop
	for(uint8_t i =0; i < lenght_array; i++)
 800a992:	7dfb      	ldrb	r3, [r7, #23]
 800a994:	3301      	adds	r3, #1
 800a996:	75fb      	strb	r3, [r7, #23]
 800a998:	7dfa      	ldrb	r2, [r7, #23]
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d3d4      	bcc.n	800a94a <Save_Value_Float_Flash+0x1a>
	}
	return 0;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <Read_Value_Float_Flash>:

/**
 * Read_Value_Float_Flash
*/
static uint8_t Read_Value_Float_Flash(uint32_t address, float *array, uint8_t lenght_array)
{
 800a9aa:	b590      	push	{r4, r7, lr}
 800a9ac:	b087      	sub	sp, #28
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	60b9      	str	r1, [r7, #8]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i =0; i < lenght_array; i++)
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	75fb      	strb	r3, [r7, #23]
 800a9bc:	e010      	b.n	800a9e0 <Read_Value_Float_Flash+0x36>
	{
		*(array+i) = Flash_Read_Float(address + 4 * i);
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	18d1      	adds	r1, r2, r3
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	18d4      	adds	r4, r2, r3
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	f7fd f88a 	bl	8007aea <Flash_Read_Float>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	6023      	str	r3, [r4, #0]
	for(uint8_t i =0; i < lenght_array; i++)
 800a9da:	7dfb      	ldrb	r3, [r7, #23]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	75fb      	strb	r3, [r7, #23]
 800a9e0:	7dfa      	ldrb	r2, [r7, #23]
 800a9e2:	79fb      	ldrb	r3, [r7, #7]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d3ea      	bcc.n	800a9be <Read_Value_Float_Flash+0x14>
	}
	return 0;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	371c      	adds	r7, #28
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd90      	pop	{r4, r7, pc}
	...

0800a9f4 <Init_Hpma115S0_Dust_Sensor>:
/**
 * @brief Init_Hpma115S0_Dust_Sensor
 * 
 */
static void Init_Hpma115S0_Dust_Sensor(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
	 Hpma115S0_Dust_Sensor_Init(&hpma115s0_sensor_01, &huart2);
 800a9f8:	4905      	ldr	r1, [pc, #20]	; (800aa10 <Init_Hpma115S0_Dust_Sensor+0x1c>)
 800a9fa:	4806      	ldr	r0, [pc, #24]	; (800aa14 <Init_Hpma115S0_Dust_Sensor+0x20>)
 800a9fc:	f7fd f884 	bl	8007b08 <Hpma115S0_Dust_Sensor_Init>
	 Hpma115S0_Start_Particle_Measure(&hpma115s0_sensor_01);
 800aa00:	4804      	ldr	r0, [pc, #16]	; (800aa14 <Init_Hpma115S0_Dust_Sensor+0x20>)
 800aa02:	f7fd f891 	bl	8007b28 <Hpma115S0_Start_Particle_Measure>
	 Hpma115S0_Enable_Auto_Send(&hpma115s0_sensor_01);
 800aa06:	4803      	ldr	r0, [pc, #12]	; (800aa14 <Init_Hpma115S0_Dust_Sensor+0x20>)
 800aa08:	f7fd f8b0 	bl	8007b6c <Hpma115S0_Enable_Auto_Send>
}
 800aa0c:	bf00      	nop
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20000728 	.word	0x20000728
 800aa14:	20001b14 	.word	0x20001b14

0800aa18 <Init_Mh_Z19B_Co2_Sensor>:
/**
 * @brief Init_Mh_Z19B_Co2_Sensor
 * 
 */
static void Init_Mh_Z19B_Co2_Sensor(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
	  Mh_Z19B_Co2_Sensor_Init(&mh_z19b_sensor_01, &huart1);
 800aa1c:	4904      	ldr	r1, [pc, #16]	; (800aa30 <Init_Mh_Z19B_Co2_Sensor+0x18>)
 800aa1e:	4805      	ldr	r0, [pc, #20]	; (800aa34 <Init_Mh_Z19B_Co2_Sensor+0x1c>)
 800aa20:	f7fd fa21 	bl	8007e66 <Mh_Z19B_Co2_Sensor_Init>
	  Sensor_Set_Auto_Calibration(&mh_z19b_sensor_01);
 800aa24:	4803      	ldr	r0, [pc, #12]	; (800aa34 <Init_Mh_Z19B_Co2_Sensor+0x1c>)
 800aa26:	f7fd fa2b 	bl	8007e80 <Sensor_Set_Auto_Calibration>
}
 800aa2a:	bf00      	nop
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	200006e4 	.word	0x200006e4
 800aa34:	20001b1c 	.word	0x20001b1c

0800aa38 <Init_DHT22>:
/**
 * @brief Init_DHT22
 * 
 */
static void Init_DHT22(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
	  DHT_Init(&DHT22_Sensor_1, &htim2, DHT22_Sensor_GPIO_Port, DHT22_Sensor_Pin);
 800aa3c:	2304      	movs	r3, #4
 800aa3e:	4a03      	ldr	r2, [pc, #12]	; (800aa4c <Init_DHT22+0x14>)
 800aa40:	4903      	ldr	r1, [pc, #12]	; (800aa50 <Init_DHT22+0x18>)
 800aa42:	4804      	ldr	r0, [pc, #16]	; (800aa54 <Init_DHT22+0x1c>)
 800aa44:	f7f7 fe10 	bl	8002668 <DHT_Init>
}
 800aa48:	bf00      	nop
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	40010c00 	.word	0x40010c00
 800aa50:	20000654 	.word	0x20000654
 800aa54:	20001b20 	.word	0x20001b20

0800aa58 <Init_So2_Sensor>:
/**
 * @brief Init_So2_Sensor
 * 
 */
static void Init_So2_Sensor(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af02      	add	r7, sp, #8
	  hx711_init(&so2_sensor, So2_Hx711_Clk_GPIO_Port, So2_Hx711_Clk_Pin, So2_Hx711_Data_GPIO_Port, So2_Hx711_Data_Pin);
 800aa5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <Init_So2_Sensor+0x44>)
 800aa66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aa6a:	490c      	ldr	r1, [pc, #48]	; (800aa9c <Init_So2_Sensor+0x44>)
 800aa6c:	480c      	ldr	r0, [pc, #48]	; (800aaa0 <Init_So2_Sensor+0x48>)
 800aa6e:	f003 f9f2 	bl	800de56 <hx711_init>
	  hx711_coef_set(&so2_sensor, 8368841.00); // read afer calibration
 800aa72:	490c      	ldr	r1, [pc, #48]	; (800aaa4 <Init_So2_Sensor+0x4c>)
 800aa74:	480a      	ldr	r0, [pc, #40]	; (800aaa0 <Init_So2_Sensor+0x48>)
 800aa76:	f003 fbdf 	bl	800e238 <hx711_coef_set>
	  hx711_tare(&so2_sensor, 10);
 800aa7a:	210a      	movs	r1, #10
 800aa7c:	4808      	ldr	r0, [pc, #32]	; (800aaa0 <Init_So2_Sensor+0x48>)
 800aa7e:	f003 fade 	bl	800e03e <hx711_tare>
	  hx711_coef_set(&so2_sensor, 1.0f);
 800aa82:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa86:	4806      	ldr	r0, [pc, #24]	; (800aaa0 <Init_So2_Sensor+0x48>)
 800aa88:	f003 fbd6 	bl	800e238 <hx711_coef_set>
	  hx711_set_gain(&so2_sensor, 64);
 800aa8c:	2140      	movs	r1, #64	; 0x40
 800aa8e:	4804      	ldr	r0, [pc, #16]	; (800aaa0 <Init_So2_Sensor+0x48>)
 800aa90:	f003 fa38 	bl	800df04 <hx711_set_gain>
}
 800aa94:	bf00      	nop
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	40011400 	.word	0x40011400
 800aaa0:	20001ba8 	.word	0x20001ba8
 800aaa4:	4aff6592 	.word	0x4aff6592

0800aaa8 <Init_BMP18_Air_Pressure>:
/**
 * @brief Init_BMP18_Air_Pressure
 * 
 */
static void Init_BMP18_Air_Pressure(void)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
	  BMP_180_Air_Pressure_Sensor_Init(&bmp180_sensor_01, &hi2c2, 0);
 800aaac:	2200      	movs	r2, #0
 800aaae:	4904      	ldr	r1, [pc, #16]	; (800aac0 <Init_BMP18_Air_Pressure+0x18>)
 800aab0:	4804      	ldr	r0, [pc, #16]	; (800aac4 <Init_BMP18_Air_Pressure+0x1c>)
 800aab2:	f7f6 fd0f 	bl	80014d4 <BMP_180_Air_Pressure_Sensor_Init>
	  BMP180_Start_Read_Calliberation_Data(&bmp180_sensor_01);
 800aab6:	4803      	ldr	r0, [pc, #12]	; (800aac4 <Init_BMP18_Air_Pressure+0x1c>)
 800aab8:	f7f6 fd61 	bl	800157e <BMP180_Start_Read_Calliberation_Data>
}
 800aabc:	bf00      	nop
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000600 	.word	0x20000600
 800aac4:	20001b34 	.word	0x20001b34

0800aac8 <Init_Sharp_G2y10_Sum_Dust_Sensor>:
/**
 * @brief Init_Sharp_G2y10_Sum_Dust_Sensor
 * 
 */
static void Init_Sharp_G2y10_Sum_Dust_Sensor(void)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af02      	add	r7, sp, #8
	   HAL_GPIO_WritePin(Ctl_AI_Dust_Sensor_GPIO_Port, Ctl_AI_Dust_Sensor_Pin, GPIO_PIN_RESET);
 800aace:	2200      	movs	r2, #0
 800aad0:	2102      	movs	r1, #2
 800aad2:	4807      	ldr	r0, [pc, #28]	; (800aaf0 <Init_Sharp_G2y10_Sum_Dust_Sensor+0x28>)
 800aad4:	f7fa fb23 	bl	800511e <HAL_GPIO_WritePin>
	   Sharp_G2y10_Dust_Sensor_Init(&sharpg2y_sensor01, &hadc1, &htim2, Ctl_AI_Dust_Sensor_GPIO_Port, Ctl_AI_Dust_Sensor_Pin);
 800aad8:	2302      	movs	r3, #2
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <Init_Sharp_G2y10_Sum_Dust_Sensor+0x28>)
 800aade:	4a05      	ldr	r2, [pc, #20]	; (800aaf4 <Init_Sharp_G2y10_Sum_Dust_Sensor+0x2c>)
 800aae0:	4905      	ldr	r1, [pc, #20]	; (800aaf8 <Init_Sharp_G2y10_Sum_Dust_Sensor+0x30>)
 800aae2:	4806      	ldr	r0, [pc, #24]	; (800aafc <Init_Sharp_G2y10_Sum_Dust_Sensor+0x34>)
 800aae4:	f002 ffb1 	bl	800da4a <Sharp_G2y10_Dust_Sensor_Init>
}
 800aae8:	bf00      	nop
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	40010c00 	.word	0x40010c00
 800aaf4:	20000654 	.word	0x20000654
 800aaf8:	2000058c 	.word	0x2000058c
 800aafc:	20001b80 	.word	0x20001b80

0800ab00 <Init_Lm335A_Temperature_Sensor>:
/**
 * @brief Init_Lm335A_Temperature_Sensor
 * 
 */
static void Init_Lm335A_Temperature_Sensor(void)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	af00      	add	r7, sp, #0
	   LM335A_Init(&lm335a_sensor, &hadc1);
 800ab04:	4902      	ldr	r1, [pc, #8]	; (800ab10 <Init_Lm335A_Temperature_Sensor+0x10>)
 800ab06:	4803      	ldr	r0, [pc, #12]	; (800ab14 <Init_Lm335A_Temperature_Sensor+0x14>)
 800ab08:	f7fd f9a0 	bl	8007e4c <LM335A_Init>
}
 800ab0c:	bf00      	nop
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	2000058c 	.word	0x2000058c
 800ab14:	20001bc0 	.word	0x20001bc0

0800ab18 <Selec_Option_Sensor_Name>:
 * @brief Selec_Option_Sensor_Name
 * 
 * @return uint8_t 
 */
static uint8_t Selec_Option_Sensor_Name(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_option_selec_sensor = 0;
	static __IO uint8_t check_option_mode = 0;
	/*check status input pin mode selec sensor. Before for each setup prameter*/
    if(HAL_GPIO_ReadPin(BUTTON_01_OPTION_GPIO_Port, BUTTON_01_OPTION_Pin) == GPIO_PIN_SET)
 800ab1c:	2108      	movs	r1, #8
 800ab1e:	4877      	ldr	r0, [pc, #476]	; (800acfc <Selec_Option_Sensor_Name+0x1e4>)
 800ab20:	f7fa fae6 	bl	80050f0 <HAL_GPIO_ReadPin>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d121      	bne.n	800ab6e <Selec_Option_Sensor_Name+0x56>
    {
    	HAL_Delay(100);
 800ab2a:	2064      	movs	r0, #100	; 0x64
 800ab2c:	f7f9 f8a0 	bl	8003c70 <HAL_Delay>
        if(HAL_GPIO_ReadPin(BUTTON_01_OPTION_GPIO_Port, BUTTON_01_OPTION_Pin) == GPIO_PIN_SET)
 800ab30:	2108      	movs	r1, #8
 800ab32:	4872      	ldr	r0, [pc, #456]	; (800acfc <Selec_Option_Sensor_Name+0x1e4>)
 800ab34:	f7fa fadc 	bl	80050f0 <HAL_GPIO_ReadPin>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d117      	bne.n	800ab6e <Selec_Option_Sensor_Name+0x56>
        {
        	CLCD_I2C_Clear(&lcd1);
 800ab3e:	4870      	ldr	r0, [pc, #448]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800ab40:	f7fd f974 	bl	8007e2c <CLCD_I2C_Clear>
            mode_option_selec_sensor++;
 800ab44:	4b6f      	ldr	r3, [pc, #444]	; (800ad04 <Selec_Option_Sensor_Name+0x1ec>)
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	4b6d      	ldr	r3, [pc, #436]	; (800ad04 <Selec_Option_Sensor_Name+0x1ec>)
 800ab50:	701a      	strb	r2, [r3, #0]
            flag_system.flag_02 = 1;
 800ab52:	4b6d      	ldr	r3, [pc, #436]	; (800ad08 <Selec_Option_Sensor_Name+0x1f0>)
 800ab54:	2201      	movs	r2, #1
 800ab56:	705a      	strb	r2, [r3, #1]
            if(mode_option_selec_sensor > MAX_MODE_SETUP)
 800ab58:	4b6a      	ldr	r3, [pc, #424]	; (800ad04 <Selec_Option_Sensor_Name+0x1ec>)
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b06      	cmp	r3, #6
 800ab60:	d905      	bls.n	800ab6e <Selec_Option_Sensor_Name+0x56>
            {
            	mode_option_selec_sensor = MIN_MODE_SETUP;
 800ab62:	4b68      	ldr	r3, [pc, #416]	; (800ad04 <Selec_Option_Sensor_Name+0x1ec>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	701a      	strb	r2, [r3, #0]
            	flag_system.flag_02 = 0;
 800ab68:	4b67      	ldr	r3, [pc, #412]	; (800ad08 <Selec_Option_Sensor_Name+0x1f0>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	705a      	strb	r2, [r3, #1]
            }
        }
    }
    switch (mode_option_selec_sensor)
 800ab6e:	4b65      	ldr	r3, [pc, #404]	; (800ad04 <Selec_Option_Sensor_Name+0x1ec>)
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	3b01      	subs	r3, #1
 800ab76:	2b05      	cmp	r3, #5
 800ab78:	f200 80ac 	bhi.w	800acd4 <Selec_Option_Sensor_Name+0x1bc>
 800ab7c:	a201      	add	r2, pc, #4	; (adr r2, 800ab84 <Selec_Option_Sensor_Name+0x6c>)
 800ab7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab82:	bf00      	nop
 800ab84:	0800ab9d 	.word	0x0800ab9d
 800ab88:	0800abd1 	.word	0x0800abd1
 800ab8c:	0800ac05 	.word	0x0800ac05
 800ab90:	0800ac39 	.word	0x0800ac39
 800ab94:	0800ac6d 	.word	0x0800ac6d
 800ab98:	0800aca1 	.word	0x0800aca1
//            Setup_Parameter_Pm2_5_Sensor();
//            HAL_Delay(50);
//            break;
		/*Setup prameter sum pm sensor*/
        case OPTION_02_SUM_PM_SENSOR:
			if(check_option_mode == 1)
 800ab9c:	4b5b      	ldr	r3, [pc, #364]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d105      	bne.n	800abb2 <Selec_Option_Sensor_Name+0x9a>
			{
        		HAL_TIM_Base_Stop_IT(&htim3);
 800aba6:	485a      	ldr	r0, [pc, #360]	; (800ad10 <Selec_Option_Sensor_Name+0x1f8>)
 800aba8:	f7fc f986 	bl	8006eb8 <HAL_TIM_Base_Stop_IT>
				check_option_mode = 2;
 800abac:	4b57      	ldr	r3, [pc, #348]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800abae:	2202      	movs	r2, #2
 800abb0:	701a      	strb	r2, [r3, #0]
			}
        	Send_Data_74HC595(0xFF);
 800abb2:	20ff      	movs	r0, #255	; 0xff
 800abb4:	f7f8 fff4 	bl	8003ba0 <Send_Data_74HC595>
			CLCD_I2C_SetCursor(&lcd1, 0, 3);
 800abb8:	2203      	movs	r2, #3
 800abba:	2100      	movs	r1, #0
 800abbc:	4850      	ldr	r0, [pc, #320]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800abbe:	f7fd f8cb 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Tab_1");
 800abc2:	4954      	ldr	r1, [pc, #336]	; (800ad14 <Selec_Option_Sensor_Name+0x1fc>)
 800abc4:	484e      	ldr	r0, [pc, #312]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800abc6:	f7fd f91a 	bl	8007dfe <CLCD_I2C_WriteString>
            Setup_Parameter_Sum_Pm_Sensor();
 800abca:	f000 f9df 	bl	800af8c <Setup_Parameter_Sum_Pm_Sensor>
            break;
 800abce:	e092      	b.n	800acf6 <Selec_Option_Sensor_Name+0x1de>

		/*Setup prameter co2 sensor*/
        case OPTION_03_CO2_SENSOR:
			if(check_option_mode == 2)
 800abd0:	4b4e      	ldr	r3, [pc, #312]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d105      	bne.n	800abe6 <Selec_Option_Sensor_Name+0xce>
			{
        		HAL_TIM_Base_Stop_IT(&htim3);
 800abda:	484d      	ldr	r0, [pc, #308]	; (800ad10 <Selec_Option_Sensor_Name+0x1f8>)
 800abdc:	f7fc f96c 	bl	8006eb8 <HAL_TIM_Base_Stop_IT>
				check_option_mode = 3;
 800abe0:	4b4a      	ldr	r3, [pc, #296]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800abe2:	2203      	movs	r2, #3
 800abe4:	701a      	strb	r2, [r3, #0]
			}
        	Send_Data_74HC595(0xFF);
 800abe6:	20ff      	movs	r0, #255	; 0xff
 800abe8:	f7f8 ffda 	bl	8003ba0 <Send_Data_74HC595>
			CLCD_I2C_SetCursor(&lcd1, 0, 3);
 800abec:	2203      	movs	r2, #3
 800abee:	2100      	movs	r1, #0
 800abf0:	4843      	ldr	r0, [pc, #268]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800abf2:	f7fd f8b1 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Tab_2");
 800abf6:	4948      	ldr	r1, [pc, #288]	; (800ad18 <Selec_Option_Sensor_Name+0x200>)
 800abf8:	4841      	ldr	r0, [pc, #260]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800abfa:	f7fd f900 	bl	8007dfe <CLCD_I2C_WriteString>
			Setup_Parameter_Co2_Sensor();
 800abfe:	f000 fc39 	bl	800b474 <Setup_Parameter_Co2_Sensor>
            break;
 800ac02:	e078      	b.n	800acf6 <Selec_Option_Sensor_Name+0x1de>
        
		/*Setup prameter so2 sensor*/
        case OPTION_04_SO2_SENSOR:
        	if(check_option_mode == 3)
 800ac04:	4b41      	ldr	r3, [pc, #260]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d105      	bne.n	800ac1a <Selec_Option_Sensor_Name+0x102>
			{
        		HAL_TIM_Base_Stop_IT(&htim3);
 800ac0e:	4840      	ldr	r0, [pc, #256]	; (800ad10 <Selec_Option_Sensor_Name+0x1f8>)
 800ac10:	f7fc f952 	bl	8006eb8 <HAL_TIM_Base_Stop_IT>
				check_option_mode = 4;
 800ac14:	4b3d      	ldr	r3, [pc, #244]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800ac16:	2204      	movs	r2, #4
 800ac18:	701a      	strb	r2, [r3, #0]
			}
        	Send_Data_74HC595(0xFF);
 800ac1a:	20ff      	movs	r0, #255	; 0xff
 800ac1c:	f7f8 ffc0 	bl	8003ba0 <Send_Data_74HC595>
			CLCD_I2C_SetCursor(&lcd1, 0, 3);
 800ac20:	2203      	movs	r2, #3
 800ac22:	2100      	movs	r1, #0
 800ac24:	4836      	ldr	r0, [pc, #216]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800ac26:	f7fd f897 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Tab_3");
 800ac2a:	493c      	ldr	r1, [pc, #240]	; (800ad1c <Selec_Option_Sensor_Name+0x204>)
 800ac2c:	4834      	ldr	r0, [pc, #208]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800ac2e:	f7fd f8e6 	bl	8007dfe <CLCD_I2C_WriteString>
            Setup_Parameter_So2_Sensor();
 800ac32:	f000 fe93 	bl	800b95c <Setup_Parameter_So2_Sensor>
            break;
 800ac36:	e05e      	b.n	800acf6 <Selec_Option_Sensor_Name+0x1de>

		/*Setup prameter temperature sensor*/
        case OPTION_05_TEMPERATURE_SENSOR:
        	if(check_option_mode == 5)
 800ac38:	4b34      	ldr	r3, [pc, #208]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	d105      	bne.n	800ac4e <Selec_Option_Sensor_Name+0x136>
			{
        		HAL_TIM_Base_Stop_IT(&htim3);
 800ac42:	4833      	ldr	r0, [pc, #204]	; (800ad10 <Selec_Option_Sensor_Name+0x1f8>)
 800ac44:	f7fc f938 	bl	8006eb8 <HAL_TIM_Base_Stop_IT>
				check_option_mode = 6;
 800ac48:	4b30      	ldr	r3, [pc, #192]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800ac4a:	2206      	movs	r2, #6
 800ac4c:	701a      	strb	r2, [r3, #0]
			}
        	Send_Data_74HC595(0xFF);
 800ac4e:	20ff      	movs	r0, #255	; 0xff
 800ac50:	f7f8 ffa6 	bl	8003ba0 <Send_Data_74HC595>
			CLCD_I2C_SetCursor(&lcd1, 0, 3);
 800ac54:	2203      	movs	r2, #3
 800ac56:	2100      	movs	r1, #0
 800ac58:	4829      	ldr	r0, [pc, #164]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800ac5a:	f7fd f87d 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Tab_4");
 800ac5e:	4930      	ldr	r1, [pc, #192]	; (800ad20 <Selec_Option_Sensor_Name+0x208>)
 800ac60:	4827      	ldr	r0, [pc, #156]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800ac62:	f7fd f8cc 	bl	8007dfe <CLCD_I2C_WriteString>
            Setup_Parameter_Temperature_Sensor();
 800ac66:	f001 fb71 	bl	800c34c <Setup_Parameter_Temperature_Sensor>
             break;
 800ac6a:	e044      	b.n	800acf6 <Selec_Option_Sensor_Name+0x1de>

		/*Setup prameter humidity sensor*/
		case OPTION_06_HUMIDITY_SENSOR:
			if(check_option_mode == 7)
 800ac6c:	4b27      	ldr	r3, [pc, #156]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b07      	cmp	r3, #7
 800ac74:	d105      	bne.n	800ac82 <Selec_Option_Sensor_Name+0x16a>
			{
        		HAL_TIM_Base_Stop_IT(&htim3);
 800ac76:	4826      	ldr	r0, [pc, #152]	; (800ad10 <Selec_Option_Sensor_Name+0x1f8>)
 800ac78:	f7fc f91e 	bl	8006eb8 <HAL_TIM_Base_Stop_IT>
				check_option_mode = 8;
 800ac7c:	4b23      	ldr	r3, [pc, #140]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800ac7e:	2208      	movs	r2, #8
 800ac80:	701a      	strb	r2, [r3, #0]
			}
			Send_Data_74HC595(0xFF);
 800ac82:	20ff      	movs	r0, #255	; 0xff
 800ac84:	f7f8 ff8c 	bl	8003ba0 <Send_Data_74HC595>
			CLCD_I2C_SetCursor(&lcd1, 0, 3);
 800ac88:	2203      	movs	r2, #3
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	481c      	ldr	r0, [pc, #112]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800ac8e:	f7fd f863 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Tab_5");
 800ac92:	4924      	ldr	r1, [pc, #144]	; (800ad24 <Selec_Option_Sensor_Name+0x20c>)
 800ac94:	481a      	ldr	r0, [pc, #104]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800ac96:	f7fd f8b2 	bl	8007dfe <CLCD_I2C_WriteString>
            Setup_Parameter_Humidity_Sensor();
 800ac9a:	f001 f8d3 	bl	800be44 <Setup_Parameter_Humidity_Sensor>
            break;
 800ac9e:	e02a      	b.n	800acf6 <Selec_Option_Sensor_Name+0x1de>

		/*Setup monitor group sensor*/
		case OPTION_07_MONITOR_GROUP_SENSOR:
            if(check_option_mode == 9)
 800aca0:	4b1a      	ldr	r3, [pc, #104]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	2b09      	cmp	r3, #9
 800aca8:	d105      	bne.n	800acb6 <Selec_Option_Sensor_Name+0x19e>
			{
        		HAL_TIM_Base_Stop_IT(&htim3);
 800acaa:	4819      	ldr	r0, [pc, #100]	; (800ad10 <Selec_Option_Sensor_Name+0x1f8>)
 800acac:	f7fc f904 	bl	8006eb8 <HAL_TIM_Base_Stop_IT>
				check_option_mode = 0;
 800acb0:	4b16      	ldr	r3, [pc, #88]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	701a      	strb	r2, [r3, #0]
			}
        	Send_Data_74HC595(0xFF);
 800acb6:	20ff      	movs	r0, #255	; 0xff
 800acb8:	f7f8 ff72 	bl	8003ba0 <Send_Data_74HC595>
			CLCD_I2C_SetCursor(&lcd1, 0, 3);
 800acbc:	2203      	movs	r2, #3
 800acbe:	2100      	movs	r1, #0
 800acc0:	480f      	ldr	r0, [pc, #60]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800acc2:	f7fd f849 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Tab_6");
 800acc6:	4918      	ldr	r1, [pc, #96]	; (800ad28 <Selec_Option_Sensor_Name+0x210>)
 800acc8:	480d      	ldr	r0, [pc, #52]	; (800ad00 <Selec_Option_Sensor_Name+0x1e8>)
 800acca:	f7fd f898 	bl	8007dfe <CLCD_I2C_WriteString>
			Monitor_Group_Sensor();
 800acce:	f000 f8ff 	bl	800aed0 <Monitor_Group_Sensor>
			break;
 800acd2:	e010      	b.n	800acf6 <Selec_Option_Sensor_Name+0x1de>
        
		/*default mode */
        default:
			/*Start timer timer sensor*/
			if(check_option_mode == 0)
 800acd4:	4b0d      	ldr	r3, [pc, #52]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d105      	bne.n	800acea <Selec_Option_Sensor_Name+0x1d2>
			{
				HAL_TIM_Base_Start_IT(&htim3);
 800acde:	480c      	ldr	r0, [pc, #48]	; (800ad10 <Selec_Option_Sensor_Name+0x1f8>)
 800ace0:	f7fc f898 	bl	8006e14 <HAL_TIM_Base_Start_IT>
				check_option_mode = 1;
 800ace4:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <Selec_Option_Sensor_Name+0x1f4>)
 800ace6:	2201      	movs	r2, #1
 800ace8:	701a      	strb	r2, [r3, #0]
			}
        	Run_Normal();
 800acea:	f002 fd9b 	bl	800d824 <Run_Normal>
			/*setup variable: mode_option_selec_sensor = 0*/
			mode_option_selec_sensor = 0;
 800acee:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <Selec_Option_Sensor_Name+0x1ec>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	701a      	strb	r2, [r3, #0]
            break;
 800acf4:	bf00      	nop
    }
    return 0;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	40011400 	.word	0x40011400
 800ad00:	2000086c 	.word	0x2000086c
 800ad04:	20001c2f 	.word	0x20001c2f
 800ad08:	20001c2c 	.word	0x20001c2c
 800ad0c:	20001c30 	.word	0x20001c30
 800ad10:	2000069c 	.word	0x2000069c
 800ad14:	08011314 	.word	0x08011314
 800ad18:	0801131c 	.word	0x0801131c
 800ad1c:	08011324 	.word	0x08011324
 800ad20:	0801132c 	.word	0x0801132c
 800ad24:	08011334 	.word	0x08011334
 800ad28:	0801133c 	.word	0x0801133c

0800ad2c <Save_Parameter_Sensor>:
/**
 * @brief Save_Parameter_Sensor
 * 
 */
static void Save_Parameter_Sensor(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_save_parameter_sensor = 0;
	static __IO uint8_t check = 0;
	/*Check button save prameter into flash*/
	if(HAL_GPIO_ReadPin(BUTTON_02_SAVE_GPIO_Port, BUTTON_02_SAVE_Pin) == GPIO_PIN_SET)
 800ad30:	2110      	movs	r1, #16
 800ad32:	4848      	ldr	r0, [pc, #288]	; (800ae54 <Save_Parameter_Sensor+0x128>)
 800ad34:	f7fa f9dc 	bl	80050f0 <HAL_GPIO_ReadPin>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d121      	bne.n	800ad82 <Save_Parameter_Sensor+0x56>
	{
		HAL_Delay(100);
 800ad3e:	2064      	movs	r0, #100	; 0x64
 800ad40:	f7f8 ff96 	bl	8003c70 <HAL_Delay>
		/*Check button save prameter into flash*/
		if(HAL_GPIO_ReadPin(BUTTON_02_SAVE_GPIO_Port, BUTTON_02_SAVE_Pin) == GPIO_PIN_SET)
 800ad44:	2110      	movs	r1, #16
 800ad46:	4843      	ldr	r0, [pc, #268]	; (800ae54 <Save_Parameter_Sensor+0x128>)
 800ad48:	f7fa f9d2 	bl	80050f0 <HAL_GPIO_ReadPin>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d117      	bne.n	800ad82 <Save_Parameter_Sensor+0x56>
		{
			/*Clear LCD*/
			CLCD_I2C_Clear(&lcd1);
 800ad52:	4841      	ldr	r0, [pc, #260]	; (800ae58 <Save_Parameter_Sensor+0x12c>)
 800ad54:	f7fd f86a 	bl	8007e2c <CLCD_I2C_Clear>
			/*variable up*/
			mode_save_parameter_sensor++;
 800ad58:	4b40      	ldr	r3, [pc, #256]	; (800ae5c <Save_Parameter_Sensor+0x130>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	3301      	adds	r3, #1
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	4b3e      	ldr	r3, [pc, #248]	; (800ae5c <Save_Parameter_Sensor+0x130>)
 800ad64:	701a      	strb	r2, [r3, #0]
			/*set up flag global*/
			flag_system.flag_01  = 1;
 800ad66:	4b3e      	ldr	r3, [pc, #248]	; (800ae60 <Save_Parameter_Sensor+0x134>)
 800ad68:	2201      	movs	r2, #1
 800ad6a:	701a      	strb	r2, [r3, #0]
			if(mode_save_parameter_sensor > 1)
 800ad6c:	4b3b      	ldr	r3, [pc, #236]	; (800ae5c <Save_Parameter_Sensor+0x130>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d905      	bls.n	800ad82 <Save_Parameter_Sensor+0x56>
			{
				/*variable down*/
				mode_save_parameter_sensor = 0;
 800ad76:	4b39      	ldr	r3, [pc, #228]	; (800ae5c <Save_Parameter_Sensor+0x130>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	701a      	strb	r2, [r3, #0]
				/*set up flag global*/
				flag_system.flag_01  = 0;
 800ad7c:	4b38      	ldr	r3, [pc, #224]	; (800ae60 <Save_Parameter_Sensor+0x134>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]
		}
	}
	/**
	 * check mode
	*/
	switch (mode_save_parameter_sensor)
 800ad82:	4b36      	ldr	r3, [pc, #216]	; (800ae5c <Save_Parameter_Sensor+0x130>)
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d15c      	bne.n	800ae46 <Save_Parameter_Sensor+0x11a>
	{
		case 1:
				if(check == 1)
 800ad8c:	4b35      	ldr	r3, [pc, #212]	; (800ae64 <Save_Parameter_Sensor+0x138>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d15b      	bne.n	800ae4e <Save_Parameter_Sensor+0x122>
				{
					/*Lcd setup cursor*/
					CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800ad96:	2200      	movs	r2, #0
 800ad98:	2100      	movs	r1, #0
 800ad9a:	482f      	ldr	r0, [pc, #188]	; (800ae58 <Save_Parameter_Sensor+0x12c>)
 800ad9c:	f7fc ffdc 	bl	8007d58 <CLCD_I2C_SetCursor>
					/*Lcd send string*/
					CLCD_I2C_WriteString(&lcd1, "SaveParameter");
 800ada0:	4931      	ldr	r1, [pc, #196]	; (800ae68 <Save_Parameter_Sensor+0x13c>)
 800ada2:	482d      	ldr	r0, [pc, #180]	; (800ae58 <Save_Parameter_Sensor+0x12c>)
 800ada4:	f7fd f82b 	bl	8007dfe <CLCD_I2C_WriteString>

					/*Erase flash page*/
					Flash_Erase(START_BASE_ADDRESS_PM2_5_SENSOR);
 800ada8:	4830      	ldr	r0, [pc, #192]	; (800ae6c <Save_Parameter_Sensor+0x140>)
 800adaa:	f7fc fe65 	bl	8007a78 <Flash_Erase>
					/*Erase flash page*/
					Flash_Erase(START_BASE_ADDRESS_PARAMETER_PM2_5);
 800adae:	4830      	ldr	r0, [pc, #192]	; (800ae70 <Save_Parameter_Sensor+0x144>)
 800adb0:	f7fc fe62 	bl	8007a78 <Flash_Erase>

					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_PM2_5_SENSOR, x_input_pm2_5_value, sizeof(x_input_pm2_5_value)/sizeof(float));
 800adb4:	2203      	movs	r2, #3
 800adb6:	492f      	ldr	r1, [pc, #188]	; (800ae74 <Save_Parameter_Sensor+0x148>)
 800adb8:	482c      	ldr	r0, [pc, #176]	; (800ae6c <Save_Parameter_Sensor+0x140>)
 800adba:	f7ff fdb9 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_SUM_PM_SENSOR, x_input_sum_pm_value,  sizeof(x_input_sum_pm_value)/sizeof(float));
 800adbe:	2203      	movs	r2, #3
 800adc0:	492d      	ldr	r1, [pc, #180]	; (800ae78 <Save_Parameter_Sensor+0x14c>)
 800adc2:	482e      	ldr	r0, [pc, #184]	; (800ae7c <Save_Parameter_Sensor+0x150>)
 800adc4:	f7ff fdb4 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_CO2_SENSOR, x_input_co2_value,  sizeof(x_input_co2_value)/sizeof(float));
 800adc8:	2203      	movs	r2, #3
 800adca:	492d      	ldr	r1, [pc, #180]	; (800ae80 <Save_Parameter_Sensor+0x154>)
 800adcc:	482d      	ldr	r0, [pc, #180]	; (800ae84 <Save_Parameter_Sensor+0x158>)
 800adce:	f7ff fdaf 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_SO2_PM_VALUE, x_input_so2_pm_value,  sizeof(x_input_so2_pm_value)/sizeof(float));
 800add2:	2203      	movs	r2, #3
 800add4:	492c      	ldr	r1, [pc, #176]	; (800ae88 <Save_Parameter_Sensor+0x15c>)
 800add6:	482d      	ldr	r0, [pc, #180]	; (800ae8c <Save_Parameter_Sensor+0x160>)
 800add8:	f7ff fdaa 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_TEMPERATURE, x_input_temperature_value,  sizeof(x_input_temperature_value)/sizeof(float));
 800addc:	2203      	movs	r2, #3
 800adde:	492c      	ldr	r1, [pc, #176]	; (800ae90 <Save_Parameter_Sensor+0x164>)
 800ade0:	482c      	ldr	r0, [pc, #176]	; (800ae94 <Save_Parameter_Sensor+0x168>)
 800ade2:	f7ff fda5 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_HUMIDITY, x_input_humidity_value,  sizeof(x_input_humidity_value)/sizeof(float));
 800ade6:	2203      	movs	r2, #3
 800ade8:	492b      	ldr	r1, [pc, #172]	; (800ae98 <Save_Parameter_Sensor+0x16c>)
 800adea:	482c      	ldr	r0, [pc, #176]	; (800ae9c <Save_Parameter_Sensor+0x170>)
 800adec:	f7ff fda0 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_PM2_5, y_static_input_pm2_5_value,  sizeof(y_static_input_pm2_5_value)/sizeof(float));
 800adf0:	2203      	movs	r2, #3
 800adf2:	492b      	ldr	r1, [pc, #172]	; (800aea0 <Save_Parameter_Sensor+0x174>)
 800adf4:	481e      	ldr	r0, [pc, #120]	; (800ae70 <Save_Parameter_Sensor+0x144>)
 800adf6:	f7ff fd9b 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_SUM_PM, y_static_input_sum_pm_value,  sizeof(y_static_input_sum_pm_value)/sizeof(float));
 800adfa:	2203      	movs	r2, #3
 800adfc:	4929      	ldr	r1, [pc, #164]	; (800aea4 <Save_Parameter_Sensor+0x178>)
 800adfe:	482a      	ldr	r0, [pc, #168]	; (800aea8 <Save_Parameter_Sensor+0x17c>)
 800ae00:	f7ff fd96 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_CO2, y_static_input_co2_value,  sizeof(y_static_input_co2_value)/sizeof(float));
 800ae04:	2203      	movs	r2, #3
 800ae06:	4929      	ldr	r1, [pc, #164]	; (800aeac <Save_Parameter_Sensor+0x180>)
 800ae08:	4829      	ldr	r0, [pc, #164]	; (800aeb0 <Save_Parameter_Sensor+0x184>)
 800ae0a:	f7ff fd91 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_SO2, y_static_input_so2_value,  sizeof(y_static_input_so2_value)/sizeof(float));
 800ae0e:	2203      	movs	r2, #3
 800ae10:	4928      	ldr	r1, [pc, #160]	; (800aeb4 <Save_Parameter_Sensor+0x188>)
 800ae12:	4829      	ldr	r0, [pc, #164]	; (800aeb8 <Save_Parameter_Sensor+0x18c>)
 800ae14:	f7ff fd8c 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_TEMPERATURE, y_static_input_temperature_value,  sizeof(y_static_input_temperature_value)/sizeof(float));
 800ae18:	2203      	movs	r2, #3
 800ae1a:	4928      	ldr	r1, [pc, #160]	; (800aebc <Save_Parameter_Sensor+0x190>)
 800ae1c:	4828      	ldr	r0, [pc, #160]	; (800aec0 <Save_Parameter_Sensor+0x194>)
 800ae1e:	f7ff fd87 	bl	800a930 <Save_Value_Float_Flash>
					/*Save Parameter data type float*/
					Save_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_HUMIDITY, y_static_input_humidity_value,  sizeof(y_static_input_humidity_value)/sizeof(float));
 800ae22:	2203      	movs	r2, #3
 800ae24:	4927      	ldr	r1, [pc, #156]	; (800aec4 <Save_Parameter_Sensor+0x198>)
 800ae26:	4828      	ldr	r0, [pc, #160]	; (800aec8 <Save_Parameter_Sensor+0x19c>)
 800ae28:	f7ff fd82 	bl	800a930 <Save_Value_Float_Flash>

					/*Lcd setup cursor*/
					CLCD_I2C_SetCursor(&lcd1, 0, 1);
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	2100      	movs	r1, #0
 800ae30:	4809      	ldr	r0, [pc, #36]	; (800ae58 <Save_Parameter_Sensor+0x12c>)
 800ae32:	f7fc ff91 	bl	8007d58 <CLCD_I2C_SetCursor>
					/*Lcd send string*/
					CLCD_I2C_WriteString(&lcd1,"Done");
 800ae36:	4925      	ldr	r1, [pc, #148]	; (800aecc <Save_Parameter_Sensor+0x1a0>)
 800ae38:	4807      	ldr	r0, [pc, #28]	; (800ae58 <Save_Parameter_Sensor+0x12c>)
 800ae3a:	f7fc ffe0 	bl	8007dfe <CLCD_I2C_WriteString>
					check = 2;
 800ae3e:	4b09      	ldr	r3, [pc, #36]	; (800ae64 <Save_Parameter_Sensor+0x138>)
 800ae40:	2202      	movs	r2, #2
 800ae42:	701a      	strb	r2, [r3, #0]
				}
				break;
 800ae44:	e003      	b.n	800ae4e <Save_Parameter_Sensor+0x122>

		default:
			check = 1;
 800ae46:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <Save_Parameter_Sensor+0x138>)
 800ae48:	2201      	movs	r2, #1
 800ae4a:	701a      	strb	r2, [r3, #0]
			break;
 800ae4c:	e000      	b.n	800ae50 <Save_Parameter_Sensor+0x124>
				break;
 800ae4e:	bf00      	nop
	}
}
 800ae50:	bf00      	nop
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	40011400 	.word	0x40011400
 800ae58:	2000086c 	.word	0x2000086c
 800ae5c:	20001c31 	.word	0x20001c31
 800ae60:	20001c2c 	.word	0x20001c2c
 800ae64:	20001c32 	.word	0x20001c32
 800ae68:	08011344 	.word	0x08011344
 800ae6c:	0801fc00 	.word	0x0801fc00
 800ae70:	0801f800 	.word	0x0801f800
 800ae74:	20001bdc 	.word	0x20001bdc
 800ae78:	20001be8 	.word	0x20001be8
 800ae7c:	0801fc96 	.word	0x0801fc96
 800ae80:	20001bf4 	.word	0x20001bf4
 800ae84:	0801fd2c 	.word	0x0801fd2c
 800ae88:	20001c00 	.word	0x20001c00
 800ae8c:	0801fdc2 	.word	0x0801fdc2
 800ae90:	20001c0c 	.word	0x20001c0c
 800ae94:	0801fe58 	.word	0x0801fe58
 800ae98:	20001c18 	.word	0x20001c18
 800ae9c:	0801feee 	.word	0x0801feee
 800aea0:	20000030 	.word	0x20000030
 800aea4:	2000003c 	.word	0x2000003c
 800aea8:	0801f896 	.word	0x0801f896
 800aeac:	20000048 	.word	0x20000048
 800aeb0:	0801f92c 	.word	0x0801f92c
 800aeb4:	20000054 	.word	0x20000054
 800aeb8:	0801f9c2 	.word	0x0801f9c2
 800aebc:	20000060 	.word	0x20000060
 800aec0:	0801fa58 	.word	0x0801fa58
 800aec4:	2000006c 	.word	0x2000006c
 800aec8:	0801faee 	.word	0x0801faee
 800aecc:	08011354 	.word	0x08011354

0800aed0 <Monitor_Group_Sensor>:
/**
 * @brief Monitor_Group_Sensor
 * 
 */
static void Monitor_Group_Sensor(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_monitor_Gruop_Sensor = 0;
//	static float value = 0;
	/*Check button monitor prameter sensor display to LCD*/
	if(HAL_GPIO_ReadPin(BUTTON_03_MONITOR_GPIO_Port, BUTTON_03_MONITOR_Pin) == GPIO_PIN_SET)
 800aed4:	2120      	movs	r1, #32
 800aed6:	4829      	ldr	r0, [pc, #164]	; (800af7c <Monitor_Group_Sensor+0xac>)
 800aed8:	f7fa f90a 	bl	80050f0 <HAL_GPIO_ReadPin>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d11b      	bne.n	800af1a <Monitor_Group_Sensor+0x4a>
	{
		HAL_Delay(100);
 800aee2:	2064      	movs	r0, #100	; 0x64
 800aee4:	f7f8 fec4 	bl	8003c70 <HAL_Delay>
		/*Check button monitor prameter sensor display to LCD*/
		if(HAL_GPIO_ReadPin(BUTTON_03_MONITOR_GPIO_Port, BUTTON_03_MONITOR_Pin) == GPIO_PIN_SET)
 800aee8:	2120      	movs	r1, #32
 800aeea:	4824      	ldr	r0, [pc, #144]	; (800af7c <Monitor_Group_Sensor+0xac>)
 800aeec:	f7fa f900 	bl	80050f0 <HAL_GPIO_ReadPin>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d111      	bne.n	800af1a <Monitor_Group_Sensor+0x4a>
		{
			/*Lcd Clear*/
			CLCD_I2C_Clear(&lcd1);
 800aef6:	4822      	ldr	r0, [pc, #136]	; (800af80 <Monitor_Group_Sensor+0xb0>)
 800aef8:	f7fc ff98 	bl	8007e2c <CLCD_I2C_Clear>
			/*Variable up*/
			mode_monitor_Gruop_Sensor++;
 800aefc:	4b21      	ldr	r3, [pc, #132]	; (800af84 <Monitor_Group_Sensor+0xb4>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	3301      	adds	r3, #1
 800af04:	b2da      	uxtb	r2, r3
 800af06:	4b1f      	ldr	r3, [pc, #124]	; (800af84 <Monitor_Group_Sensor+0xb4>)
 800af08:	701a      	strb	r2, [r3, #0]
			if(mode_monitor_Gruop_Sensor > MAX_MODE_MONITOR)
 800af0a:	4b1e      	ldr	r3, [pc, #120]	; (800af84 <Monitor_Group_Sensor+0xb4>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b05      	cmp	r3, #5
 800af12:	d902      	bls.n	800af1a <Monitor_Group_Sensor+0x4a>
			{
				/*Variable mode_monitor_Gruop_Sensor = 0*/
				mode_monitor_Gruop_Sensor = MIN_MODE_MONITOR;
 800af14:	4b1b      	ldr	r3, [pc, #108]	; (800af84 <Monitor_Group_Sensor+0xb4>)
 800af16:	2200      	movs	r2, #0
 800af18:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	switch (mode_monitor_Gruop_Sensor)
 800af1a:	4b1a      	ldr	r3, [pc, #104]	; (800af84 <Monitor_Group_Sensor+0xb4>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	3b01      	subs	r3, #1
 800af22:	2b04      	cmp	r3, #4
 800af24:	d81b      	bhi.n	800af5e <Monitor_Group_Sensor+0x8e>
 800af26:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <Monitor_Group_Sensor+0x5c>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800af41 	.word	0x0800af41
 800af30:	0800af47 	.word	0x0800af47
 800af34:	0800af4d 	.word	0x0800af4d
 800af38:	0800af53 	.word	0x0800af53
 800af3c:	0800af59 	.word	0x0800af59
//			HAL_Delay(500);
//			break;

		/* monitor sum pm sensor*/
		case SUM_PM_MONITOR:
			Output_Value_Sum_Pm_Sensor();
 800af40:	f001 fc88 	bl	800c854 <Output_Value_Sum_Pm_Sensor>
			break;
 800af44:	e018      	b.n	800af78 <Monitor_Group_Sensor+0xa8>

		/* monitor co2 sensor*/
		case CO2_MONITOR:
			Output_Value_Co2_Sensor();
 800af46:	f001 fde5 	bl	800cb14 <Output_Value_Co2_Sensor>
			break;
 800af4a:	e015      	b.n	800af78 <Monitor_Group_Sensor+0xa8>

		/* monitor so2 sensor*/
		case SO2_MONITOR:
			Output_Value_So2_Sensor();
 800af4c:	f001 ff42 	bl	800cdd4 <Output_Value_So2_Sensor>
			break;
 800af50:	e012      	b.n	800af78 <Monitor_Group_Sensor+0xa8>

		/* monitor humidity sensor*/
		case HUMIDITY_MONITOR:
			Output_Value_Humidity_Sensor();
 800af52:	f002 f89f 	bl	800d094 <Output_Value_Humidity_Sensor>
			break;
 800af56:	e00f      	b.n	800af78 <Monitor_Group_Sensor+0xa8>

		/* monitor humidity sensor*/
		case TEMPERATURE:
			Output_Value_Temperature_Sensor();
 800af58:	f002 fa02 	bl	800d360 <Output_Value_Temperature_Sensor>
			break;
 800af5c:	e00c      	b.n	800af78 <Monitor_Group_Sensor+0xa8>

	/*Defaulr mode*/
	default:
		/*LCD set cursor*/
		CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800af5e:	2200      	movs	r2, #0
 800af60:	2100      	movs	r1, #0
 800af62:	4807      	ldr	r0, [pc, #28]	; (800af80 <Monitor_Group_Sensor+0xb0>)
 800af64:	f7fc fef8 	bl	8007d58 <CLCD_I2C_SetCursor>
		/*LCd Send string*/
		CLCD_I2C_WriteString(&lcd1,"Monitor_Sensor");
 800af68:	4907      	ldr	r1, [pc, #28]	; (800af88 <Monitor_Group_Sensor+0xb8>)
 800af6a:	4805      	ldr	r0, [pc, #20]	; (800af80 <Monitor_Group_Sensor+0xb0>)
 800af6c:	f7fc ff47 	bl	8007dfe <CLCD_I2C_WriteString>
		HAL_Delay(50);
 800af70:	2032      	movs	r0, #50	; 0x32
 800af72:	f7f8 fe7d 	bl	8003c70 <HAL_Delay>
		break;
 800af76:	bf00      	nop
	}
}
 800af78:	bf00      	nop
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	40011400 	.word	0x40011400
 800af80:	2000086c 	.word	0x2000086c
 800af84:	20001c33 	.word	0x20001c33
 800af88:	0801135c 	.word	0x0801135c

0800af8c <Setup_Parameter_Sum_Pm_Sensor>:
 * @brief Setup_Parameter_Sum_Pm_Sensor
 * 
 * @return uint8_t 
 */
static uint8_t Setup_Parameter_Sum_Pm_Sensor(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_setup_parameter_sum_pm_sensor = 0;
	static __IO uint8_t check_02 = 0;
	uint32_t time_wake_up_02 = HAL_GetTick();
 800af92:	f7f8 fe63 	bl	8003c5c <HAL_GetTick>
 800af96:	6038      	str	r0, [r7, #0]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800af98:	2140      	movs	r1, #64	; 0x40
 800af9a:	48ad      	ldr	r0, [pc, #692]	; (800b250 <Setup_Parameter_Sum_Pm_Sensor+0x2c4>)
 800af9c:	f7fa f8a8 	bl	80050f0 <HAL_GPIO_ReadPin>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d11b      	bne.n	800afde <Setup_Parameter_Sum_Pm_Sensor+0x52>
	{
		HAL_Delay(100);
 800afa6:	2064      	movs	r0, #100	; 0x64
 800afa8:	f7f8 fe62 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800afac:	2140      	movs	r1, #64	; 0x40
 800afae:	48a8      	ldr	r0, [pc, #672]	; (800b250 <Setup_Parameter_Sum_Pm_Sensor+0x2c4>)
 800afb0:	f7fa f89e 	bl	80050f0 <HAL_GPIO_ReadPin>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d111      	bne.n	800afde <Setup_Parameter_Sum_Pm_Sensor+0x52>
		{
			/*Display clear*/
			CLCD_I2C_Clear(&lcd1);
 800afba:	48a6      	ldr	r0, [pc, #664]	; (800b254 <Setup_Parameter_Sum_Pm_Sensor+0x2c8>)
 800afbc:	f7fc ff36 	bl	8007e2c <CLCD_I2C_Clear>
			/*variable up */
			mode_setup_parameter_sum_pm_sensor++;
 800afc0:	4ba5      	ldr	r3, [pc, #660]	; (800b258 <Setup_Parameter_Sum_Pm_Sensor+0x2cc>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	3301      	adds	r3, #1
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	4ba3      	ldr	r3, [pc, #652]	; (800b258 <Setup_Parameter_Sum_Pm_Sensor+0x2cc>)
 800afcc:	701a      	strb	r2, [r3, #0]
			if(mode_setup_parameter_sum_pm_sensor > MODE_MAX_CALIBRATION_GROUP_SENSOR)
 800afce:	4ba2      	ldr	r3, [pc, #648]	; (800b258 <Setup_Parameter_Sum_Pm_Sensor+0x2cc>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b06      	cmp	r3, #6
 800afd6:	d902      	bls.n	800afde <Setup_Parameter_Sum_Pm_Sensor+0x52>
				/*variable up  mode_setup_parameter_sum_pm_sensor = 0*/
				mode_setup_parameter_sum_pm_sensor = MODE_MIN_CALIBRATION_GROUP_SENSOR;
 800afd8:	4b9f      	ldr	r3, [pc, #636]	; (800b258 <Setup_Parameter_Sum_Pm_Sensor+0x2cc>)
 800afda:	2200      	movs	r2, #0
 800afdc:	701a      	strb	r2, [r3, #0]
   /*
	*setting measurement condition sum pm sensor
	*
	* */

	switch (mode_setup_parameter_sum_pm_sensor)
 800afde:	4b9e      	ldr	r3, [pc, #632]	; (800b258 <Setup_Parameter_Sum_Pm_Sensor+0x2cc>)
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	3b01      	subs	r3, #1
 800afe6:	2b05      	cmp	r3, #5
 800afe8:	f200 8212 	bhi.w	800b410 <Setup_Parameter_Sum_Pm_Sensor+0x484>
 800afec:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <Setup_Parameter_Sum_Pm_Sensor+0x68>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b00d 	.word	0x0800b00d
 800aff8:	0800b0b5 	.word	0x0800b0b5
 800affc:	0800b155 	.word	0x0800b155
 800b000:	0800b1fd 	.word	0x0800b1fd
 800b004:	0800b2cb 	.word	0x0800b2cb
 800b008:	0800b373 	.word	0x0800b373
	{
		/*set up value sum pm 0 - 235*/
		case 1:

			/*lcd display option*/
			Display_Setup_Parameter_Sum_pm(&lcd1,y_static_input_sum_pm_value[0]);
 800b00c:	4b93      	ldr	r3, [pc, #588]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4618      	mov	r0, r3
 800b012:	f7f6 f883 	bl	800111c <__aeabi_f2uiz>
 800b016:	4603      	mov	r3, r0
 800b018:	b29b      	uxth	r3, r3
 800b01a:	4619      	mov	r1, r3
 800b01c:	488d      	ldr	r0, [pc, #564]	; (800b254 <Setup_Parameter_Sum_Pm_Sensor+0x2c8>)
 800b01e:	f7f7 fce5 	bl	80029ec <Display_Setup_Parameter_Sum_pm>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800b022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b026:	488e      	ldr	r0, [pc, #568]	; (800b260 <Setup_Parameter_Sum_Pm_Sensor+0x2d4>)
 800b028:	f7fa f862 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d119      	bne.n	800b066 <Setup_Parameter_Sum_Pm_Sensor+0xda>
			{
				HAL_Delay(50);
 800b032:	2032      	movs	r0, #50	; 0x32
 800b034:	f7f8 fe1c 	bl	8003c70 <HAL_Delay>
				y_static_input_sum_pm_value[0]++;
 800b038:	4b88      	ldr	r3, [pc, #544]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b040:	4618      	mov	r0, r3
 800b042:	f7f5 fd77 	bl	8000b34 <__addsf3>
 800b046:	4603      	mov	r3, r0
 800b048:	461a      	mov	r2, r3
 800b04a:	4b84      	ldr	r3, [pc, #528]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b04c:	601a      	str	r2, [r3, #0]
				if(y_static_input_sum_pm_value[0] >= SUM_PM_MAX)
 800b04e:	4b83      	ldr	r3, [pc, #524]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4984      	ldr	r1, [pc, #528]	; (800b264 <Setup_Parameter_Sum_Pm_Sensor+0x2d8>)
 800b054:	4618      	mov	r0, r3
 800b056:	f7f6 f827 	bl	80010a8 <__aeabi_fcmpge>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <Setup_Parameter_Sum_Pm_Sensor+0xda>
				{
					y_static_input_sum_pm_value[0] = SUM_PM_MAX;
 800b060:	4b7e      	ldr	r3, [pc, #504]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b062:	4a80      	ldr	r2, [pc, #512]	; (800b264 <Setup_Parameter_Sum_Pm_Sensor+0x2d8>)
 800b064:	601a      	str	r2, [r3, #0]
				}

			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800b066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b06a:	487d      	ldr	r0, [pc, #500]	; (800b260 <Setup_Parameter_Sum_Pm_Sensor+0x2d4>)
 800b06c:	f7fa f840 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	f040 81d9 	bne.w	800b42a <Setup_Parameter_Sum_Pm_Sensor+0x49e>
			{
				HAL_Delay(50);
 800b078:	2032      	movs	r0, #50	; 0x32
 800b07a:	f7f8 fdf9 	bl	8003c70 <HAL_Delay>
				y_static_input_sum_pm_value[0]--;
 800b07e:	4b77      	ldr	r3, [pc, #476]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b086:	4618      	mov	r0, r3
 800b088:	f7f5 fd52 	bl	8000b30 <__aeabi_fsub>
 800b08c:	4603      	mov	r3, r0
 800b08e:	461a      	mov	r2, r3
 800b090:	4b72      	ldr	r3, [pc, #456]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b092:	601a      	str	r2, [r3, #0]
				if(y_static_input_sum_pm_value[0] <= SUM_PM_MIN)
 800b094:	4b71      	ldr	r3, [pc, #452]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f04f 0100 	mov.w	r1, #0
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7f5 fff9 	bl	8001094 <__aeabi_fcmple>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d100      	bne.n	800b0aa <Setup_Parameter_Sum_Pm_Sensor+0x11e>
				{
					y_static_input_sum_pm_value[0] = SUM_PM_MIN;
				}
			}
			break;
 800b0a8:	e1bf      	b.n	800b42a <Setup_Parameter_Sum_Pm_Sensor+0x49e>
					y_static_input_sum_pm_value[0] = SUM_PM_MIN;
 800b0aa:	4b6c      	ldr	r3, [pc, #432]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b0ac:	f04f 0200 	mov.w	r2, #0
 800b0b0:	601a      	str	r2, [r3, #0]
			break;
 800b0b2:	e1ba      	b.n	800b42a <Setup_Parameter_Sum_Pm_Sensor+0x49e>

		case 2:
			/*lcd display option*/
			Display_Setup_Parameter_Sum_pm(&lcd1,y_static_input_sum_pm_value[0]);
 800b0b4:	4b69      	ldr	r3, [pc, #420]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7f6 f82f 	bl	800111c <__aeabi_f2uiz>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4863      	ldr	r0, [pc, #396]	; (800b254 <Setup_Parameter_Sum_Pm_Sensor+0x2c8>)
 800b0c6:	f7f7 fc91 	bl	80029ec <Display_Setup_Parameter_Sum_pm>
			/*check condition for execution the data reading from sum pm sensor*/
			if(check_02 == 1)
 800b0ca:	4b67      	ldr	r3, [pc, #412]	; (800b268 <Setup_Parameter_Sum_Pm_Sensor+0x2dc>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d12d      	bne.n	800b130 <Setup_Parameter_Sum_Pm_Sensor+0x1a4>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_02 <= TIME_WAITTING_START_CALIBRATION)
 800b0d4:	e002      	b.n	800b0dc <Setup_Parameter_Sum_Pm_Sensor+0x150>
				{
					/*Turn on pump*/
					Send_Data_74HC595(0xAF);
 800b0d6:	20af      	movs	r0, #175	; 0xaf
 800b0d8:	f7f8 fd62 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_02 <= TIME_WAITTING_START_CALIBRATION)
 800b0dc:	f7f8 fdbe 	bl	8003c5c <HAL_GetTick>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	4a61      	ldr	r2, [pc, #388]	; (800b26c <Setup_Parameter_Sum_Pm_Sensor+0x2e0>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d9f4      	bls.n	800b0d6 <Setup_Parameter_Sum_Pm_Sensor+0x14a>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800b0ec:	20ff      	movs	r0, #255	; 0xff
 800b0ee:	f7f8 fd57 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				x_input_sum_pm_value[0] = Sharp_G2y10_Dust_Sensor_Measuring_Average(&sharpg2y_sensor01, 10);
 800b0f2:	210a      	movs	r1, #10
 800b0f4:	485e      	ldr	r0, [pc, #376]	; (800b270 <Setup_Parameter_Sum_Pm_Sensor+0x2e4>)
 800b0f6:	f002 fcc3 	bl	800da80 <Sharp_G2y10_Dust_Sensor_Measuring_Average>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	4a5d      	ldr	r2, [pc, #372]	; (800b274 <Setup_Parameter_Sum_Pm_Sensor+0x2e8>)
 800b0fe:	6013      	str	r3, [r2, #0]
				/*Tonggle buzz after having read data from sum pm sensor*/
				for(uint8_t i =0; i < 5; i++)
 800b100:	2300      	movs	r3, #0
 800b102:	71fb      	strb	r3, [r7, #7]
 800b104:	e00a      	b.n	800b11c <Setup_Parameter_Sum_Pm_Sensor+0x190>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800b106:	2101      	movs	r1, #1
 800b108:	485b      	ldr	r0, [pc, #364]	; (800b278 <Setup_Parameter_Sum_Pm_Sensor+0x2ec>)
 800b10a:	f7fa f820 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800b10e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b112:	f7f8 fdad 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800b116:	79fb      	ldrb	r3, [r7, #7]
 800b118:	3301      	adds	r3, #1
 800b11a:	71fb      	strb	r3, [r7, #7]
 800b11c:	79fb      	ldrb	r3, [r7, #7]
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d9f1      	bls.n	800b106 <Setup_Parameter_Sum_Pm_Sensor+0x17a>
				}
				/*increase variable by 1 unit*/
				check_02 ++;
 800b122:	4b51      	ldr	r3, [pc, #324]	; (800b268 <Setup_Parameter_Sum_Pm_Sensor+0x2dc>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	b2db      	uxtb	r3, r3
 800b128:	3301      	adds	r3, #1
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	4b4e      	ldr	r3, [pc, #312]	; (800b268 <Setup_Parameter_Sum_Pm_Sensor+0x2dc>)
 800b12e:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from sum pm sensor*/
			if(check_02 == 2)
 800b130:	4b4d      	ldr	r3, [pc, #308]	; (800b268 <Setup_Parameter_Sum_Pm_Sensor+0x2dc>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b02      	cmp	r3, #2
 800b138:	f040 8179 	bne.w	800b42e <Setup_Parameter_Sum_Pm_Sensor+0x4a2>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800b13c:	2200      	movs	r2, #0
 800b13e:	2101      	movs	r1, #1
 800b140:	484d      	ldr	r0, [pc, #308]	; (800b278 <Setup_Parameter_Sum_Pm_Sensor+0x2ec>)
 800b142:	f7f9 ffec 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Done(&lcd1, x_input_sum_pm_value[0]);
 800b146:	4b4b      	ldr	r3, [pc, #300]	; (800b274 <Setup_Parameter_Sum_Pm_Sensor+0x2e8>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	4841      	ldr	r0, [pc, #260]	; (800b254 <Setup_Parameter_Sum_Pm_Sensor+0x2c8>)
 800b14e:	f7f8 fb2d 	bl	80037ac <Display_Done>
			}
			break;
 800b152:	e16c      	b.n	800b42e <Setup_Parameter_Sum_Pm_Sensor+0x4a2>

		/*set up value sum pm 235 - 345*/
		case 3:
			/*lcd display option*/
			Display_Setup_Parameter_Sum_pm(&lcd1,y_static_input_sum_pm_value[1]);
 800b154:	4b41      	ldr	r3, [pc, #260]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	4618      	mov	r0, r3
 800b15a:	f7f5 ffdf 	bl	800111c <__aeabi_f2uiz>
 800b15e:	4603      	mov	r3, r0
 800b160:	b29b      	uxth	r3, r3
 800b162:	4619      	mov	r1, r3
 800b164:	483b      	ldr	r0, [pc, #236]	; (800b254 <Setup_Parameter_Sum_Pm_Sensor+0x2c8>)
 800b166:	f7f7 fc41 	bl	80029ec <Display_Setup_Parameter_Sum_pm>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800b16a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b16e:	483c      	ldr	r0, [pc, #240]	; (800b260 <Setup_Parameter_Sum_Pm_Sensor+0x2d4>)
 800b170:	f7f9 ffbe 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d119      	bne.n	800b1ae <Setup_Parameter_Sum_Pm_Sensor+0x222>
			{
				HAL_Delay(50);
 800b17a:	2032      	movs	r0, #50	; 0x32
 800b17c:	f7f8 fd78 	bl	8003c70 <HAL_Delay>
				y_static_input_sum_pm_value[1]++;
 800b180:	4b36      	ldr	r3, [pc, #216]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f5 fcd3 	bl	8000b34 <__addsf3>
 800b18e:	4603      	mov	r3, r0
 800b190:	461a      	mov	r2, r3
 800b192:	4b32      	ldr	r3, [pc, #200]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b194:	605a      	str	r2, [r3, #4]
				if(y_static_input_sum_pm_value[1] >= SUM_PM_MAX)
 800b196:	4b31      	ldr	r3, [pc, #196]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	4932      	ldr	r1, [pc, #200]	; (800b264 <Setup_Parameter_Sum_Pm_Sensor+0x2d8>)
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7f5 ff83 	bl	80010a8 <__aeabi_fcmpge>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <Setup_Parameter_Sum_Pm_Sensor+0x222>
				{
					y_static_input_sum_pm_value[1] = SUM_PM_MAX;
 800b1a8:	4b2c      	ldr	r3, [pc, #176]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b1aa:	4a2e      	ldr	r2, [pc, #184]	; (800b264 <Setup_Parameter_Sum_Pm_Sensor+0x2d8>)
 800b1ac:	605a      	str	r2, [r3, #4]
				}

			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800b1ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b1b2:	482b      	ldr	r0, [pc, #172]	; (800b260 <Setup_Parameter_Sum_Pm_Sensor+0x2d4>)
 800b1b4:	f7f9 ff9c 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f040 8139 	bne.w	800b432 <Setup_Parameter_Sum_Pm_Sensor+0x4a6>
			{
				HAL_Delay(50);
 800b1c0:	2032      	movs	r0, #50	; 0x32
 800b1c2:	f7f8 fd55 	bl	8003c70 <HAL_Delay>
				y_static_input_sum_pm_value[1]--;
 800b1c6:	4b25      	ldr	r3, [pc, #148]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7f5 fcae 	bl	8000b30 <__aeabi_fsub>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	4b20      	ldr	r3, [pc, #128]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b1da:	605a      	str	r2, [r3, #4]
				if(y_static_input_sum_pm_value[1] <= SUM_PM_MIN)
 800b1dc:	4b1f      	ldr	r3, [pc, #124]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	f04f 0100 	mov.w	r1, #0
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7f5 ff55 	bl	8001094 <__aeabi_fcmple>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d100      	bne.n	800b1f2 <Setup_Parameter_Sum_Pm_Sensor+0x266>
				{
					y_static_input_sum_pm_value[1] = SUM_PM_MIN;
				}
			}
			break;
 800b1f0:	e11f      	b.n	800b432 <Setup_Parameter_Sum_Pm_Sensor+0x4a6>
					y_static_input_sum_pm_value[1] = SUM_PM_MIN;
 800b1f2:	4b1a      	ldr	r3, [pc, #104]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b1f4:	f04f 0200 	mov.w	r2, #0
 800b1f8:	605a      	str	r2, [r3, #4]
			break;
 800b1fa:	e11a      	b.n	800b432 <Setup_Parameter_Sum_Pm_Sensor+0x4a6>
		case 4:
			/*Lcd display*/
			Display_Setup_Parameter_Sum_pm(&lcd1,y_static_input_sum_pm_value[1]);
 800b1fc:	4b17      	ldr	r3, [pc, #92]	; (800b25c <Setup_Parameter_Sum_Pm_Sensor+0x2d0>)
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4618      	mov	r0, r3
 800b202:	f7f5 ff8b 	bl	800111c <__aeabi_f2uiz>
 800b206:	4603      	mov	r3, r0
 800b208:	b29b      	uxth	r3, r3
 800b20a:	4619      	mov	r1, r3
 800b20c:	4811      	ldr	r0, [pc, #68]	; (800b254 <Setup_Parameter_Sum_Pm_Sensor+0x2c8>)
 800b20e:	f7f7 fbed 	bl	80029ec <Display_Setup_Parameter_Sum_pm>
			/*check condition for execution the data reading from sum pm sensor*/
			if(check_02 == 2)
 800b212:	4b15      	ldr	r3, [pc, #84]	; (800b268 <Setup_Parameter_Sum_Pm_Sensor+0x2dc>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d144      	bne.n	800b2a6 <Setup_Parameter_Sum_Pm_Sensor+0x31a>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_02 <= TIME_WAITTING_START_CALIBRATION)
 800b21c:	e002      	b.n	800b224 <Setup_Parameter_Sum_Pm_Sensor+0x298>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800b21e:	20af      	movs	r0, #175	; 0xaf
 800b220:	f7f8 fcbe 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_02 <= TIME_WAITTING_START_CALIBRATION)
 800b224:	f7f8 fd1a 	bl	8003c5c <HAL_GetTick>
 800b228:	4602      	mov	r2, r0
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	4a0f      	ldr	r2, [pc, #60]	; (800b26c <Setup_Parameter_Sum_Pm_Sensor+0x2e0>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d9f4      	bls.n	800b21e <Setup_Parameter_Sum_Pm_Sensor+0x292>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800b234:	20ff      	movs	r0, #255	; 0xff
 800b236:	f7f8 fcb3 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				x_input_sum_pm_value[1] = Sharp_G2y10_Dust_Sensor_Measuring_Average(&sharpg2y_sensor01, 10);
 800b23a:	210a      	movs	r1, #10
 800b23c:	480c      	ldr	r0, [pc, #48]	; (800b270 <Setup_Parameter_Sum_Pm_Sensor+0x2e4>)
 800b23e:	f002 fc1f 	bl	800da80 <Sharp_G2y10_Dust_Sensor_Measuring_Average>
 800b242:	4603      	mov	r3, r0
 800b244:	4a0b      	ldr	r2, [pc, #44]	; (800b274 <Setup_Parameter_Sum_Pm_Sensor+0x2e8>)
 800b246:	6053      	str	r3, [r2, #4]
				/*Tonggle buzz after having read data from sum pm sensor*/
				for(uint8_t i =0; i < 5; i++)
 800b248:	2300      	movs	r3, #0
 800b24a:	71bb      	strb	r3, [r7, #6]
 800b24c:	e021      	b.n	800b292 <Setup_Parameter_Sum_Pm_Sensor+0x306>
 800b24e:	bf00      	nop
 800b250:	40011400 	.word	0x40011400
 800b254:	2000086c 	.word	0x2000086c
 800b258:	20001c34 	.word	0x20001c34
 800b25c:	2000003c 	.word	0x2000003c
 800b260:	40011000 	.word	0x40011000
 800b264:	43fa0000 	.word	0x43fa0000
 800b268:	20001c35 	.word	0x20001c35
 800b26c:	000493e0 	.word	0x000493e0
 800b270:	20001b80 	.word	0x20001b80
 800b274:	20001be8 	.word	0x20001be8
 800b278:	40011800 	.word	0x40011800
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800b27c:	2101      	movs	r1, #1
 800b27e:	4873      	ldr	r0, [pc, #460]	; (800b44c <Setup_Parameter_Sum_Pm_Sensor+0x4c0>)
 800b280:	f7f9 ff65 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800b284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b288:	f7f8 fcf2 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800b28c:	79bb      	ldrb	r3, [r7, #6]
 800b28e:	3301      	adds	r3, #1
 800b290:	71bb      	strb	r3, [r7, #6]
 800b292:	79bb      	ldrb	r3, [r7, #6]
 800b294:	2b04      	cmp	r3, #4
 800b296:	d9f1      	bls.n	800b27c <Setup_Parameter_Sum_Pm_Sensor+0x2f0>
				}
				/*increase variable by 1 unit*/
				check_02 ++;
 800b298:	4b6d      	ldr	r3, [pc, #436]	; (800b450 <Setup_Parameter_Sum_Pm_Sensor+0x4c4>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	3301      	adds	r3, #1
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	4b6b      	ldr	r3, [pc, #428]	; (800b450 <Setup_Parameter_Sum_Pm_Sensor+0x4c4>)
 800b2a4:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from sum pm sensor*/
			if(check_02 == 3)
 800b2a6:	4b6a      	ldr	r3, [pc, #424]	; (800b450 <Setup_Parameter_Sum_Pm_Sensor+0x4c4>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	f040 80c2 	bne.w	800b436 <Setup_Parameter_Sum_Pm_Sensor+0x4aa>
			{	
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	4865      	ldr	r0, [pc, #404]	; (800b44c <Setup_Parameter_Sum_Pm_Sensor+0x4c0>)
 800b2b8:	f7f9 ff31 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Done(&lcd1, x_input_sum_pm_value[1]);
 800b2bc:	4b65      	ldr	r3, [pc, #404]	; (800b454 <Setup_Parameter_Sum_Pm_Sensor+0x4c8>)
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4865      	ldr	r0, [pc, #404]	; (800b458 <Setup_Parameter_Sum_Pm_Sensor+0x4cc>)
 800b2c4:	f7f8 fa72 	bl	80037ac <Display_Done>
			}
			break;
 800b2c8:	e0b5      	b.n	800b436 <Setup_Parameter_Sum_Pm_Sensor+0x4aa>

		/*set up value sum pm 345 - 455*/
		case 5:
			/*lcd display option*/
			Display_Setup_Parameter_Sum_pm(&lcd1,y_static_input_sum_pm_value[2]);
 800b2ca:	4b64      	ldr	r3, [pc, #400]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7f5 ff24 	bl	800111c <__aeabi_f2uiz>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	4619      	mov	r1, r3
 800b2da:	485f      	ldr	r0, [pc, #380]	; (800b458 <Setup_Parameter_Sum_Pm_Sensor+0x4cc>)
 800b2dc:	f7f7 fb86 	bl	80029ec <Display_Setup_Parameter_Sum_pm>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800b2e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b2e4:	485e      	ldr	r0, [pc, #376]	; (800b460 <Setup_Parameter_Sum_Pm_Sensor+0x4d4>)
 800b2e6:	f7f9 ff03 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d119      	bne.n	800b324 <Setup_Parameter_Sum_Pm_Sensor+0x398>
			{
				HAL_Delay(50);
 800b2f0:	2032      	movs	r0, #50	; 0x32
 800b2f2:	f7f8 fcbd 	bl	8003c70 <HAL_Delay>
				y_static_input_sum_pm_value[2]++;
 800b2f6:	4b59      	ldr	r3, [pc, #356]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7f5 fc18 	bl	8000b34 <__addsf3>
 800b304:	4603      	mov	r3, r0
 800b306:	461a      	mov	r2, r3
 800b308:	4b54      	ldr	r3, [pc, #336]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b30a:	609a      	str	r2, [r3, #8]
				if(y_static_input_sum_pm_value[2] >= SUM_PM_MAX)
 800b30c:	4b53      	ldr	r3, [pc, #332]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	4954      	ldr	r1, [pc, #336]	; (800b464 <Setup_Parameter_Sum_Pm_Sensor+0x4d8>)
 800b312:	4618      	mov	r0, r3
 800b314:	f7f5 fec8 	bl	80010a8 <__aeabi_fcmpge>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <Setup_Parameter_Sum_Pm_Sensor+0x398>
				{
					y_static_input_sum_pm_value[2] = SUM_PM_MAX;
 800b31e:	4b4f      	ldr	r3, [pc, #316]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b320:	4a50      	ldr	r2, [pc, #320]	; (800b464 <Setup_Parameter_Sum_Pm_Sensor+0x4d8>)
 800b322:	609a      	str	r2, [r3, #8]
				}

			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800b324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b328:	484d      	ldr	r0, [pc, #308]	; (800b460 <Setup_Parameter_Sum_Pm_Sensor+0x4d4>)
 800b32a:	f7f9 fee1 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	f040 8082 	bne.w	800b43a <Setup_Parameter_Sum_Pm_Sensor+0x4ae>
			{
				HAL_Delay(50);
 800b336:	2032      	movs	r0, #50	; 0x32
 800b338:	f7f8 fc9a 	bl	8003c70 <HAL_Delay>
				y_static_input_sum_pm_value[2]--;
 800b33c:	4b47      	ldr	r3, [pc, #284]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b344:	4618      	mov	r0, r3
 800b346:	f7f5 fbf3 	bl	8000b30 <__aeabi_fsub>
 800b34a:	4603      	mov	r3, r0
 800b34c:	461a      	mov	r2, r3
 800b34e:	4b43      	ldr	r3, [pc, #268]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b350:	609a      	str	r2, [r3, #8]
				if(y_static_input_sum_pm_value[2] <= SUM_PM_MIN)
 800b352:	4b42      	ldr	r3, [pc, #264]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f04f 0100 	mov.w	r1, #0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f5 fe9a 	bl	8001094 <__aeabi_fcmple>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d100      	bne.n	800b368 <Setup_Parameter_Sum_Pm_Sensor+0x3dc>
				{
					y_static_input_sum_pm_value[2] = SUM_PM_MIN;
				}
			}
			break;
 800b366:	e068      	b.n	800b43a <Setup_Parameter_Sum_Pm_Sensor+0x4ae>
					y_static_input_sum_pm_value[2] = SUM_PM_MIN;
 800b368:	4b3c      	ldr	r3, [pc, #240]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b36a:	f04f 0200 	mov.w	r2, #0
 800b36e:	609a      	str	r2, [r3, #8]
			break;
 800b370:	e063      	b.n	800b43a <Setup_Parameter_Sum_Pm_Sensor+0x4ae>
		case 6:
			/*lcd display option*/
			Display_Setup_Parameter_Sum_pm(&lcd1,y_static_input_sum_pm_value[2]);
 800b372:	4b3a      	ldr	r3, [pc, #232]	; (800b45c <Setup_Parameter_Sum_Pm_Sensor+0x4d0>)
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	4618      	mov	r0, r3
 800b378:	f7f5 fed0 	bl	800111c <__aeabi_f2uiz>
 800b37c:	4603      	mov	r3, r0
 800b37e:	b29b      	uxth	r3, r3
 800b380:	4619      	mov	r1, r3
 800b382:	4835      	ldr	r0, [pc, #212]	; (800b458 <Setup_Parameter_Sum_Pm_Sensor+0x4cc>)
 800b384:	f7f7 fb32 	bl	80029ec <Display_Setup_Parameter_Sum_pm>
			/*check condition for execution the data reading from sum pm sensor*/
			if(check_02 == 3)
 800b388:	4b31      	ldr	r3, [pc, #196]	; (800b450 <Setup_Parameter_Sum_Pm_Sensor+0x4c4>)
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d12d      	bne.n	800b3ee <Setup_Parameter_Sum_Pm_Sensor+0x462>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_02 <= TIME_WAITTING_START_CALIBRATION)
 800b392:	e002      	b.n	800b39a <Setup_Parameter_Sum_Pm_Sensor+0x40e>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800b394:	20af      	movs	r0, #175	; 0xaf
 800b396:	f7f8 fc03 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_02 <= TIME_WAITTING_START_CALIBRATION)
 800b39a:	f7f8 fc5f 	bl	8003c5c <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	4a30      	ldr	r2, [pc, #192]	; (800b468 <Setup_Parameter_Sum_Pm_Sensor+0x4dc>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d9f4      	bls.n	800b394 <Setup_Parameter_Sum_Pm_Sensor+0x408>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800b3aa:	20ff      	movs	r0, #255	; 0xff
 800b3ac:	f7f8 fbf8 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				x_input_sum_pm_value[2] = Sharp_G2y10_Dust_Sensor_Measuring_Average(&sharpg2y_sensor01, 10);
 800b3b0:	210a      	movs	r1, #10
 800b3b2:	482e      	ldr	r0, [pc, #184]	; (800b46c <Setup_Parameter_Sum_Pm_Sensor+0x4e0>)
 800b3b4:	f002 fb64 	bl	800da80 <Sharp_G2y10_Dust_Sensor_Measuring_Average>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	4a26      	ldr	r2, [pc, #152]	; (800b454 <Setup_Parameter_Sum_Pm_Sensor+0x4c8>)
 800b3bc:	6093      	str	r3, [r2, #8]
				/*Tonggle buzz after having read data from sum pm sensor*/
				for(uint8_t i =0; i < 5; i++)
 800b3be:	2300      	movs	r3, #0
 800b3c0:	717b      	strb	r3, [r7, #5]
 800b3c2:	e00a      	b.n	800b3da <Setup_Parameter_Sum_Pm_Sensor+0x44e>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	4821      	ldr	r0, [pc, #132]	; (800b44c <Setup_Parameter_Sum_Pm_Sensor+0x4c0>)
 800b3c8:	f7f9 fec1 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800b3cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b3d0:	f7f8 fc4e 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800b3d4:	797b      	ldrb	r3, [r7, #5]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	717b      	strb	r3, [r7, #5]
 800b3da:	797b      	ldrb	r3, [r7, #5]
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d9f1      	bls.n	800b3c4 <Setup_Parameter_Sum_Pm_Sensor+0x438>
				}
				/*increase variable by 1 unit*/
				check_02 ++;
 800b3e0:	4b1b      	ldr	r3, [pc, #108]	; (800b450 <Setup_Parameter_Sum_Pm_Sensor+0x4c4>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	4b19      	ldr	r3, [pc, #100]	; (800b450 <Setup_Parameter_Sum_Pm_Sensor+0x4c4>)
 800b3ec:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from sum pm sensor*/
			if(check_02 == 4)
 800b3ee:	4b18      	ldr	r3, [pc, #96]	; (800b450 <Setup_Parameter_Sum_Pm_Sensor+0x4c4>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b04      	cmp	r3, #4
 800b3f6:	d122      	bne.n	800b43e <Setup_Parameter_Sum_Pm_Sensor+0x4b2>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	4813      	ldr	r0, [pc, #76]	; (800b44c <Setup_Parameter_Sum_Pm_Sensor+0x4c0>)
 800b3fe:	f7f9 fe8e 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Done(&lcd1, x_input_sum_pm_value[2]);
 800b402:	4b14      	ldr	r3, [pc, #80]	; (800b454 <Setup_Parameter_Sum_Pm_Sensor+0x4c8>)
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	4619      	mov	r1, r3
 800b408:	4813      	ldr	r0, [pc, #76]	; (800b458 <Setup_Parameter_Sum_Pm_Sensor+0x4cc>)
 800b40a:	f7f8 f9cf 	bl	80037ac <Display_Done>
			}
			break;
 800b40e:	e016      	b.n	800b43e <Setup_Parameter_Sum_Pm_Sensor+0x4b2>

		/*Default mode*/
		default:
			/*Lcd set cursor*/
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800b410:	2200      	movs	r2, #0
 800b412:	2100      	movs	r1, #0
 800b414:	4810      	ldr	r0, [pc, #64]	; (800b458 <Setup_Parameter_Sum_Pm_Sensor+0x4cc>)
 800b416:	f7fc fc9f 	bl	8007d58 <CLCD_I2C_SetCursor>
			/*Lcd display*/
			CLCD_I2C_WriteString(&lcd1, "Sum Pm Sensor");
 800b41a:	4915      	ldr	r1, [pc, #84]	; (800b470 <Setup_Parameter_Sum_Pm_Sensor+0x4e4>)
 800b41c:	480e      	ldr	r0, [pc, #56]	; (800b458 <Setup_Parameter_Sum_Pm_Sensor+0x4cc>)
 800b41e:	f7fc fcee 	bl	8007dfe <CLCD_I2C_WriteString>
			/*reassign variable check_02 = 1*/
			check_02 = 1;
 800b422:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <Setup_Parameter_Sum_Pm_Sensor+0x4c4>)
 800b424:	2201      	movs	r2, #1
 800b426:	701a      	strb	r2, [r3, #0]
			break;
 800b428:	e00a      	b.n	800b440 <Setup_Parameter_Sum_Pm_Sensor+0x4b4>
			break;
 800b42a:	bf00      	nop
 800b42c:	e008      	b.n	800b440 <Setup_Parameter_Sum_Pm_Sensor+0x4b4>
			break;
 800b42e:	bf00      	nop
 800b430:	e006      	b.n	800b440 <Setup_Parameter_Sum_Pm_Sensor+0x4b4>
			break;
 800b432:	bf00      	nop
 800b434:	e004      	b.n	800b440 <Setup_Parameter_Sum_Pm_Sensor+0x4b4>
			break;
 800b436:	bf00      	nop
 800b438:	e002      	b.n	800b440 <Setup_Parameter_Sum_Pm_Sensor+0x4b4>
			break;
 800b43a:	bf00      	nop
 800b43c:	e000      	b.n	800b440 <Setup_Parameter_Sum_Pm_Sensor+0x4b4>
			break;
 800b43e:	bf00      	nop
	}

	return 0;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	40011800 	.word	0x40011800
 800b450:	20001c35 	.word	0x20001c35
 800b454:	20001be8 	.word	0x20001be8
 800b458:	2000086c 	.word	0x2000086c
 800b45c:	2000003c 	.word	0x2000003c
 800b460:	40011000 	.word	0x40011000
 800b464:	43fa0000 	.word	0x43fa0000
 800b468:	000493e0 	.word	0x000493e0
 800b46c:	20001b80 	.word	0x20001b80
 800b470:	0801137c 	.word	0x0801137c

0800b474 <Setup_Parameter_Co2_Sensor>:
 * @brief Setup_Parameter_Co2_Sensor
 *
 * @return uint8_t
 */
static uint8_t Setup_Parameter_Co2_Sensor(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_setup_parameter_co2_pm_sensor = 0;
	static __IO uint8_t check_03 = 0;
	uint32_t time_wake_up_03 = HAL_GetTick();
 800b47a:	f7f8 fbef 	bl	8003c5c <HAL_GetTick>
 800b47e:	6038      	str	r0, [r7, #0]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800b480:	2140      	movs	r1, #64	; 0x40
 800b482:	48ad      	ldr	r0, [pc, #692]	; (800b738 <Setup_Parameter_Co2_Sensor+0x2c4>)
 800b484:	f7f9 fe34 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d11b      	bne.n	800b4c6 <Setup_Parameter_Co2_Sensor+0x52>
	{
		HAL_Delay(100);
 800b48e:	2064      	movs	r0, #100	; 0x64
 800b490:	f7f8 fbee 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800b494:	2140      	movs	r1, #64	; 0x40
 800b496:	48a8      	ldr	r0, [pc, #672]	; (800b738 <Setup_Parameter_Co2_Sensor+0x2c4>)
 800b498:	f7f9 fe2a 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d111      	bne.n	800b4c6 <Setup_Parameter_Co2_Sensor+0x52>
		{
			/*lcd display */
			CLCD_I2C_Clear(&lcd1);
 800b4a2:	48a6      	ldr	r0, [pc, #664]	; (800b73c <Setup_Parameter_Co2_Sensor+0x2c8>)
 800b4a4:	f7fc fcc2 	bl	8007e2c <CLCD_I2C_Clear>
			/*variable up*/
			mode_setup_parameter_co2_pm_sensor++;
 800b4a8:	4ba5      	ldr	r3, [pc, #660]	; (800b740 <Setup_Parameter_Co2_Sensor+0x2cc>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	4ba3      	ldr	r3, [pc, #652]	; (800b740 <Setup_Parameter_Co2_Sensor+0x2cc>)
 800b4b4:	701a      	strb	r2, [r3, #0]
			if(mode_setup_parameter_co2_pm_sensor > MODE_MAX_CALIBRATION_GROUP_SENSOR)
 800b4b6:	4ba2      	ldr	r3, [pc, #648]	; (800b740 <Setup_Parameter_Co2_Sensor+0x2cc>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b06      	cmp	r3, #6
 800b4be:	d902      	bls.n	800b4c6 <Setup_Parameter_Co2_Sensor+0x52>
				mode_setup_parameter_co2_pm_sensor = MODE_MIN_CALIBRATION_GROUP_SENSOR;
 800b4c0:	4b9f      	ldr	r3, [pc, #636]	; (800b740 <Setup_Parameter_Co2_Sensor+0x2cc>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	701a      	strb	r2, [r3, #0]

   /*
	*setting measurement condition co2 pm sensor
	*
	* */
	switch (mode_setup_parameter_co2_pm_sensor)
 800b4c6:	4b9e      	ldr	r3, [pc, #632]	; (800b740 <Setup_Parameter_Co2_Sensor+0x2cc>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	2b05      	cmp	r3, #5
 800b4d0:	f200 8212 	bhi.w	800b8f8 <Setup_Parameter_Co2_Sensor+0x484>
 800b4d4:	a201      	add	r2, pc, #4	; (adr r2, 800b4dc <Setup_Parameter_Co2_Sensor+0x68>)
 800b4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4da:	bf00      	nop
 800b4dc:	0800b4f5 	.word	0x0800b4f5
 800b4e0:	0800b59d 	.word	0x0800b59d
 800b4e4:	0800b63d 	.word	0x0800b63d
 800b4e8:	0800b6e5 	.word	0x0800b6e5
 800b4ec:	0800b7b3 	.word	0x0800b7b3
 800b4f0:	0800b85b 	.word	0x0800b85b
	{

		/*set up value co2 pm 0 - 225*/
		case 1:
			/*lcd display option*/
			Display_Setup_Parameter_Co2(&lcd1, y_static_input_co2_value[0]);
 800b4f4:	4b93      	ldr	r3, [pc, #588]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f5 fe0f 	bl	800111c <__aeabi_f2uiz>
 800b4fe:	4603      	mov	r3, r0
 800b500:	b29b      	uxth	r3, r3
 800b502:	4619      	mov	r1, r3
 800b504:	488d      	ldr	r0, [pc, #564]	; (800b73c <Setup_Parameter_Co2_Sensor+0x2c8>)
 800b506:	f7f7 fb4b 	bl	8002ba0 <Display_Setup_Parameter_Co2>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800b50a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b50e:	488e      	ldr	r0, [pc, #568]	; (800b748 <Setup_Parameter_Co2_Sensor+0x2d4>)
 800b510:	f7f9 fdee 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d119      	bne.n	800b54e <Setup_Parameter_Co2_Sensor+0xda>
			{
				HAL_Delay(50);
 800b51a:	2032      	movs	r0, #50	; 0x32
 800b51c:	f7f8 fba8 	bl	8003c70 <HAL_Delay>
				y_static_input_co2_value[0]++;
 800b520:	4b88      	ldr	r3, [pc, #544]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b528:	4618      	mov	r0, r3
 800b52a:	f7f5 fb03 	bl	8000b34 <__addsf3>
 800b52e:	4603      	mov	r3, r0
 800b530:	461a      	mov	r2, r3
 800b532:	4b84      	ldr	r3, [pc, #528]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b534:	601a      	str	r2, [r3, #0]
				if(y_static_input_co2_value[0] >= CO2_MAX)
 800b536:	4b83      	ldr	r3, [pc, #524]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4984      	ldr	r1, [pc, #528]	; (800b74c <Setup_Parameter_Co2_Sensor+0x2d8>)
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7f5 fdb3 	bl	80010a8 <__aeabi_fcmpge>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <Setup_Parameter_Co2_Sensor+0xda>
				{
					y_static_input_co2_value[0] = CO2_MAX;
 800b548:	4b7e      	ldr	r3, [pc, #504]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b54a:	4a80      	ldr	r2, [pc, #512]	; (800b74c <Setup_Parameter_Co2_Sensor+0x2d8>)
 800b54c:	601a      	str	r2, [r3, #0]
				}

			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800b54e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b552:	487d      	ldr	r0, [pc, #500]	; (800b748 <Setup_Parameter_Co2_Sensor+0x2d4>)
 800b554:	f7f9 fdcc 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f040 81d9 	bne.w	800b912 <Setup_Parameter_Co2_Sensor+0x49e>
			{
				HAL_Delay(50);
 800b560:	2032      	movs	r0, #50	; 0x32
 800b562:	f7f8 fb85 	bl	8003c70 <HAL_Delay>
				y_static_input_co2_value[0]--;
 800b566:	4b77      	ldr	r3, [pc, #476]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b56e:	4618      	mov	r0, r3
 800b570:	f7f5 fade 	bl	8000b30 <__aeabi_fsub>
 800b574:	4603      	mov	r3, r0
 800b576:	461a      	mov	r2, r3
 800b578:	4b72      	ldr	r3, [pc, #456]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b57a:	601a      	str	r2, [r3, #0]
				if(y_static_input_co2_value[0] <= CO2_MIN)
 800b57c:	4b71      	ldr	r3, [pc, #452]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f04f 0100 	mov.w	r1, #0
 800b584:	4618      	mov	r0, r3
 800b586:	f7f5 fd85 	bl	8001094 <__aeabi_fcmple>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d100      	bne.n	800b592 <Setup_Parameter_Co2_Sensor+0x11e>
				{
					y_static_input_co2_value[0] = CO2_MIN;
				}
			}
			break;
 800b590:	e1bf      	b.n	800b912 <Setup_Parameter_Co2_Sensor+0x49e>
					y_static_input_co2_value[0] = CO2_MIN;
 800b592:	4b6c      	ldr	r3, [pc, #432]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b594:	f04f 0200 	mov.w	r2, #0
 800b598:	601a      	str	r2, [r3, #0]
			break;
 800b59a:	e1ba      	b.n	800b912 <Setup_Parameter_Co2_Sensor+0x49e>
		case 2 :
			/*Lcd display*/
			Display_Setup_Parameter_Co2(&lcd1, y_static_input_co2_value[0]);
 800b59c:	4b69      	ldr	r3, [pc, #420]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7f5 fdbb 	bl	800111c <__aeabi_f2uiz>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4863      	ldr	r0, [pc, #396]	; (800b73c <Setup_Parameter_Co2_Sensor+0x2c8>)
 800b5ae:	f7f7 faf7 	bl	8002ba0 <Display_Setup_Parameter_Co2>
			/*check condition for execution the data reading from co2 sensor*/
			if(check_03 == 1)
 800b5b2:	4b67      	ldr	r3, [pc, #412]	; (800b750 <Setup_Parameter_Co2_Sensor+0x2dc>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d12d      	bne.n	800b618 <Setup_Parameter_Co2_Sensor+0x1a4>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_03 <= TIME_WAITTING_START_CALIBRATION)
 800b5bc:	e002      	b.n	800b5c4 <Setup_Parameter_Co2_Sensor+0x150>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800b5be:	20af      	movs	r0, #175	; 0xaf
 800b5c0:	f7f8 faee 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_03 <= TIME_WAITTING_START_CALIBRATION)
 800b5c4:	f7f8 fb4a 	bl	8003c5c <HAL_GetTick>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	4a61      	ldr	r2, [pc, #388]	; (800b754 <Setup_Parameter_Co2_Sensor+0x2e0>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d9f4      	bls.n	800b5be <Setup_Parameter_Co2_Sensor+0x14a>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800b5d4:	20ff      	movs	r0, #255	; 0xff
 800b5d6:	f7f8 fae3 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				x_input_co2_value[0] =  Mh_Z19B_Co2_Sensor_Caclulator_Average(&mh_z19b_sensor_01, 10);
 800b5da:	210a      	movs	r1, #10
 800b5dc:	485e      	ldr	r0, [pc, #376]	; (800b758 <Setup_Parameter_Co2_Sensor+0x2e4>)
 800b5de:	f7fc fc91 	bl	8007f04 <Mh_Z19B_Co2_Sensor_Caclulator_Average>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	4a5d      	ldr	r2, [pc, #372]	; (800b75c <Setup_Parameter_Co2_Sensor+0x2e8>)
 800b5e6:	6013      	str	r3, [r2, #0]
				/*Tonggle buzz after having read data from co2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	71fb      	strb	r3, [r7, #7]
 800b5ec:	e00a      	b.n	800b604 <Setup_Parameter_Co2_Sensor+0x190>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	485b      	ldr	r0, [pc, #364]	; (800b760 <Setup_Parameter_Co2_Sensor+0x2ec>)
 800b5f2:	f7f9 fdac 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800b5f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b5fa:	f7f8 fb39 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800b5fe:	79fb      	ldrb	r3, [r7, #7]
 800b600:	3301      	adds	r3, #1
 800b602:	71fb      	strb	r3, [r7, #7]
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	2b04      	cmp	r3, #4
 800b608:	d9f1      	bls.n	800b5ee <Setup_Parameter_Co2_Sensor+0x17a>
				}
				/*increase variable by 1 unit*/
				check_03++;
 800b60a:	4b51      	ldr	r3, [pc, #324]	; (800b750 <Setup_Parameter_Co2_Sensor+0x2dc>)
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	3301      	adds	r3, #1
 800b612:	b2da      	uxtb	r2, r3
 800b614:	4b4e      	ldr	r3, [pc, #312]	; (800b750 <Setup_Parameter_Co2_Sensor+0x2dc>)
 800b616:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from co2 sensor*/
			if(check_03 == 2)
 800b618:	4b4d      	ldr	r3, [pc, #308]	; (800b750 <Setup_Parameter_Co2_Sensor+0x2dc>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b02      	cmp	r3, #2
 800b620:	f040 8179 	bne.w	800b916 <Setup_Parameter_Co2_Sensor+0x4a2>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800b624:	2200      	movs	r2, #0
 800b626:	2101      	movs	r1, #1
 800b628:	484d      	ldr	r0, [pc, #308]	; (800b760 <Setup_Parameter_Co2_Sensor+0x2ec>)
 800b62a:	f7f9 fd78 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Done(&lcd1, x_input_co2_value[0]);
 800b62e:	4b4b      	ldr	r3, [pc, #300]	; (800b75c <Setup_Parameter_Co2_Sensor+0x2e8>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4619      	mov	r1, r3
 800b634:	4841      	ldr	r0, [pc, #260]	; (800b73c <Setup_Parameter_Co2_Sensor+0x2c8>)
 800b636:	f7f8 f8b9 	bl	80037ac <Display_Done>
			}
			break;
 800b63a:	e16c      	b.n	800b916 <Setup_Parameter_Co2_Sensor+0x4a2>

		/*set up value co2 pm 225 - 525*/
		case 3:
			/*lcd display option*/
			Display_Setup_Parameter_Co2(&lcd1, y_static_input_co2_value[1]);
 800b63c:	4b41      	ldr	r3, [pc, #260]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	4618      	mov	r0, r3
 800b642:	f7f5 fd6b 	bl	800111c <__aeabi_f2uiz>
 800b646:	4603      	mov	r3, r0
 800b648:	b29b      	uxth	r3, r3
 800b64a:	4619      	mov	r1, r3
 800b64c:	483b      	ldr	r0, [pc, #236]	; (800b73c <Setup_Parameter_Co2_Sensor+0x2c8>)
 800b64e:	f7f7 faa7 	bl	8002ba0 <Display_Setup_Parameter_Co2>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800b652:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b656:	483c      	ldr	r0, [pc, #240]	; (800b748 <Setup_Parameter_Co2_Sensor+0x2d4>)
 800b658:	f7f9 fd4a 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d119      	bne.n	800b696 <Setup_Parameter_Co2_Sensor+0x222>
			{
				HAL_Delay(50);
 800b662:	2032      	movs	r0, #50	; 0x32
 800b664:	f7f8 fb04 	bl	8003c70 <HAL_Delay>
				y_static_input_co2_value[1]++;
 800b668:	4b36      	ldr	r3, [pc, #216]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b670:	4618      	mov	r0, r3
 800b672:	f7f5 fa5f 	bl	8000b34 <__addsf3>
 800b676:	4603      	mov	r3, r0
 800b678:	461a      	mov	r2, r3
 800b67a:	4b32      	ldr	r3, [pc, #200]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b67c:	605a      	str	r2, [r3, #4]
				if(y_static_input_co2_value[1] >= CO2_MAX)
 800b67e:	4b31      	ldr	r3, [pc, #196]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	4932      	ldr	r1, [pc, #200]	; (800b74c <Setup_Parameter_Co2_Sensor+0x2d8>)
 800b684:	4618      	mov	r0, r3
 800b686:	f7f5 fd0f 	bl	80010a8 <__aeabi_fcmpge>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <Setup_Parameter_Co2_Sensor+0x222>
				{
					y_static_input_co2_value[1] = CO2_MAX;
 800b690:	4b2c      	ldr	r3, [pc, #176]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b692:	4a2e      	ldr	r2, [pc, #184]	; (800b74c <Setup_Parameter_Co2_Sensor+0x2d8>)
 800b694:	605a      	str	r2, [r3, #4]
				}

			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800b696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b69a:	482b      	ldr	r0, [pc, #172]	; (800b748 <Setup_Parameter_Co2_Sensor+0x2d4>)
 800b69c:	f7f9 fd28 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f040 8139 	bne.w	800b91a <Setup_Parameter_Co2_Sensor+0x4a6>
			{
				HAL_Delay(50);
 800b6a8:	2032      	movs	r0, #50	; 0x32
 800b6aa:	f7f8 fae1 	bl	8003c70 <HAL_Delay>
				y_static_input_co2_value[1]--;
 800b6ae:	4b25      	ldr	r3, [pc, #148]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7f5 fa3a 	bl	8000b30 <__aeabi_fsub>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	461a      	mov	r2, r3
 800b6c0:	4b20      	ldr	r3, [pc, #128]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b6c2:	605a      	str	r2, [r3, #4]
				if(y_static_input_co2_value[1] <= CO2_MIN)
 800b6c4:	4b1f      	ldr	r3, [pc, #124]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	f04f 0100 	mov.w	r1, #0
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7f5 fce1 	bl	8001094 <__aeabi_fcmple>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d100      	bne.n	800b6da <Setup_Parameter_Co2_Sensor+0x266>
				{
					y_static_input_co2_value[1] = CO2_MIN;
				}
			}
			break;
 800b6d8:	e11f      	b.n	800b91a <Setup_Parameter_Co2_Sensor+0x4a6>
					y_static_input_co2_value[1] = CO2_MIN;
 800b6da:	4b1a      	ldr	r3, [pc, #104]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b6dc:	f04f 0200 	mov.w	r2, #0
 800b6e0:	605a      	str	r2, [r3, #4]
			break;
 800b6e2:	e11a      	b.n	800b91a <Setup_Parameter_Co2_Sensor+0x4a6>
		case 4:
			/*Lcd display*/
			Display_Setup_Parameter_Co2(&lcd1, y_static_input_co2_value[1]);
 800b6e4:	4b17      	ldr	r3, [pc, #92]	; (800b744 <Setup_Parameter_Co2_Sensor+0x2d0>)
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7f5 fd17 	bl	800111c <__aeabi_f2uiz>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	4811      	ldr	r0, [pc, #68]	; (800b73c <Setup_Parameter_Co2_Sensor+0x2c8>)
 800b6f6:	f7f7 fa53 	bl	8002ba0 <Display_Setup_Parameter_Co2>
			/*check condition for execution the data reading from co2 sensor*/
			if(check_03 == 2)
 800b6fa:	4b15      	ldr	r3, [pc, #84]	; (800b750 <Setup_Parameter_Co2_Sensor+0x2dc>)
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b02      	cmp	r3, #2
 800b702:	d144      	bne.n	800b78e <Setup_Parameter_Co2_Sensor+0x31a>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_03 <= TIME_WAITTING_START_CALIBRATION)
 800b704:	e002      	b.n	800b70c <Setup_Parameter_Co2_Sensor+0x298>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800b706:	20af      	movs	r0, #175	; 0xaf
 800b708:	f7f8 fa4a 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_03 <= TIME_WAITTING_START_CALIBRATION)
 800b70c:	f7f8 faa6 	bl	8003c5c <HAL_GetTick>
 800b710:	4602      	mov	r2, r0
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	4a0f      	ldr	r2, [pc, #60]	; (800b754 <Setup_Parameter_Co2_Sensor+0x2e0>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d9f4      	bls.n	800b706 <Setup_Parameter_Co2_Sensor+0x292>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800b71c:	20ff      	movs	r0, #255	; 0xff
 800b71e:	f7f8 fa3f 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				x_input_co2_value[1] =  Mh_Z19B_Co2_Sensor_Caclulator_Average(&mh_z19b_sensor_01, 10);
 800b722:	210a      	movs	r1, #10
 800b724:	480c      	ldr	r0, [pc, #48]	; (800b758 <Setup_Parameter_Co2_Sensor+0x2e4>)
 800b726:	f7fc fbed 	bl	8007f04 <Mh_Z19B_Co2_Sensor_Caclulator_Average>
 800b72a:	4603      	mov	r3, r0
 800b72c:	4a0b      	ldr	r2, [pc, #44]	; (800b75c <Setup_Parameter_Co2_Sensor+0x2e8>)
 800b72e:	6053      	str	r3, [r2, #4]
				/*Tonggle buzz after having read data from co2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800b730:	2300      	movs	r3, #0
 800b732:	71bb      	strb	r3, [r7, #6]
 800b734:	e021      	b.n	800b77a <Setup_Parameter_Co2_Sensor+0x306>
 800b736:	bf00      	nop
 800b738:	40011400 	.word	0x40011400
 800b73c:	2000086c 	.word	0x2000086c
 800b740:	20001c36 	.word	0x20001c36
 800b744:	20000048 	.word	0x20000048
 800b748:	40011000 	.word	0x40011000
 800b74c:	447a0000 	.word	0x447a0000
 800b750:	20001c37 	.word	0x20001c37
 800b754:	000493e0 	.word	0x000493e0
 800b758:	20001b1c 	.word	0x20001b1c
 800b75c:	20001bf4 	.word	0x20001bf4
 800b760:	40011800 	.word	0x40011800
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800b764:	2101      	movs	r1, #1
 800b766:	4873      	ldr	r0, [pc, #460]	; (800b934 <Setup_Parameter_Co2_Sensor+0x4c0>)
 800b768:	f7f9 fcf1 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800b76c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b770:	f7f8 fa7e 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800b774:	79bb      	ldrb	r3, [r7, #6]
 800b776:	3301      	adds	r3, #1
 800b778:	71bb      	strb	r3, [r7, #6]
 800b77a:	79bb      	ldrb	r3, [r7, #6]
 800b77c:	2b04      	cmp	r3, #4
 800b77e:	d9f1      	bls.n	800b764 <Setup_Parameter_Co2_Sensor+0x2f0>
				}
				/*increase variable by 1 unit*/
				check_03 ++;
 800b780:	4b6d      	ldr	r3, [pc, #436]	; (800b938 <Setup_Parameter_Co2_Sensor+0x4c4>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	b2db      	uxtb	r3, r3
 800b786:	3301      	adds	r3, #1
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	4b6b      	ldr	r3, [pc, #428]	; (800b938 <Setup_Parameter_Co2_Sensor+0x4c4>)
 800b78c:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from co2 sensor*/
			if(check_03 == 3)
 800b78e:	4b6a      	ldr	r3, [pc, #424]	; (800b938 <Setup_Parameter_Co2_Sensor+0x4c4>)
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b2db      	uxtb	r3, r3
 800b794:	2b03      	cmp	r3, #3
 800b796:	f040 80c2 	bne.w	800b91e <Setup_Parameter_Co2_Sensor+0x4aa>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800b79a:	2200      	movs	r2, #0
 800b79c:	2101      	movs	r1, #1
 800b79e:	4865      	ldr	r0, [pc, #404]	; (800b934 <Setup_Parameter_Co2_Sensor+0x4c0>)
 800b7a0:	f7f9 fcbd 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Done(&lcd1, x_input_co2_value[1]);
 800b7a4:	4b65      	ldr	r3, [pc, #404]	; (800b93c <Setup_Parameter_Co2_Sensor+0x4c8>)
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4865      	ldr	r0, [pc, #404]	; (800b940 <Setup_Parameter_Co2_Sensor+0x4cc>)
 800b7ac:	f7f7 fffe 	bl	80037ac <Display_Done>
			}
			break;
 800b7b0:	e0b5      	b.n	800b91e <Setup_Parameter_Co2_Sensor+0x4aa>

		/*set up value co2 pm 525 - 845*/
		case 5:
			/*lcd display option*/
			Display_Setup_Parameter_Co2(&lcd1, y_static_input_co2_value[2]);
 800b7b2:	4b64      	ldr	r3, [pc, #400]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7f5 fcb0 	bl	800111c <__aeabi_f2uiz>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	485f      	ldr	r0, [pc, #380]	; (800b940 <Setup_Parameter_Co2_Sensor+0x4cc>)
 800b7c4:	f7f7 f9ec 	bl	8002ba0 <Display_Setup_Parameter_Co2>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800b7c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b7cc:	485e      	ldr	r0, [pc, #376]	; (800b948 <Setup_Parameter_Co2_Sensor+0x4d4>)
 800b7ce:	f7f9 fc8f 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d119      	bne.n	800b80c <Setup_Parameter_Co2_Sensor+0x398>
			{
				HAL_Delay(50);
 800b7d8:	2032      	movs	r0, #50	; 0x32
 800b7da:	f7f8 fa49 	bl	8003c70 <HAL_Delay>
				y_static_input_co2_value[2]++;
 800b7de:	4b59      	ldr	r3, [pc, #356]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7f5 f9a4 	bl	8000b34 <__addsf3>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	4b54      	ldr	r3, [pc, #336]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b7f2:	609a      	str	r2, [r3, #8]
				if(y_static_input_co2_value[2] >= CO2_MAX)
 800b7f4:	4b53      	ldr	r3, [pc, #332]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	4954      	ldr	r1, [pc, #336]	; (800b94c <Setup_Parameter_Co2_Sensor+0x4d8>)
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7f5 fc54 	bl	80010a8 <__aeabi_fcmpge>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <Setup_Parameter_Co2_Sensor+0x398>
				{
					y_static_input_co2_value[2] = CO2_MAX;
 800b806:	4b4f      	ldr	r3, [pc, #316]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b808:	4a50      	ldr	r2, [pc, #320]	; (800b94c <Setup_Parameter_Co2_Sensor+0x4d8>)
 800b80a:	609a      	str	r2, [r3, #8]
				}

			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800b80c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b810:	484d      	ldr	r0, [pc, #308]	; (800b948 <Setup_Parameter_Co2_Sensor+0x4d4>)
 800b812:	f7f9 fc6d 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f040 8082 	bne.w	800b922 <Setup_Parameter_Co2_Sensor+0x4ae>
			{
				HAL_Delay(50);
 800b81e:	2032      	movs	r0, #50	; 0x32
 800b820:	f7f8 fa26 	bl	8003c70 <HAL_Delay>
				y_static_input_co2_value[2]--;
 800b824:	4b47      	ldr	r3, [pc, #284]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7f5 f97f 	bl	8000b30 <__aeabi_fsub>
 800b832:	4603      	mov	r3, r0
 800b834:	461a      	mov	r2, r3
 800b836:	4b43      	ldr	r3, [pc, #268]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b838:	609a      	str	r2, [r3, #8]
				if(y_static_input_co2_value[2] <= CO2_MIN)
 800b83a:	4b42      	ldr	r3, [pc, #264]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f04f 0100 	mov.w	r1, #0
 800b842:	4618      	mov	r0, r3
 800b844:	f7f5 fc26 	bl	8001094 <__aeabi_fcmple>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d100      	bne.n	800b850 <Setup_Parameter_Co2_Sensor+0x3dc>
				{
					y_static_input_co2_value[2] = CO2_MIN;
				}
			}
			break;
 800b84e:	e068      	b.n	800b922 <Setup_Parameter_Co2_Sensor+0x4ae>
					y_static_input_co2_value[2] = CO2_MIN;
 800b850:	4b3c      	ldr	r3, [pc, #240]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b852:	f04f 0200 	mov.w	r2, #0
 800b856:	609a      	str	r2, [r3, #8]
			break;
 800b858:	e063      	b.n	800b922 <Setup_Parameter_Co2_Sensor+0x4ae>
		case 6:
			/*Lcd display*/
			Display_Setup_Parameter_Co2(&lcd1, y_static_input_co2_value[2]);
 800b85a:	4b3a      	ldr	r3, [pc, #232]	; (800b944 <Setup_Parameter_Co2_Sensor+0x4d0>)
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f5 fc5c 	bl	800111c <__aeabi_f2uiz>
 800b864:	4603      	mov	r3, r0
 800b866:	b29b      	uxth	r3, r3
 800b868:	4619      	mov	r1, r3
 800b86a:	4835      	ldr	r0, [pc, #212]	; (800b940 <Setup_Parameter_Co2_Sensor+0x4cc>)
 800b86c:	f7f7 f998 	bl	8002ba0 <Display_Setup_Parameter_Co2>
			/*check condition for execution the data reading from co2 sensor*/
			if(check_03 == 3)
 800b870:	4b31      	ldr	r3, [pc, #196]	; (800b938 <Setup_Parameter_Co2_Sensor+0x4c4>)
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b03      	cmp	r3, #3
 800b878:	d12d      	bne.n	800b8d6 <Setup_Parameter_Co2_Sensor+0x462>
			{
				while (HAL_GetTick() - time_wake_up_03 <= TIME_WAITTING_START_CALIBRATION)
 800b87a:	e002      	b.n	800b882 <Setup_Parameter_Co2_Sensor+0x40e>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800b87c:	20af      	movs	r0, #175	; 0xaf
 800b87e:	f7f8 f98f 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_03 <= TIME_WAITTING_START_CALIBRATION)
 800b882:	f7f8 f9eb 	bl	8003c5c <HAL_GetTick>
 800b886:	4602      	mov	r2, r0
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	4a30      	ldr	r2, [pc, #192]	; (800b950 <Setup_Parameter_Co2_Sensor+0x4dc>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d9f4      	bls.n	800b87c <Setup_Parameter_Co2_Sensor+0x408>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800b892:	20ff      	movs	r0, #255	; 0xff
 800b894:	f7f8 f984 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				x_input_co2_value[2] =  Mh_Z19B_Co2_Sensor_Caclulator_Average(&mh_z19b_sensor_01, 10);
 800b898:	210a      	movs	r1, #10
 800b89a:	482e      	ldr	r0, [pc, #184]	; (800b954 <Setup_Parameter_Co2_Sensor+0x4e0>)
 800b89c:	f7fc fb32 	bl	8007f04 <Mh_Z19B_Co2_Sensor_Caclulator_Average>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	4a26      	ldr	r2, [pc, #152]	; (800b93c <Setup_Parameter_Co2_Sensor+0x4c8>)
 800b8a4:	6093      	str	r3, [r2, #8]
				/*Tonggle buzz after having read data from co2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	717b      	strb	r3, [r7, #5]
 800b8aa:	e00a      	b.n	800b8c2 <Setup_Parameter_Co2_Sensor+0x44e>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	4821      	ldr	r0, [pc, #132]	; (800b934 <Setup_Parameter_Co2_Sensor+0x4c0>)
 800b8b0:	f7f9 fc4d 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800b8b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b8b8:	f7f8 f9da 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800b8bc:	797b      	ldrb	r3, [r7, #5]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	717b      	strb	r3, [r7, #5]
 800b8c2:	797b      	ldrb	r3, [r7, #5]
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d9f1      	bls.n	800b8ac <Setup_Parameter_Co2_Sensor+0x438>
				}
				/*increase variable by 1 unit*/
				check_03 ++;
 800b8c8:	4b1b      	ldr	r3, [pc, #108]	; (800b938 <Setup_Parameter_Co2_Sensor+0x4c4>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	4b19      	ldr	r3, [pc, #100]	; (800b938 <Setup_Parameter_Co2_Sensor+0x4c4>)
 800b8d4:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from co2 sensor*/
			if(check_03 == 4)
 800b8d6:	4b18      	ldr	r3, [pc, #96]	; (800b938 <Setup_Parameter_Co2_Sensor+0x4c4>)
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b04      	cmp	r3, #4
 800b8de:	d122      	bne.n	800b926 <Setup_Parameter_Co2_Sensor+0x4b2>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	4813      	ldr	r0, [pc, #76]	; (800b934 <Setup_Parameter_Co2_Sensor+0x4c0>)
 800b8e6:	f7f9 fc1a 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Done(&lcd1, x_input_co2_value[2]);
 800b8ea:	4b14      	ldr	r3, [pc, #80]	; (800b93c <Setup_Parameter_Co2_Sensor+0x4c8>)
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	4813      	ldr	r0, [pc, #76]	; (800b940 <Setup_Parameter_Co2_Sensor+0x4cc>)
 800b8f2:	f7f7 ff5b 	bl	80037ac <Display_Done>
			}
			break;
 800b8f6:	e016      	b.n	800b926 <Setup_Parameter_Co2_Sensor+0x4b2>


		/*Default mode*/
		default:
			/*Lcd set cursor*/
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	4810      	ldr	r0, [pc, #64]	; (800b940 <Setup_Parameter_Co2_Sensor+0x4cc>)
 800b8fe:	f7fc fa2b 	bl	8007d58 <CLCD_I2C_SetCursor>
			/*Lcd send string*/
			CLCD_I2C_WriteString(&lcd1, "Co2 Sensor");
 800b902:	4915      	ldr	r1, [pc, #84]	; (800b958 <Setup_Parameter_Co2_Sensor+0x4e4>)
 800b904:	480e      	ldr	r0, [pc, #56]	; (800b940 <Setup_Parameter_Co2_Sensor+0x4cc>)
 800b906:	f7fc fa7a 	bl	8007dfe <CLCD_I2C_WriteString>
			check_03 = 1;
 800b90a:	4b0b      	ldr	r3, [pc, #44]	; (800b938 <Setup_Parameter_Co2_Sensor+0x4c4>)
 800b90c:	2201      	movs	r2, #1
 800b90e:	701a      	strb	r2, [r3, #0]
			break;
 800b910:	e00a      	b.n	800b928 <Setup_Parameter_Co2_Sensor+0x4b4>
			break;
 800b912:	bf00      	nop
 800b914:	e008      	b.n	800b928 <Setup_Parameter_Co2_Sensor+0x4b4>
			break;
 800b916:	bf00      	nop
 800b918:	e006      	b.n	800b928 <Setup_Parameter_Co2_Sensor+0x4b4>
			break;
 800b91a:	bf00      	nop
 800b91c:	e004      	b.n	800b928 <Setup_Parameter_Co2_Sensor+0x4b4>
			break;
 800b91e:	bf00      	nop
 800b920:	e002      	b.n	800b928 <Setup_Parameter_Co2_Sensor+0x4b4>
			break;
 800b922:	bf00      	nop
 800b924:	e000      	b.n	800b928 <Setup_Parameter_Co2_Sensor+0x4b4>
			break;
 800b926:	bf00      	nop
	}

	    return 0;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	40011800 	.word	0x40011800
 800b938:	20001c37 	.word	0x20001c37
 800b93c:	20001bf4 	.word	0x20001bf4
 800b940:	2000086c 	.word	0x2000086c
 800b944:	20000048 	.word	0x20000048
 800b948:	40011000 	.word	0x40011000
 800b94c:	447a0000 	.word	0x447a0000
 800b950:	000493e0 	.word	0x000493e0
 800b954:	20001b1c 	.word	0x20001b1c
 800b958:	0801138c 	.word	0x0801138c

0800b95c <Setup_Parameter_So2_Sensor>:
 * @brief Setup_Parameter_So2_Sensor
 *
 * @return uint8_t
 */
static uint8_t Setup_Parameter_So2_Sensor(void)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_setup_parameter_so2_sensor = 0;
	static __IO uint8_t check_04 = 0;
	uint32_t time_wake_up_04 = HAL_GetTick();
 800b962:	f7f8 f97b 	bl	8003c5c <HAL_GetTick>
 800b966:	6038      	str	r0, [r7, #0]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800b968:	2140      	movs	r1, #64	; 0x40
 800b96a:	48ad      	ldr	r0, [pc, #692]	; (800bc20 <Setup_Parameter_So2_Sensor+0x2c4>)
 800b96c:	f7f9 fbc0 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b970:	4603      	mov	r3, r0
 800b972:	2b01      	cmp	r3, #1
 800b974:	d11b      	bne.n	800b9ae <Setup_Parameter_So2_Sensor+0x52>
	{
		HAL_Delay(100);
 800b976:	2064      	movs	r0, #100	; 0x64
 800b978:	f7f8 f97a 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800b97c:	2140      	movs	r1, #64	; 0x40
 800b97e:	48a8      	ldr	r0, [pc, #672]	; (800bc20 <Setup_Parameter_So2_Sensor+0x2c4>)
 800b980:	f7f9 fbb6 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b984:	4603      	mov	r3, r0
 800b986:	2b01      	cmp	r3, #1
 800b988:	d111      	bne.n	800b9ae <Setup_Parameter_So2_Sensor+0x52>
		{
			/*Lcd clear*/
			CLCD_I2C_Clear(&lcd1);
 800b98a:	48a6      	ldr	r0, [pc, #664]	; (800bc24 <Setup_Parameter_So2_Sensor+0x2c8>)
 800b98c:	f7fc fa4e 	bl	8007e2c <CLCD_I2C_Clear>
			mode_setup_parameter_so2_sensor++;
 800b990:	4ba5      	ldr	r3, [pc, #660]	; (800bc28 <Setup_Parameter_So2_Sensor+0x2cc>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	b2db      	uxtb	r3, r3
 800b996:	3301      	adds	r3, #1
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	4ba3      	ldr	r3, [pc, #652]	; (800bc28 <Setup_Parameter_So2_Sensor+0x2cc>)
 800b99c:	701a      	strb	r2, [r3, #0]
			if(mode_setup_parameter_so2_sensor > MODE_MAX_CALIBRATION_GROUP_SENSOR)
 800b99e:	4ba2      	ldr	r3, [pc, #648]	; (800bc28 <Setup_Parameter_So2_Sensor+0x2cc>)
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b06      	cmp	r3, #6
 800b9a6:	d902      	bls.n	800b9ae <Setup_Parameter_So2_Sensor+0x52>
				mode_setup_parameter_so2_sensor = MODE_MIN_CALIBRATION_GROUP_SENSOR;
 800b9a8:	4b9f      	ldr	r3, [pc, #636]	; (800bc28 <Setup_Parameter_So2_Sensor+0x2cc>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	701a      	strb	r2, [r3, #0]
   /*
	*setting measurement condition so2 pm sensor
	*
	* */

	switch (mode_setup_parameter_so2_sensor)
 800b9ae:	4b9e      	ldr	r3, [pc, #632]	; (800bc28 <Setup_Parameter_So2_Sensor+0x2cc>)
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	2b05      	cmp	r3, #5
 800b9b8:	f200 8212 	bhi.w	800bde0 <Setup_Parameter_So2_Sensor+0x484>
 800b9bc:	a201      	add	r2, pc, #4	; (adr r2, 800b9c4 <Setup_Parameter_So2_Sensor+0x68>)
 800b9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c2:	bf00      	nop
 800b9c4:	0800b9dd 	.word	0x0800b9dd
 800b9c8:	0800ba85 	.word	0x0800ba85
 800b9cc:	0800bb25 	.word	0x0800bb25
 800b9d0:	0800bbcd 	.word	0x0800bbcd
 800b9d4:	0800bc9b 	.word	0x0800bc9b
 800b9d8:	0800bd43 	.word	0x0800bd43
	{
		/*set up value so2 pm 0 - 235*/
		case 1:
			/*lcd display option*/
			Display_Setup_Parameter_So2(&lcd1, y_static_input_so2_value[0]);
 800b9dc:	4b93      	ldr	r3, [pc, #588]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7f5 fb9b 	bl	800111c <__aeabi_f2uiz>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	488d      	ldr	r0, [pc, #564]	; (800bc24 <Setup_Parameter_So2_Sensor+0x2c8>)
 800b9ee:	f7f7 fa87 	bl	8002f00 <Display_Setup_Parameter_So2>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800b9f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b9f6:	488e      	ldr	r0, [pc, #568]	; (800bc30 <Setup_Parameter_So2_Sensor+0x2d4>)
 800b9f8:	f7f9 fb7a 	bl	80050f0 <HAL_GPIO_ReadPin>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d119      	bne.n	800ba36 <Setup_Parameter_So2_Sensor+0xda>
			{
				HAL_Delay(50);
 800ba02:	2032      	movs	r0, #50	; 0x32
 800ba04:	f7f8 f934 	bl	8003c70 <HAL_Delay>
				y_static_input_so2_value[0]++;
 800ba08:	4b88      	ldr	r3, [pc, #544]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7f5 f88f 	bl	8000b34 <__addsf3>
 800ba16:	4603      	mov	r3, r0
 800ba18:	461a      	mov	r2, r3
 800ba1a:	4b84      	ldr	r3, [pc, #528]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800ba1c:	601a      	str	r2, [r3, #0]
				if(y_static_input_so2_value[0] >= SO2_MAX)
 800ba1e:	4b83      	ldr	r3, [pc, #524]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4984      	ldr	r1, [pc, #528]	; (800bc34 <Setup_Parameter_So2_Sensor+0x2d8>)
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f5 fb3f 	bl	80010a8 <__aeabi_fcmpge>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <Setup_Parameter_So2_Sensor+0xda>
				{
					y_static_input_so2_value[0]= SO2_MAX;
 800ba30:	4b7e      	ldr	r3, [pc, #504]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800ba32:	4a80      	ldr	r2, [pc, #512]	; (800bc34 <Setup_Parameter_So2_Sensor+0x2d8>)
 800ba34:	601a      	str	r2, [r3, #0]
				}

			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800ba36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba3a:	487d      	ldr	r0, [pc, #500]	; (800bc30 <Setup_Parameter_So2_Sensor+0x2d4>)
 800ba3c:	f7f9 fb58 	bl	80050f0 <HAL_GPIO_ReadPin>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f040 81d9 	bne.w	800bdfa <Setup_Parameter_So2_Sensor+0x49e>
			{
				HAL_Delay(50);
 800ba48:	2032      	movs	r0, #50	; 0x32
 800ba4a:	f7f8 f911 	bl	8003c70 <HAL_Delay>
				y_static_input_so2_value[0]--;
 800ba4e:	4b77      	ldr	r3, [pc, #476]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f5 f86a 	bl	8000b30 <__aeabi_fsub>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461a      	mov	r2, r3
 800ba60:	4b72      	ldr	r3, [pc, #456]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800ba62:	601a      	str	r2, [r3, #0]
				if(y_static_input_so2_value[0] <= SO2_MIN)
 800ba64:	4b71      	ldr	r3, [pc, #452]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f04f 0100 	mov.w	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7f5 fb11 	bl	8001094 <__aeabi_fcmple>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d100      	bne.n	800ba7a <Setup_Parameter_So2_Sensor+0x11e>
				{
					y_static_input_so2_value[0]= SO2_MIN;
				}
			}
			break;
 800ba78:	e1bf      	b.n	800bdfa <Setup_Parameter_So2_Sensor+0x49e>
					y_static_input_so2_value[0]= SO2_MIN;
 800ba7a:	4b6c      	ldr	r3, [pc, #432]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800ba7c:	f04f 0200 	mov.w	r2, #0
 800ba80:	601a      	str	r2, [r3, #0]
			break;
 800ba82:	e1ba      	b.n	800bdfa <Setup_Parameter_So2_Sensor+0x49e>
		case 2:
			/*lcd display option*/
			Display_Setup_Parameter_So2(&lcd1, y_static_input_so2_value[0]);
 800ba84:	4b69      	ldr	r3, [pc, #420]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7f5 fb47 	bl	800111c <__aeabi_f2uiz>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	4619      	mov	r1, r3
 800ba94:	4863      	ldr	r0, [pc, #396]	; (800bc24 <Setup_Parameter_So2_Sensor+0x2c8>)
 800ba96:	f7f7 fa33 	bl	8002f00 <Display_Setup_Parameter_So2>
			/*check condition for execution the data reading from So2 sensor*/
			if(check_04 == 1)
 800ba9a:	4b67      	ldr	r3, [pc, #412]	; (800bc38 <Setup_Parameter_So2_Sensor+0x2dc>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d12d      	bne.n	800bb00 <Setup_Parameter_So2_Sensor+0x1a4>
			{
				while (HAL_GetTick() - time_wake_up_04 <= TIME_WAITTING_START_CALIBRATION)
 800baa4:	e002      	b.n	800baac <Setup_Parameter_So2_Sensor+0x150>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800baa6:	20af      	movs	r0, #175	; 0xaf
 800baa8:	f7f8 f87a 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_04 <= TIME_WAITTING_START_CALIBRATION)
 800baac:	f7f8 f8d6 	bl	8003c5c <HAL_GetTick>
 800bab0:	4602      	mov	r2, r0
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	4a61      	ldr	r2, [pc, #388]	; (800bc3c <Setup_Parameter_So2_Sensor+0x2e0>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d9f4      	bls.n	800baa6 <Setup_Parameter_So2_Sensor+0x14a>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800babc:	20ff      	movs	r0, #255	; 0xff
 800babe:	f7f8 f86f 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				x_input_so2_pm_value[0] =  hx711_so2_result(&so2_sensor, 10);
 800bac2:	210a      	movs	r1, #10
 800bac4:	485e      	ldr	r0, [pc, #376]	; (800bc40 <Setup_Parameter_So2_Sensor+0x2e4>)
 800bac6:	f002 faff 	bl	800e0c8 <hx711_so2_result>
 800baca:	4603      	mov	r3, r0
 800bacc:	4a5d      	ldr	r2, [pc, #372]	; (800bc44 <Setup_Parameter_So2_Sensor+0x2e8>)
 800bace:	6013      	str	r3, [r2, #0]
				/*Tonggle buzz after having read data from so2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800bad0:	2300      	movs	r3, #0
 800bad2:	71fb      	strb	r3, [r7, #7]
 800bad4:	e00a      	b.n	800baec <Setup_Parameter_So2_Sensor+0x190>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800bad6:	2101      	movs	r1, #1
 800bad8:	485b      	ldr	r0, [pc, #364]	; (800bc48 <Setup_Parameter_So2_Sensor+0x2ec>)
 800bada:	f7f9 fb38 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800bade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bae2:	f7f8 f8c5 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800bae6:	79fb      	ldrb	r3, [r7, #7]
 800bae8:	3301      	adds	r3, #1
 800baea:	71fb      	strb	r3, [r7, #7]
 800baec:	79fb      	ldrb	r3, [r7, #7]
 800baee:	2b04      	cmp	r3, #4
 800baf0:	d9f1      	bls.n	800bad6 <Setup_Parameter_So2_Sensor+0x17a>
				}
				/*increase variable by 1 unit*/
				check_04 ++;
 800baf2:	4b51      	ldr	r3, [pc, #324]	; (800bc38 <Setup_Parameter_So2_Sensor+0x2dc>)
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	3301      	adds	r3, #1
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	4b4e      	ldr	r3, [pc, #312]	; (800bc38 <Setup_Parameter_So2_Sensor+0x2dc>)
 800bafe:	701a      	strb	r2, [r3, #0]
			}
		     /*check condition when finished reading data from so2 sensor*/
			if(check_04 == 2)
 800bb00:	4b4d      	ldr	r3, [pc, #308]	; (800bc38 <Setup_Parameter_So2_Sensor+0x2dc>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	f040 8179 	bne.w	800bdfe <Setup_Parameter_So2_Sensor+0x4a2>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2101      	movs	r1, #1
 800bb10:	484d      	ldr	r0, [pc, #308]	; (800bc48 <Setup_Parameter_So2_Sensor+0x2ec>)
 800bb12:	f7f9 fb04 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Done(&lcd1, x_input_so2_pm_value[0] );
 800bb16:	4b4b      	ldr	r3, [pc, #300]	; (800bc44 <Setup_Parameter_So2_Sensor+0x2e8>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4841      	ldr	r0, [pc, #260]	; (800bc24 <Setup_Parameter_So2_Sensor+0x2c8>)
 800bb1e:	f7f7 fe45 	bl	80037ac <Display_Done>
			}
			break;
 800bb22:	e16c      	b.n	800bdfe <Setup_Parameter_So2_Sensor+0x4a2>

		/*set up value so2 pm 235 - 565*/
		case 3:
			/*lcd display option*/
			Display_Setup_Parameter_So2(&lcd1, y_static_input_so2_value[1]);
 800bb24:	4b41      	ldr	r3, [pc, #260]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7f5 faf7 	bl	800111c <__aeabi_f2uiz>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	4619      	mov	r1, r3
 800bb34:	483b      	ldr	r0, [pc, #236]	; (800bc24 <Setup_Parameter_So2_Sensor+0x2c8>)
 800bb36:	f7f7 f9e3 	bl	8002f00 <Display_Setup_Parameter_So2>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800bb3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bb3e:	483c      	ldr	r0, [pc, #240]	; (800bc30 <Setup_Parameter_So2_Sensor+0x2d4>)
 800bb40:	f7f9 fad6 	bl	80050f0 <HAL_GPIO_ReadPin>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d119      	bne.n	800bb7e <Setup_Parameter_So2_Sensor+0x222>
			{
				HAL_Delay(50);
 800bb4a:	2032      	movs	r0, #50	; 0x32
 800bb4c:	f7f8 f890 	bl	8003c70 <HAL_Delay>
				y_static_input_so2_value[1]++;
 800bb50:	4b36      	ldr	r3, [pc, #216]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7f4 ffeb 	bl	8000b34 <__addsf3>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	461a      	mov	r2, r3
 800bb62:	4b32      	ldr	r3, [pc, #200]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bb64:	605a      	str	r2, [r3, #4]
				if(y_static_input_so2_value[1] >= SO2_MAX)
 800bb66:	4b31      	ldr	r3, [pc, #196]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	4932      	ldr	r1, [pc, #200]	; (800bc34 <Setup_Parameter_So2_Sensor+0x2d8>)
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7f5 fa9b 	bl	80010a8 <__aeabi_fcmpge>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <Setup_Parameter_So2_Sensor+0x222>
				{
					y_static_input_so2_value[1]= SO2_MAX;
 800bb78:	4b2c      	ldr	r3, [pc, #176]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bb7a:	4a2e      	ldr	r2, [pc, #184]	; (800bc34 <Setup_Parameter_So2_Sensor+0x2d8>)
 800bb7c:	605a      	str	r2, [r3, #4]
				}

			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800bb7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bb82:	482b      	ldr	r0, [pc, #172]	; (800bc30 <Setup_Parameter_So2_Sensor+0x2d4>)
 800bb84:	f7f9 fab4 	bl	80050f0 <HAL_GPIO_ReadPin>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f040 8139 	bne.w	800be02 <Setup_Parameter_So2_Sensor+0x4a6>
			{
				HAL_Delay(50);
 800bb90:	2032      	movs	r0, #50	; 0x32
 800bb92:	f7f8 f86d 	bl	8003c70 <HAL_Delay>
				y_static_input_so2_value[1]--;
 800bb96:	4b25      	ldr	r3, [pc, #148]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7f4 ffc6 	bl	8000b30 <__aeabi_fsub>
 800bba4:	4603      	mov	r3, r0
 800bba6:	461a      	mov	r2, r3
 800bba8:	4b20      	ldr	r3, [pc, #128]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bbaa:	605a      	str	r2, [r3, #4]
				if(y_static_input_so2_value[1] <= SO2_MIN)
 800bbac:	4b1f      	ldr	r3, [pc, #124]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	f04f 0100 	mov.w	r1, #0
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7f5 fa6d 	bl	8001094 <__aeabi_fcmple>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d100      	bne.n	800bbc2 <Setup_Parameter_So2_Sensor+0x266>
				{
					y_static_input_so2_value[1]= SO2_MIN;
				}
			}
			break;
 800bbc0:	e11f      	b.n	800be02 <Setup_Parameter_So2_Sensor+0x4a6>
					y_static_input_so2_value[1]= SO2_MIN;
 800bbc2:	4b1a      	ldr	r3, [pc, #104]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bbc4:	f04f 0200 	mov.w	r2, #0
 800bbc8:	605a      	str	r2, [r3, #4]
			break;
 800bbca:	e11a      	b.n	800be02 <Setup_Parameter_So2_Sensor+0x4a6>
		case 4:
			/*Lcd display*/
			Display_Setup_Parameter_So2(&lcd1, y_static_input_so2_value[1]);
 800bbcc:	4b17      	ldr	r3, [pc, #92]	; (800bc2c <Setup_Parameter_So2_Sensor+0x2d0>)
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7f5 faa3 	bl	800111c <__aeabi_f2uiz>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4811      	ldr	r0, [pc, #68]	; (800bc24 <Setup_Parameter_So2_Sensor+0x2c8>)
 800bbde:	f7f7 f98f 	bl	8002f00 <Display_Setup_Parameter_So2>
			/*check condition for execution the data reading from So2 sensor*/
			if(check_04 == 2)
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <Setup_Parameter_So2_Sensor+0x2dc>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d144      	bne.n	800bc76 <Setup_Parameter_So2_Sensor+0x31a>
			{
				while (HAL_GetTick() - time_wake_up_04 <= TIME_WAITTING_START_CALIBRATION)
 800bbec:	e002      	b.n	800bbf4 <Setup_Parameter_So2_Sensor+0x298>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800bbee:	20af      	movs	r0, #175	; 0xaf
 800bbf0:	f7f7 ffd6 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_04 <= TIME_WAITTING_START_CALIBRATION)
 800bbf4:	f7f8 f832 	bl	8003c5c <HAL_GetTick>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	4a0f      	ldr	r2, [pc, #60]	; (800bc3c <Setup_Parameter_So2_Sensor+0x2e0>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d9f4      	bls.n	800bbee <Setup_Parameter_So2_Sensor+0x292>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800bc04:	20ff      	movs	r0, #255	; 0xff
 800bc06:	f7f7 ffcb 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				x_input_so2_pm_value[1] =  hx711_so2_result(&so2_sensor, 10);
 800bc0a:	210a      	movs	r1, #10
 800bc0c:	480c      	ldr	r0, [pc, #48]	; (800bc40 <Setup_Parameter_So2_Sensor+0x2e4>)
 800bc0e:	f002 fa5b 	bl	800e0c8 <hx711_so2_result>
 800bc12:	4603      	mov	r3, r0
 800bc14:	4a0b      	ldr	r2, [pc, #44]	; (800bc44 <Setup_Parameter_So2_Sensor+0x2e8>)
 800bc16:	6053      	str	r3, [r2, #4]
				/*Tonggle buzz after having read data from so2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800bc18:	2300      	movs	r3, #0
 800bc1a:	71bb      	strb	r3, [r7, #6]
 800bc1c:	e021      	b.n	800bc62 <Setup_Parameter_So2_Sensor+0x306>
 800bc1e:	bf00      	nop
 800bc20:	40011400 	.word	0x40011400
 800bc24:	2000086c 	.word	0x2000086c
 800bc28:	20001c38 	.word	0x20001c38
 800bc2c:	20000054 	.word	0x20000054
 800bc30:	40011000 	.word	0x40011000
 800bc34:	447a0000 	.word	0x447a0000
 800bc38:	20001c39 	.word	0x20001c39
 800bc3c:	000493e0 	.word	0x000493e0
 800bc40:	20001ba8 	.word	0x20001ba8
 800bc44:	20001c00 	.word	0x20001c00
 800bc48:	40011800 	.word	0x40011800
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	4873      	ldr	r0, [pc, #460]	; (800be1c <Setup_Parameter_So2_Sensor+0x4c0>)
 800bc50:	f7f9 fa7d 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800bc54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bc58:	f7f8 f80a 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800bc5c:	79bb      	ldrb	r3, [r7, #6]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	71bb      	strb	r3, [r7, #6]
 800bc62:	79bb      	ldrb	r3, [r7, #6]
 800bc64:	2b04      	cmp	r3, #4
 800bc66:	d9f1      	bls.n	800bc4c <Setup_Parameter_So2_Sensor+0x2f0>
				}
				/*increase variable by 1 unit*/
				check_04++;
 800bc68:	4b6d      	ldr	r3, [pc, #436]	; (800be20 <Setup_Parameter_So2_Sensor+0x4c4>)
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	3301      	adds	r3, #1
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	4b6b      	ldr	r3, [pc, #428]	; (800be20 <Setup_Parameter_So2_Sensor+0x4c4>)
 800bc74:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from so2 sensor*/
			if(check_04 == 3)
 800bc76:	4b6a      	ldr	r3, [pc, #424]	; (800be20 <Setup_Parameter_So2_Sensor+0x4c4>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	f040 80c2 	bne.w	800be06 <Setup_Parameter_So2_Sensor+0x4aa>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800bc82:	2200      	movs	r2, #0
 800bc84:	2101      	movs	r1, #1
 800bc86:	4865      	ldr	r0, [pc, #404]	; (800be1c <Setup_Parameter_So2_Sensor+0x4c0>)
 800bc88:	f7f9 fa49 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Done(&lcd1,x_input_so2_pm_value[1] );
 800bc8c:	4b65      	ldr	r3, [pc, #404]	; (800be24 <Setup_Parameter_So2_Sensor+0x4c8>)
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	4619      	mov	r1, r3
 800bc92:	4865      	ldr	r0, [pc, #404]	; (800be28 <Setup_Parameter_So2_Sensor+0x4cc>)
 800bc94:	f7f7 fd8a 	bl	80037ac <Display_Done>
			}
			break;
 800bc98:	e0b5      	b.n	800be06 <Setup_Parameter_So2_Sensor+0x4aa>

		/*set up value so2 pm 535 - 855*/
		case 5:
			/*lcd display option*/
			Display_Setup_Parameter_So2(&lcd1, y_static_input_so2_value[2]);
 800bc9a:	4b64      	ldr	r3, [pc, #400]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7f5 fa3c 	bl	800111c <__aeabi_f2uiz>
 800bca4:	4603      	mov	r3, r0
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	4619      	mov	r1, r3
 800bcaa:	485f      	ldr	r0, [pc, #380]	; (800be28 <Setup_Parameter_So2_Sensor+0x4cc>)
 800bcac:	f7f7 f928 	bl	8002f00 <Display_Setup_Parameter_So2>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800bcb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bcb4:	485e      	ldr	r0, [pc, #376]	; (800be30 <Setup_Parameter_So2_Sensor+0x4d4>)
 800bcb6:	f7f9 fa1b 	bl	80050f0 <HAL_GPIO_ReadPin>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d119      	bne.n	800bcf4 <Setup_Parameter_So2_Sensor+0x398>
			{
				HAL_Delay(50);
 800bcc0:	2032      	movs	r0, #50	; 0x32
 800bcc2:	f7f7 ffd5 	bl	8003c70 <HAL_Delay>
				y_static_input_so2_value[2]++;
 800bcc6:	4b59      	ldr	r3, [pc, #356]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7f4 ff30 	bl	8000b34 <__addsf3>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	4b54      	ldr	r3, [pc, #336]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bcda:	609a      	str	r2, [r3, #8]
				if(y_static_input_so2_value[2] >= SO2_MAX)
 800bcdc:	4b53      	ldr	r3, [pc, #332]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	4954      	ldr	r1, [pc, #336]	; (800be34 <Setup_Parameter_So2_Sensor+0x4d8>)
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7f5 f9e0 	bl	80010a8 <__aeabi_fcmpge>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <Setup_Parameter_So2_Sensor+0x398>
				{
					y_static_input_so2_value[2]= SO2_MAX;
 800bcee:	4b4f      	ldr	r3, [pc, #316]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bcf0:	4a50      	ldr	r2, [pc, #320]	; (800be34 <Setup_Parameter_So2_Sensor+0x4d8>)
 800bcf2:	609a      	str	r2, [r3, #8]
				}

			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800bcf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bcf8:	484d      	ldr	r0, [pc, #308]	; (800be30 <Setup_Parameter_So2_Sensor+0x4d4>)
 800bcfa:	f7f9 f9f9 	bl	80050f0 <HAL_GPIO_ReadPin>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f040 8082 	bne.w	800be0a <Setup_Parameter_So2_Sensor+0x4ae>
			{
				HAL_Delay(50);
 800bd06:	2032      	movs	r0, #50	; 0x32
 800bd08:	f7f7 ffb2 	bl	8003c70 <HAL_Delay>
				y_static_input_so2_value[2]--;
 800bd0c:	4b47      	ldr	r3, [pc, #284]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7f4 ff0b 	bl	8000b30 <__aeabi_fsub>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	4b43      	ldr	r3, [pc, #268]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bd20:	609a      	str	r2, [r3, #8]
				if(y_static_input_so2_value[2] <= SO2_MIN)
 800bd22:	4b42      	ldr	r3, [pc, #264]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	f04f 0100 	mov.w	r1, #0
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7f5 f9b2 	bl	8001094 <__aeabi_fcmple>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d100      	bne.n	800bd38 <Setup_Parameter_So2_Sensor+0x3dc>
				{
					y_static_input_so2_value[2]= SO2_MIN;
				}
			}
			break;
 800bd36:	e068      	b.n	800be0a <Setup_Parameter_So2_Sensor+0x4ae>
					y_static_input_so2_value[2]= SO2_MIN;
 800bd38:	4b3c      	ldr	r3, [pc, #240]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bd3a:	f04f 0200 	mov.w	r2, #0
 800bd3e:	609a      	str	r2, [r3, #8]
			break;
 800bd40:	e063      	b.n	800be0a <Setup_Parameter_So2_Sensor+0x4ae>
		case 6:
			/*Lcd display*/
			Display_Setup_Parameter_So2(&lcd1, y_static_input_so2_value[2]);
 800bd42:	4b3a      	ldr	r3, [pc, #232]	; (800be2c <Setup_Parameter_So2_Sensor+0x4d0>)
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7f5 f9e8 	bl	800111c <__aeabi_f2uiz>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	4619      	mov	r1, r3
 800bd52:	4835      	ldr	r0, [pc, #212]	; (800be28 <Setup_Parameter_So2_Sensor+0x4cc>)
 800bd54:	f7f7 f8d4 	bl	8002f00 <Display_Setup_Parameter_So2>
			/*check condition for execution the data reading from So2 sensor*/
			if(check_04 == 3)
 800bd58:	4b31      	ldr	r3, [pc, #196]	; (800be20 <Setup_Parameter_So2_Sensor+0x4c4>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d12d      	bne.n	800bdbe <Setup_Parameter_So2_Sensor+0x462>
			{
				while (HAL_GetTick() - time_wake_up_04 <= TIME_WAITTING_START_CALIBRATION)
 800bd62:	e002      	b.n	800bd6a <Setup_Parameter_So2_Sensor+0x40e>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800bd64:	20af      	movs	r0, #175	; 0xaf
 800bd66:	f7f7 ff1b 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_04 <= TIME_WAITTING_START_CALIBRATION)
 800bd6a:	f7f7 ff77 	bl	8003c5c <HAL_GetTick>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	4a30      	ldr	r2, [pc, #192]	; (800be38 <Setup_Parameter_So2_Sensor+0x4dc>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d9f4      	bls.n	800bd64 <Setup_Parameter_So2_Sensor+0x408>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800bd7a:	20ff      	movs	r0, #255	; 0xff
 800bd7c:	f7f7 ff10 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				x_input_so2_pm_value[2] =  hx711_so2_result(&so2_sensor, 10);
 800bd80:	210a      	movs	r1, #10
 800bd82:	482e      	ldr	r0, [pc, #184]	; (800be3c <Setup_Parameter_So2_Sensor+0x4e0>)
 800bd84:	f002 f9a0 	bl	800e0c8 <hx711_so2_result>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	4a26      	ldr	r2, [pc, #152]	; (800be24 <Setup_Parameter_So2_Sensor+0x4c8>)
 800bd8c:	6093      	str	r3, [r2, #8]
				/*Tonggle buzz after having read data from so2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800bd8e:	2300      	movs	r3, #0
 800bd90:	717b      	strb	r3, [r7, #5]
 800bd92:	e00a      	b.n	800bdaa <Setup_Parameter_So2_Sensor+0x44e>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800bd94:	2101      	movs	r1, #1
 800bd96:	4821      	ldr	r0, [pc, #132]	; (800be1c <Setup_Parameter_So2_Sensor+0x4c0>)
 800bd98:	f7f9 f9d9 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800bd9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bda0:	f7f7 ff66 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800bda4:	797b      	ldrb	r3, [r7, #5]
 800bda6:	3301      	adds	r3, #1
 800bda8:	717b      	strb	r3, [r7, #5]
 800bdaa:	797b      	ldrb	r3, [r7, #5]
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	d9f1      	bls.n	800bd94 <Setup_Parameter_So2_Sensor+0x438>
				}
				/*increase variable by 1 unit*/
				check_04++;
 800bdb0:	4b1b      	ldr	r3, [pc, #108]	; (800be20 <Setup_Parameter_So2_Sensor+0x4c4>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	4b19      	ldr	r3, [pc, #100]	; (800be20 <Setup_Parameter_So2_Sensor+0x4c4>)
 800bdbc:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from so2 sensor*/
			if(check_04 == 4)
 800bdbe:	4b18      	ldr	r3, [pc, #96]	; (800be20 <Setup_Parameter_So2_Sensor+0x4c4>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	2b04      	cmp	r3, #4
 800bdc6:	d122      	bne.n	800be0e <Setup_Parameter_So2_Sensor+0x4b2>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2101      	movs	r1, #1
 800bdcc:	4813      	ldr	r0, [pc, #76]	; (800be1c <Setup_Parameter_So2_Sensor+0x4c0>)
 800bdce:	f7f9 f9a6 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Done(&lcd1, x_input_so2_pm_value[2]);
 800bdd2:	4b14      	ldr	r3, [pc, #80]	; (800be24 <Setup_Parameter_So2_Sensor+0x4c8>)
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4813      	ldr	r0, [pc, #76]	; (800be28 <Setup_Parameter_So2_Sensor+0x4cc>)
 800bdda:	f7f7 fce7 	bl	80037ac <Display_Done>
			}
			break;
 800bdde:	e016      	b.n	800be0e <Setup_Parameter_So2_Sensor+0x4b2>

		/*Default mode*/
		default:
			/*lcd set cursor*/
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800bde0:	2200      	movs	r2, #0
 800bde2:	2100      	movs	r1, #0
 800bde4:	4810      	ldr	r0, [pc, #64]	; (800be28 <Setup_Parameter_So2_Sensor+0x4cc>)
 800bde6:	f7fb ffb7 	bl	8007d58 <CLCD_I2C_SetCursor>
			/*Lcd send string*/
			CLCD_I2C_WriteString(&lcd1, "So2 Sensor");
 800bdea:	4915      	ldr	r1, [pc, #84]	; (800be40 <Setup_Parameter_So2_Sensor+0x4e4>)
 800bdec:	480e      	ldr	r0, [pc, #56]	; (800be28 <Setup_Parameter_So2_Sensor+0x4cc>)
 800bdee:	f7fc f806 	bl	8007dfe <CLCD_I2C_WriteString>
			/*reassign variable check_04 = 1*/
			check_04 = 1;
 800bdf2:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <Setup_Parameter_So2_Sensor+0x4c4>)
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	701a      	strb	r2, [r3, #0]
			break;
 800bdf8:	e00a      	b.n	800be10 <Setup_Parameter_So2_Sensor+0x4b4>
			break;
 800bdfa:	bf00      	nop
 800bdfc:	e008      	b.n	800be10 <Setup_Parameter_So2_Sensor+0x4b4>
			break;
 800bdfe:	bf00      	nop
 800be00:	e006      	b.n	800be10 <Setup_Parameter_So2_Sensor+0x4b4>
			break;
 800be02:	bf00      	nop
 800be04:	e004      	b.n	800be10 <Setup_Parameter_So2_Sensor+0x4b4>
			break;
 800be06:	bf00      	nop
 800be08:	e002      	b.n	800be10 <Setup_Parameter_So2_Sensor+0x4b4>
			break;
 800be0a:	bf00      	nop
 800be0c:	e000      	b.n	800be10 <Setup_Parameter_So2_Sensor+0x4b4>
			break;
 800be0e:	bf00      	nop
	}
	    return 0;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	40011800 	.word	0x40011800
 800be20:	20001c39 	.word	0x20001c39
 800be24:	20001c00 	.word	0x20001c00
 800be28:	2000086c 	.word	0x2000086c
 800be2c:	20000054 	.word	0x20000054
 800be30:	40011000 	.word	0x40011000
 800be34:	447a0000 	.word	0x447a0000
 800be38:	000493e0 	.word	0x000493e0
 800be3c:	20001ba8 	.word	0x20001ba8
 800be40:	08011398 	.word	0x08011398

0800be44 <Setup_Parameter_Humidity_Sensor>:
 * @brief Setup_Parameter_Humidity_Sensor
 *
 * @return uint8_t
 */
static uint8_t Setup_Parameter_Humidity_Sensor(void)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_setup_parameter_humidity_sensor = 0;
	static __IO uint8_t check_05 = 0;
	uint32_t time_wake_up_05 = HAL_GetTick();
 800be4a:	f7f7 ff07 	bl	8003c5c <HAL_GetTick>
 800be4e:	6038      	str	r0, [r7, #0]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800be50:	2140      	movs	r1, #64	; 0x40
 800be52:	48a2      	ldr	r0, [pc, #648]	; (800c0dc <Setup_Parameter_Humidity_Sensor+0x298>)
 800be54:	f7f9 f94c 	bl	80050f0 <HAL_GPIO_ReadPin>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d11b      	bne.n	800be96 <Setup_Parameter_Humidity_Sensor+0x52>
	{
		HAL_Delay(100);
 800be5e:	2064      	movs	r0, #100	; 0x64
 800be60:	f7f7 ff06 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800be64:	2140      	movs	r1, #64	; 0x40
 800be66:	489d      	ldr	r0, [pc, #628]	; (800c0dc <Setup_Parameter_Humidity_Sensor+0x298>)
 800be68:	f7f9 f942 	bl	80050f0 <HAL_GPIO_ReadPin>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d111      	bne.n	800be96 <Setup_Parameter_Humidity_Sensor+0x52>
		{
			/*Lcd clear*/
			CLCD_I2C_Clear(&lcd1);
 800be72:	489b      	ldr	r0, [pc, #620]	; (800c0e0 <Setup_Parameter_Humidity_Sensor+0x29c>)
 800be74:	f7fb ffda 	bl	8007e2c <CLCD_I2C_Clear>
			mode_setup_parameter_humidity_sensor++;
 800be78:	4b9a      	ldr	r3, [pc, #616]	; (800c0e4 <Setup_Parameter_Humidity_Sensor+0x2a0>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	3301      	adds	r3, #1
 800be80:	b2da      	uxtb	r2, r3
 800be82:	4b98      	ldr	r3, [pc, #608]	; (800c0e4 <Setup_Parameter_Humidity_Sensor+0x2a0>)
 800be84:	701a      	strb	r2, [r3, #0]
			if(mode_setup_parameter_humidity_sensor > MODE_MAX_CALIBRATION_GROUP_SENSOR)
 800be86:	4b97      	ldr	r3, [pc, #604]	; (800c0e4 <Setup_Parameter_Humidity_Sensor+0x2a0>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b06      	cmp	r3, #6
 800be8e:	d902      	bls.n	800be96 <Setup_Parameter_Humidity_Sensor+0x52>
				mode_setup_parameter_humidity_sensor = MODE_MIN_CALIBRATION_GROUP_SENSOR;
 800be90:	4b94      	ldr	r3, [pc, #592]	; (800c0e4 <Setup_Parameter_Humidity_Sensor+0x2a0>)
 800be92:	2200      	movs	r2, #0
 800be94:	701a      	strb	r2, [r3, #0]
   /*
	*setting measurement condition humidity sensor
	*
	* */

	switch (mode_setup_parameter_humidity_sensor)
 800be96:	4b93      	ldr	r3, [pc, #588]	; (800c0e4 <Setup_Parameter_Humidity_Sensor+0x2a0>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	3b01      	subs	r3, #1
 800be9e:	2b05      	cmp	r3, #5
 800bea0:	f200 821e 	bhi.w	800c2e0 <Setup_Parameter_Humidity_Sensor+0x49c>
 800bea4:	a201      	add	r2, pc, #4	; (adr r2, 800beac <Setup_Parameter_Humidity_Sensor+0x68>)
 800bea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beaa:	bf00      	nop
 800beac:	0800bec5 	.word	0x0800bec5
 800beb0:	0800bf6d 	.word	0x0800bf6d
 800beb4:	0800c013 	.word	0x0800c013
 800beb8:	0800c0bb 	.word	0x0800c0bb
 800bebc:	0800c195 	.word	0x0800c195
 800bec0:	0800c23d 	.word	0x0800c23d
	{
	
		/*set up value humidity 0 - 25*/
		case 1:
			/*lcd display*/
			Display_Setup_Parameter_Humidity(&lcd1, y_static_input_humidity_value[0]);
 800bec4:	4b88      	ldr	r3, [pc, #544]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4618      	mov	r0, r3
 800beca:	f7f5 f927 	bl	800111c <__aeabi_f2uiz>
 800bece:	4603      	mov	r3, r0
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	4619      	mov	r1, r3
 800bed4:	4882      	ldr	r0, [pc, #520]	; (800c0e0 <Setup_Parameter_Humidity_Sensor+0x29c>)
 800bed6:	f7f7 f9c3 	bl	8003260 <Display_Setup_Parameter_Humidity>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800beda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bede:	4883      	ldr	r0, [pc, #524]	; (800c0ec <Setup_Parameter_Humidity_Sensor+0x2a8>)
 800bee0:	f7f9 f906 	bl	80050f0 <HAL_GPIO_ReadPin>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d119      	bne.n	800bf1e <Setup_Parameter_Humidity_Sensor+0xda>
			{
				HAL_Delay(50);
 800beea:	2032      	movs	r0, #50	; 0x32
 800beec:	f7f7 fec0 	bl	8003c70 <HAL_Delay>
				y_static_input_humidity_value[0]++;
 800bef0:	4b7d      	ldr	r3, [pc, #500]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bef8:	4618      	mov	r0, r3
 800befa:	f7f4 fe1b 	bl	8000b34 <__addsf3>
 800befe:	4603      	mov	r3, r0
 800bf00:	461a      	mov	r2, r3
 800bf02:	4b79      	ldr	r3, [pc, #484]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bf04:	601a      	str	r2, [r3, #0]
				if(y_static_input_humidity_value[0] >= HUMIDITY_MAX)
 800bf06:	4b78      	ldr	r3, [pc, #480]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4979      	ldr	r1, [pc, #484]	; (800c0f0 <Setup_Parameter_Humidity_Sensor+0x2ac>)
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7f5 f8cb 	bl	80010a8 <__aeabi_fcmpge>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <Setup_Parameter_Humidity_Sensor+0xda>
				{
					y_static_input_humidity_value[0] = HUMIDITY_MAX;
 800bf18:	4b73      	ldr	r3, [pc, #460]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bf1a:	4a75      	ldr	r2, [pc, #468]	; (800c0f0 <Setup_Parameter_Humidity_Sensor+0x2ac>)
 800bf1c:	601a      	str	r2, [r3, #0]
				}
			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800bf1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bf22:	4872      	ldr	r0, [pc, #456]	; (800c0ec <Setup_Parameter_Humidity_Sensor+0x2a8>)
 800bf24:	f7f9 f8e4 	bl	80050f0 <HAL_GPIO_ReadPin>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f040 81e5 	bne.w	800c2fa <Setup_Parameter_Humidity_Sensor+0x4b6>
			{
				HAL_Delay(50);
 800bf30:	2032      	movs	r0, #50	; 0x32
 800bf32:	f7f7 fe9d 	bl	8003c70 <HAL_Delay>
				y_static_input_humidity_value[0]--;
 800bf36:	4b6c      	ldr	r3, [pc, #432]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7f4 fdf6 	bl	8000b30 <__aeabi_fsub>
 800bf44:	4603      	mov	r3, r0
 800bf46:	461a      	mov	r2, r3
 800bf48:	4b67      	ldr	r3, [pc, #412]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bf4a:	601a      	str	r2, [r3, #0]
				if(y_static_input_humidity_value[0] <= HUMIDITY_MIN)
 800bf4c:	4b66      	ldr	r3, [pc, #408]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f04f 0100 	mov.w	r1, #0
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7f5 f89d 	bl	8001094 <__aeabi_fcmple>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d100      	bne.n	800bf62 <Setup_Parameter_Humidity_Sensor+0x11e>
				{
					y_static_input_humidity_value[0] = HUMIDITY_MIN;
				}
			}
			break;
 800bf60:	e1cb      	b.n	800c2fa <Setup_Parameter_Humidity_Sensor+0x4b6>
					y_static_input_humidity_value[0] = HUMIDITY_MIN;
 800bf62:	4b61      	ldr	r3, [pc, #388]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bf64:	f04f 0200 	mov.w	r2, #0
 800bf68:	601a      	str	r2, [r3, #0]
			break;
 800bf6a:	e1c6      	b.n	800c2fa <Setup_Parameter_Humidity_Sensor+0x4b6>
		case 2:
			/*lcd display*/
			Display_Setup_Parameter_Humidity(&lcd1, y_static_input_humidity_value[0]);
 800bf6c:	4b5e      	ldr	r3, [pc, #376]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7f5 f8d3 	bl	800111c <__aeabi_f2uiz>
 800bf76:	4603      	mov	r3, r0
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4858      	ldr	r0, [pc, #352]	; (800c0e0 <Setup_Parameter_Humidity_Sensor+0x29c>)
 800bf7e:	f7f7 f96f 	bl	8003260 <Display_Setup_Parameter_Humidity>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_05 == 1)
 800bf82:	4b5c      	ldr	r3, [pc, #368]	; (800c0f4 <Setup_Parameter_Humidity_Sensor+0x2b0>)
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d130      	bne.n	800bfee <Setup_Parameter_Humidity_Sensor+0x1aa>
			{
				while (HAL_GetTick() - time_wake_up_05 <= TIME_WAITTING_START_CALIBRATION)
 800bf8c:	e002      	b.n	800bf94 <Setup_Parameter_Humidity_Sensor+0x150>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800bf8e:	20af      	movs	r0, #175	; 0xaf
 800bf90:	f7f7 fe06 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_05 <= TIME_WAITTING_START_CALIBRATION)
 800bf94:	f7f7 fe62 	bl	8003c5c <HAL_GetTick>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	4a56      	ldr	r2, [pc, #344]	; (800c0f8 <Setup_Parameter_Humidity_Sensor+0x2b4>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d9f4      	bls.n	800bf8e <Setup_Parameter_Humidity_Sensor+0x14a>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800bfa4:	20ff      	movs	r0, #255	; 0xff
 800bfa6:	f7f7 fdfb 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800bfaa:	230a      	movs	r3, #10
 800bfac:	4a53      	ldr	r2, [pc, #332]	; (800c0fc <Setup_Parameter_Humidity_Sensor+0x2b8>)
 800bfae:	4954      	ldr	r1, [pc, #336]	; (800c100 <Setup_Parameter_Humidity_Sensor+0x2bc>)
 800bfb0:	4854      	ldr	r0, [pc, #336]	; (800c104 <Setup_Parameter_Humidity_Sensor+0x2c0>)
 800bfb2:	f7f6 fbd5 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				x_input_humidity_value[0] = humidity;
 800bfb6:	4b51      	ldr	r3, [pc, #324]	; (800c0fc <Setup_Parameter_Humidity_Sensor+0x2b8>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a53      	ldr	r2, [pc, #332]	; (800c108 <Setup_Parameter_Humidity_Sensor+0x2c4>)
 800bfbc:	6013      	str	r3, [r2, #0]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	71fb      	strb	r3, [r7, #7]
 800bfc2:	e00a      	b.n	800bfda <Setup_Parameter_Humidity_Sensor+0x196>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	4851      	ldr	r0, [pc, #324]	; (800c10c <Setup_Parameter_Humidity_Sensor+0x2c8>)
 800bfc8:	f7f9 f8c1 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800bfcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bfd0:	f7f7 fe4e 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800bfd4:	79fb      	ldrb	r3, [r7, #7]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	71fb      	strb	r3, [r7, #7]
 800bfda:	79fb      	ldrb	r3, [r7, #7]
 800bfdc:	2b04      	cmp	r3, #4
 800bfde:	d9f1      	bls.n	800bfc4 <Setup_Parameter_Humidity_Sensor+0x180>
				}
				/*increase variable by 1 unit*/
				check_05 ++;
 800bfe0:	4b44      	ldr	r3, [pc, #272]	; (800c0f4 <Setup_Parameter_Humidity_Sensor+0x2b0>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	4b42      	ldr	r3, [pc, #264]	; (800c0f4 <Setup_Parameter_Humidity_Sensor+0x2b0>)
 800bfec:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from humidity sensor*/
			if(check_05 == 2)
 800bfee:	4b41      	ldr	r3, [pc, #260]	; (800c0f4 <Setup_Parameter_Humidity_Sensor+0x2b0>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	f040 8182 	bne.w	800c2fe <Setup_Parameter_Humidity_Sensor+0x4ba>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800bffa:	2200      	movs	r2, #0
 800bffc:	2101      	movs	r1, #1
 800bffe:	4843      	ldr	r0, [pc, #268]	; (800c10c <Setup_Parameter_Humidity_Sensor+0x2c8>)
 800c000:	f7f9 f88d 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Done(&lcd1, x_input_humidity_value[0]);
 800c004:	4b40      	ldr	r3, [pc, #256]	; (800c108 <Setup_Parameter_Humidity_Sensor+0x2c4>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4619      	mov	r1, r3
 800c00a:	4835      	ldr	r0, [pc, #212]	; (800c0e0 <Setup_Parameter_Humidity_Sensor+0x29c>)
 800c00c:	f7f7 fbce 	bl	80037ac <Display_Done>
			}
			break;
 800c010:	e175      	b.n	800c2fe <Setup_Parameter_Humidity_Sensor+0x4ba>

		/*set up value humidity 20 - 55*/
		case 3:
			/*lcd display*/
			Display_Setup_Parameter_Humidity(&lcd1, y_static_input_humidity_value[1]);
 800c012:	4b35      	ldr	r3, [pc, #212]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	4618      	mov	r0, r3
 800c018:	f7f5 f880 	bl	800111c <__aeabi_f2uiz>
 800c01c:	4603      	mov	r3, r0
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	4619      	mov	r1, r3
 800c022:	482f      	ldr	r0, [pc, #188]	; (800c0e0 <Setup_Parameter_Humidity_Sensor+0x29c>)
 800c024:	f7f7 f91c 	bl	8003260 <Display_Setup_Parameter_Humidity>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800c028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c02c:	482f      	ldr	r0, [pc, #188]	; (800c0ec <Setup_Parameter_Humidity_Sensor+0x2a8>)
 800c02e:	f7f9 f85f 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d119      	bne.n	800c06c <Setup_Parameter_Humidity_Sensor+0x228>
			{
				HAL_Delay(50);
 800c038:	2032      	movs	r0, #50	; 0x32
 800c03a:	f7f7 fe19 	bl	8003c70 <HAL_Delay>
				y_static_input_humidity_value[1]++;
 800c03e:	4b2a      	ldr	r3, [pc, #168]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c046:	4618      	mov	r0, r3
 800c048:	f7f4 fd74 	bl	8000b34 <__addsf3>
 800c04c:	4603      	mov	r3, r0
 800c04e:	461a      	mov	r2, r3
 800c050:	4b25      	ldr	r3, [pc, #148]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c052:	605a      	str	r2, [r3, #4]
				if(y_static_input_humidity_value[1] >= HUMIDITY_MAX)
 800c054:	4b24      	ldr	r3, [pc, #144]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	4925      	ldr	r1, [pc, #148]	; (800c0f0 <Setup_Parameter_Humidity_Sensor+0x2ac>)
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7f5 f824 	bl	80010a8 <__aeabi_fcmpge>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d002      	beq.n	800c06c <Setup_Parameter_Humidity_Sensor+0x228>
				{
					y_static_input_humidity_value[1] = HUMIDITY_MAX;
 800c066:	4b20      	ldr	r3, [pc, #128]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c068:	4a21      	ldr	r2, [pc, #132]	; (800c0f0 <Setup_Parameter_Humidity_Sensor+0x2ac>)
 800c06a:	605a      	str	r2, [r3, #4]
				}
			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800c06c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c070:	481e      	ldr	r0, [pc, #120]	; (800c0ec <Setup_Parameter_Humidity_Sensor+0x2a8>)
 800c072:	f7f9 f83d 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f040 8142 	bne.w	800c302 <Setup_Parameter_Humidity_Sensor+0x4be>
			{
				HAL_Delay(50);
 800c07e:	2032      	movs	r0, #50	; 0x32
 800c080:	f7f7 fdf6 	bl	8003c70 <HAL_Delay>
				y_static_input_humidity_value[1]--;
 800c084:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7f4 fd4f 	bl	8000b30 <__aeabi_fsub>
 800c092:	4603      	mov	r3, r0
 800c094:	461a      	mov	r2, r3
 800c096:	4b14      	ldr	r3, [pc, #80]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c098:	605a      	str	r2, [r3, #4]
				if(y_static_input_humidity_value[1] <= HUMIDITY_MIN)
 800c09a:	4b13      	ldr	r3, [pc, #76]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	f04f 0100 	mov.w	r1, #0
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7f4 fff6 	bl	8001094 <__aeabi_fcmple>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d100      	bne.n	800c0b0 <Setup_Parameter_Humidity_Sensor+0x26c>
				{
					y_static_input_humidity_value[1] = HUMIDITY_MIN;
				}
			}
			break;
 800c0ae:	e128      	b.n	800c302 <Setup_Parameter_Humidity_Sensor+0x4be>
					y_static_input_humidity_value[1] = HUMIDITY_MIN;
 800c0b0:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c0b2:	f04f 0200 	mov.w	r2, #0
 800c0b6:	605a      	str	r2, [r3, #4]
			break;
 800c0b8:	e123      	b.n	800c302 <Setup_Parameter_Humidity_Sensor+0x4be>
		case 4:
			/*lcd display*/
			Display_Setup_Parameter_Humidity(&lcd1, y_static_input_humidity_value[1]);
 800c0ba:	4b0b      	ldr	r3, [pc, #44]	; (800c0e8 <Setup_Parameter_Humidity_Sensor+0x2a4>)
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7f5 f82c 	bl	800111c <__aeabi_f2uiz>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	4805      	ldr	r0, [pc, #20]	; (800c0e0 <Setup_Parameter_Humidity_Sensor+0x29c>)
 800c0cc:	f7f7 f8c8 	bl	8003260 <Display_Setup_Parameter_Humidity>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_05 == 2)
 800c0d0:	4b08      	ldr	r3, [pc, #32]	; (800c0f4 <Setup_Parameter_Humidity_Sensor+0x2b0>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d14a      	bne.n	800c170 <Setup_Parameter_Humidity_Sensor+0x32c>
			{
				while (HAL_GetTick() - time_wake_up_05 <= TIME_WAITTING_START_CALIBRATION)
 800c0da:	e01c      	b.n	800c116 <Setup_Parameter_Humidity_Sensor+0x2d2>
 800c0dc:	40011400 	.word	0x40011400
 800c0e0:	2000086c 	.word	0x2000086c
 800c0e4:	20001c3a 	.word	0x20001c3a
 800c0e8:	2000006c 	.word	0x2000006c
 800c0ec:	40011000 	.word	0x40011000
 800c0f0:	42be0000 	.word	0x42be0000
 800c0f4:	20001c3b 	.word	0x20001c3b
 800c0f8:	000493e0 	.word	0x000493e0
 800c0fc:	20001c28 	.word	0x20001c28
 800c100:	20001c24 	.word	0x20001c24
 800c104:	20001b20 	.word	0x20001b20
 800c108:	20001c18 	.word	0x20001c18
 800c10c:	40011800 	.word	0x40011800
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800c110:	20af      	movs	r0, #175	; 0xaf
 800c112:	f7f7 fd45 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_05 <= TIME_WAITTING_START_CALIBRATION)
 800c116:	f7f7 fda1 	bl	8003c5c <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	4a7e      	ldr	r2, [pc, #504]	; (800c31c <Setup_Parameter_Humidity_Sensor+0x4d8>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d9f4      	bls.n	800c110 <Setup_Parameter_Humidity_Sensor+0x2cc>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800c126:	20ff      	movs	r0, #255	; 0xff
 800c128:	f7f7 fd3a 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				//DHT_Read_Temperature_Humidity(&DHT22_Sensor_1, &temperature, &humidity);
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800c12c:	230a      	movs	r3, #10
 800c12e:	4a7c      	ldr	r2, [pc, #496]	; (800c320 <Setup_Parameter_Humidity_Sensor+0x4dc>)
 800c130:	497c      	ldr	r1, [pc, #496]	; (800c324 <Setup_Parameter_Humidity_Sensor+0x4e0>)
 800c132:	487d      	ldr	r0, [pc, #500]	; (800c328 <Setup_Parameter_Humidity_Sensor+0x4e4>)
 800c134:	f7f6 fb14 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				x_input_humidity_value[1] = humidity;
 800c138:	4b79      	ldr	r3, [pc, #484]	; (800c320 <Setup_Parameter_Humidity_Sensor+0x4dc>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a7b      	ldr	r2, [pc, #492]	; (800c32c <Setup_Parameter_Humidity_Sensor+0x4e8>)
 800c13e:	6053      	str	r3, [r2, #4]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800c140:	2300      	movs	r3, #0
 800c142:	71bb      	strb	r3, [r7, #6]
 800c144:	e00a      	b.n	800c15c <Setup_Parameter_Humidity_Sensor+0x318>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800c146:	2101      	movs	r1, #1
 800c148:	4879      	ldr	r0, [pc, #484]	; (800c330 <Setup_Parameter_Humidity_Sensor+0x4ec>)
 800c14a:	f7f9 f800 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800c14e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c152:	f7f7 fd8d 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800c156:	79bb      	ldrb	r3, [r7, #6]
 800c158:	3301      	adds	r3, #1
 800c15a:	71bb      	strb	r3, [r7, #6]
 800c15c:	79bb      	ldrb	r3, [r7, #6]
 800c15e:	2b04      	cmp	r3, #4
 800c160:	d9f1      	bls.n	800c146 <Setup_Parameter_Humidity_Sensor+0x302>
				}
				/*increase variable by 1 unit*/
				check_05 ++;
 800c162:	4b74      	ldr	r3, [pc, #464]	; (800c334 <Setup_Parameter_Humidity_Sensor+0x4f0>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	b2db      	uxtb	r3, r3
 800c168:	3301      	adds	r3, #1
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	4b71      	ldr	r3, [pc, #452]	; (800c334 <Setup_Parameter_Humidity_Sensor+0x4f0>)
 800c16e:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from humidity sensor*/
			if(check_05 == 3)
 800c170:	4b70      	ldr	r3, [pc, #448]	; (800c334 <Setup_Parameter_Humidity_Sensor+0x4f0>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b03      	cmp	r3, #3
 800c178:	f040 80c5 	bne.w	800c306 <Setup_Parameter_Humidity_Sensor+0x4c2>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800c17c:	2200      	movs	r2, #0
 800c17e:	2101      	movs	r1, #1
 800c180:	486b      	ldr	r0, [pc, #428]	; (800c330 <Setup_Parameter_Humidity_Sensor+0x4ec>)
 800c182:	f7f8 ffcc 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Done(&lcd1, x_input_humidity_value[1]);
 800c186:	4b69      	ldr	r3, [pc, #420]	; (800c32c <Setup_Parameter_Humidity_Sensor+0x4e8>)
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	4619      	mov	r1, r3
 800c18c:	486a      	ldr	r0, [pc, #424]	; (800c338 <Setup_Parameter_Humidity_Sensor+0x4f4>)
 800c18e:	f7f7 fb0d 	bl	80037ac <Display_Done>
			}
			break;
 800c192:	e0b8      	b.n	800c306 <Setup_Parameter_Humidity_Sensor+0x4c2>


		/*set up value humidity 55 - 85*/
		case 5:
			/*lcd display */
			Display_Setup_Parameter_Humidity(&lcd1, y_static_input_humidity_value[2]);
 800c194:	4b69      	ldr	r3, [pc, #420]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	4618      	mov	r0, r3
 800c19a:	f7f4 ffbf 	bl	800111c <__aeabi_f2uiz>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	4864      	ldr	r0, [pc, #400]	; (800c338 <Setup_Parameter_Humidity_Sensor+0x4f4>)
 800c1a6:	f7f7 f85b 	bl	8003260 <Display_Setup_Parameter_Humidity>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800c1aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c1ae:	4864      	ldr	r0, [pc, #400]	; (800c340 <Setup_Parameter_Humidity_Sensor+0x4fc>)
 800c1b0:	f7f8 ff9e 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d119      	bne.n	800c1ee <Setup_Parameter_Humidity_Sensor+0x3aa>
			{
				HAL_Delay(50);
 800c1ba:	2032      	movs	r0, #50	; 0x32
 800c1bc:	f7f7 fd58 	bl	8003c70 <HAL_Delay>
				y_static_input_humidity_value[2]++;
 800c1c0:	4b5e      	ldr	r3, [pc, #376]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7f4 fcb3 	bl	8000b34 <__addsf3>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	4b5a      	ldr	r3, [pc, #360]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c1d4:	609a      	str	r2, [r3, #8]
				if(y_static_input_humidity_value[2] >= HUMIDITY_MAX)
 800c1d6:	4b59      	ldr	r3, [pc, #356]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	495a      	ldr	r1, [pc, #360]	; (800c344 <Setup_Parameter_Humidity_Sensor+0x500>)
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7f4 ff63 	bl	80010a8 <__aeabi_fcmpge>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <Setup_Parameter_Humidity_Sensor+0x3aa>
				{
					y_static_input_humidity_value[2] = HUMIDITY_MAX;
 800c1e8:	4b54      	ldr	r3, [pc, #336]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c1ea:	4a56      	ldr	r2, [pc, #344]	; (800c344 <Setup_Parameter_Humidity_Sensor+0x500>)
 800c1ec:	609a      	str	r2, [r3, #8]
				}
			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800c1ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c1f2:	4853      	ldr	r0, [pc, #332]	; (800c340 <Setup_Parameter_Humidity_Sensor+0x4fc>)
 800c1f4:	f7f8 ff7c 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f040 8085 	bne.w	800c30a <Setup_Parameter_Humidity_Sensor+0x4c6>
			{
				HAL_Delay(50);
 800c200:	2032      	movs	r0, #50	; 0x32
 800c202:	f7f7 fd35 	bl	8003c70 <HAL_Delay>
				y_static_input_humidity_value[2]--;
 800c206:	4b4d      	ldr	r3, [pc, #308]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c20e:	4618      	mov	r0, r3
 800c210:	f7f4 fc8e 	bl	8000b30 <__aeabi_fsub>
 800c214:	4603      	mov	r3, r0
 800c216:	461a      	mov	r2, r3
 800c218:	4b48      	ldr	r3, [pc, #288]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c21a:	609a      	str	r2, [r3, #8]
				if(y_static_input_humidity_value[2] <= HUMIDITY_MIN)
 800c21c:	4b47      	ldr	r3, [pc, #284]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	f04f 0100 	mov.w	r1, #0
 800c224:	4618      	mov	r0, r3
 800c226:	f7f4 ff35 	bl	8001094 <__aeabi_fcmple>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d100      	bne.n	800c232 <Setup_Parameter_Humidity_Sensor+0x3ee>
				{
					y_static_input_humidity_value[2] = HUMIDITY_MIN;
				}
			}
			break;
 800c230:	e06b      	b.n	800c30a <Setup_Parameter_Humidity_Sensor+0x4c6>
					y_static_input_humidity_value[2] = HUMIDITY_MIN;
 800c232:	4b42      	ldr	r3, [pc, #264]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c234:	f04f 0200 	mov.w	r2, #0
 800c238:	609a      	str	r2, [r3, #8]
			break;
 800c23a:	e066      	b.n	800c30a <Setup_Parameter_Humidity_Sensor+0x4c6>
		case 6:
			/*lcd display */
			Display_Setup_Parameter_Humidity(&lcd1, y_static_input_humidity_value[2]);
 800c23c:	4b3f      	ldr	r3, [pc, #252]	; (800c33c <Setup_Parameter_Humidity_Sensor+0x4f8>)
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	4618      	mov	r0, r3
 800c242:	f7f4 ff6b 	bl	800111c <__aeabi_f2uiz>
 800c246:	4603      	mov	r3, r0
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	4619      	mov	r1, r3
 800c24c:	483a      	ldr	r0, [pc, #232]	; (800c338 <Setup_Parameter_Humidity_Sensor+0x4f4>)
 800c24e:	f7f7 f807 	bl	8003260 <Display_Setup_Parameter_Humidity>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_05 == 3)
 800c252:	4b38      	ldr	r3, [pc, #224]	; (800c334 <Setup_Parameter_Humidity_Sensor+0x4f0>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b03      	cmp	r3, #3
 800c25a:	d130      	bne.n	800c2be <Setup_Parameter_Humidity_Sensor+0x47a>
			{
				while (HAL_GetTick() - time_wake_up_05 <= TIME_WAITTING_START_CALIBRATION)
 800c25c:	e002      	b.n	800c264 <Setup_Parameter_Humidity_Sensor+0x420>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800c25e:	20af      	movs	r0, #175	; 0xaf
 800c260:	f7f7 fc9e 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_05 <= TIME_WAITTING_START_CALIBRATION)
 800c264:	f7f7 fcfa 	bl	8003c5c <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	4a2b      	ldr	r2, [pc, #172]	; (800c31c <Setup_Parameter_Humidity_Sensor+0x4d8>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d9f4      	bls.n	800c25e <Setup_Parameter_Humidity_Sensor+0x41a>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800c274:	20ff      	movs	r0, #255	; 0xff
 800c276:	f7f7 fc93 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800c27a:	230a      	movs	r3, #10
 800c27c:	4a28      	ldr	r2, [pc, #160]	; (800c320 <Setup_Parameter_Humidity_Sensor+0x4dc>)
 800c27e:	4929      	ldr	r1, [pc, #164]	; (800c324 <Setup_Parameter_Humidity_Sensor+0x4e0>)
 800c280:	4829      	ldr	r0, [pc, #164]	; (800c328 <Setup_Parameter_Humidity_Sensor+0x4e4>)
 800c282:	f7f6 fa6d 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				x_input_humidity_value[2] = humidity;
 800c286:	4b26      	ldr	r3, [pc, #152]	; (800c320 <Setup_Parameter_Humidity_Sensor+0x4dc>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a28      	ldr	r2, [pc, #160]	; (800c32c <Setup_Parameter_Humidity_Sensor+0x4e8>)
 800c28c:	6093      	str	r3, [r2, #8]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800c28e:	2300      	movs	r3, #0
 800c290:	717b      	strb	r3, [r7, #5]
 800c292:	e00a      	b.n	800c2aa <Setup_Parameter_Humidity_Sensor+0x466>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800c294:	2101      	movs	r1, #1
 800c296:	4826      	ldr	r0, [pc, #152]	; (800c330 <Setup_Parameter_Humidity_Sensor+0x4ec>)
 800c298:	f7f8 ff59 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800c29c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c2a0:	f7f7 fce6 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800c2a4:	797b      	ldrb	r3, [r7, #5]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	717b      	strb	r3, [r7, #5]
 800c2aa:	797b      	ldrb	r3, [r7, #5]
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	d9f1      	bls.n	800c294 <Setup_Parameter_Humidity_Sensor+0x450>
				}
				/*increase variable by 1 unit*/
				check_05 ++;
 800c2b0:	4b20      	ldr	r3, [pc, #128]	; (800c334 <Setup_Parameter_Humidity_Sensor+0x4f0>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	4b1e      	ldr	r3, [pc, #120]	; (800c334 <Setup_Parameter_Humidity_Sensor+0x4f0>)
 800c2bc:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from humidity sensor*/
			if(check_05 == 4)
 800c2be:	4b1d      	ldr	r3, [pc, #116]	; (800c334 <Setup_Parameter_Humidity_Sensor+0x4f0>)
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	2b04      	cmp	r3, #4
 800c2c6:	d122      	bne.n	800c30e <Setup_Parameter_Humidity_Sensor+0x4ca>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	2101      	movs	r1, #1
 800c2cc:	4818      	ldr	r0, [pc, #96]	; (800c330 <Setup_Parameter_Humidity_Sensor+0x4ec>)
 800c2ce:	f7f8 ff26 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Done(&lcd1, x_input_humidity_value[2]);
 800c2d2:	4b16      	ldr	r3, [pc, #88]	; (800c32c <Setup_Parameter_Humidity_Sensor+0x4e8>)
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	4817      	ldr	r0, [pc, #92]	; (800c338 <Setup_Parameter_Humidity_Sensor+0x4f4>)
 800c2da:	f7f7 fa67 	bl	80037ac <Display_Done>
			}
			break;
 800c2de:	e016      	b.n	800c30e <Setup_Parameter_Humidity_Sensor+0x4ca>

		/*Default mode*/
		default:
			/*Lcd cursor*/
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	4814      	ldr	r0, [pc, #80]	; (800c338 <Setup_Parameter_Humidity_Sensor+0x4f4>)
 800c2e6:	f7fb fd37 	bl	8007d58 <CLCD_I2C_SetCursor>
			/*Lcd send string*/
			CLCD_I2C_WriteString(&lcd1, "Humidity Sensor");
 800c2ea:	4917      	ldr	r1, [pc, #92]	; (800c348 <Setup_Parameter_Humidity_Sensor+0x504>)
 800c2ec:	4812      	ldr	r0, [pc, #72]	; (800c338 <Setup_Parameter_Humidity_Sensor+0x4f4>)
 800c2ee:	f7fb fd86 	bl	8007dfe <CLCD_I2C_WriteString>
			/*reassign variable*/
			check_05 = 1;
 800c2f2:	4b10      	ldr	r3, [pc, #64]	; (800c334 <Setup_Parameter_Humidity_Sensor+0x4f0>)
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	701a      	strb	r2, [r3, #0]
			break;
 800c2f8:	e00a      	b.n	800c310 <Setup_Parameter_Humidity_Sensor+0x4cc>
			break;
 800c2fa:	bf00      	nop
 800c2fc:	e008      	b.n	800c310 <Setup_Parameter_Humidity_Sensor+0x4cc>
			break;
 800c2fe:	bf00      	nop
 800c300:	e006      	b.n	800c310 <Setup_Parameter_Humidity_Sensor+0x4cc>
			break;
 800c302:	bf00      	nop
 800c304:	e004      	b.n	800c310 <Setup_Parameter_Humidity_Sensor+0x4cc>
			break;
 800c306:	bf00      	nop
 800c308:	e002      	b.n	800c310 <Setup_Parameter_Humidity_Sensor+0x4cc>
			break;
 800c30a:	bf00      	nop
 800c30c:	e000      	b.n	800c310 <Setup_Parameter_Humidity_Sensor+0x4cc>
			break;
 800c30e:	bf00      	nop
	}

	    return 0;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	000493e0 	.word	0x000493e0
 800c320:	20001c28 	.word	0x20001c28
 800c324:	20001c24 	.word	0x20001c24
 800c328:	20001b20 	.word	0x20001b20
 800c32c:	20001c18 	.word	0x20001c18
 800c330:	40011800 	.word	0x40011800
 800c334:	20001c3b 	.word	0x20001c3b
 800c338:	2000086c 	.word	0x2000086c
 800c33c:	2000006c 	.word	0x2000006c
 800c340:	40011000 	.word	0x40011000
 800c344:	42be0000 	.word	0x42be0000
 800c348:	080113a4 	.word	0x080113a4

0800c34c <Setup_Parameter_Temperature_Sensor>:
 * @brief Setup_Parameter_Humidity_Sensor
 *
 * @return uint8_t
 */
static uint8_t Setup_Parameter_Temperature_Sensor(void)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_setup_parameter_temperature_sensor = 0;
	static __IO uint8_t check_06 = 0;
	uint32_t time_wake_up_06 = HAL_GetTick();
 800c352:	f7f7 fc83 	bl	8003c5c <HAL_GetTick>
 800c356:	6038      	str	r0, [r7, #0]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800c358:	2140      	movs	r1, #64	; 0x40
 800c35a:	48a2      	ldr	r0, [pc, #648]	; (800c5e4 <Setup_Parameter_Temperature_Sensor+0x298>)
 800c35c:	f7f8 fec8 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c360:	4603      	mov	r3, r0
 800c362:	2b01      	cmp	r3, #1
 800c364:	d11b      	bne.n	800c39e <Setup_Parameter_Temperature_Sensor+0x52>
	{
		HAL_Delay(100);
 800c366:	2064      	movs	r0, #100	; 0x64
 800c368:	f7f7 fc82 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800c36c:	2140      	movs	r1, #64	; 0x40
 800c36e:	489d      	ldr	r0, [pc, #628]	; (800c5e4 <Setup_Parameter_Temperature_Sensor+0x298>)
 800c370:	f7f8 febe 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c374:	4603      	mov	r3, r0
 800c376:	2b01      	cmp	r3, #1
 800c378:	d111      	bne.n	800c39e <Setup_Parameter_Temperature_Sensor+0x52>
		{
			/*Lcd clear*/
			CLCD_I2C_Clear(&lcd1);
 800c37a:	489b      	ldr	r0, [pc, #620]	; (800c5e8 <Setup_Parameter_Temperature_Sensor+0x29c>)
 800c37c:	f7fb fd56 	bl	8007e2c <CLCD_I2C_Clear>
			mode_setup_parameter_temperature_sensor++;
 800c380:	4b9a      	ldr	r3, [pc, #616]	; (800c5ec <Setup_Parameter_Temperature_Sensor+0x2a0>)
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	b2db      	uxtb	r3, r3
 800c386:	3301      	adds	r3, #1
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	4b98      	ldr	r3, [pc, #608]	; (800c5ec <Setup_Parameter_Temperature_Sensor+0x2a0>)
 800c38c:	701a      	strb	r2, [r3, #0]
			if(mode_setup_parameter_temperature_sensor > MODE_MAX_CALIBRATION_GROUP_SENSOR)
 800c38e:	4b97      	ldr	r3, [pc, #604]	; (800c5ec <Setup_Parameter_Temperature_Sensor+0x2a0>)
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b06      	cmp	r3, #6
 800c396:	d902      	bls.n	800c39e <Setup_Parameter_Temperature_Sensor+0x52>
				mode_setup_parameter_temperature_sensor = MODE_MIN_CALIBRATION_GROUP_SENSOR;
 800c398:	4b94      	ldr	r3, [pc, #592]	; (800c5ec <Setup_Parameter_Temperature_Sensor+0x2a0>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	701a      	strb	r2, [r3, #0]
   /*
	*setting measurement condition temperature sensor
	*
	* */

	switch (mode_setup_parameter_temperature_sensor)
 800c39e:	4b93      	ldr	r3, [pc, #588]	; (800c5ec <Setup_Parameter_Temperature_Sensor+0x2a0>)
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	2b05      	cmp	r3, #5
 800c3a8:	f200 821e 	bhi.w	800c7e8 <Setup_Parameter_Temperature_Sensor+0x49c>
 800c3ac:	a201      	add	r2, pc, #4	; (adr r2, 800c3b4 <Setup_Parameter_Temperature_Sensor+0x68>)
 800c3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b2:	bf00      	nop
 800c3b4:	0800c3cd 	.word	0x0800c3cd
 800c3b8:	0800c475 	.word	0x0800c475
 800c3bc:	0800c51b 	.word	0x0800c51b
 800c3c0:	0800c5c3 	.word	0x0800c5c3
 800c3c4:	0800c69d 	.word	0x0800c69d
 800c3c8:	0800c745 	.word	0x0800c745
	{

		/*set up value temperature pm 0 - 25*/
		case 1:
			/*lcd display*/
			Display_Setup_Parameter_Temperature(&lcd1, y_static_input_temperature_value[0]);
 800c3cc:	4b88      	ldr	r3, [pc, #544]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7f4 fea3 	bl	800111c <__aeabi_f2uiz>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4882      	ldr	r0, [pc, #520]	; (800c5e8 <Setup_Parameter_Temperature_Sensor+0x29c>)
 800c3de:	f7f7 f8e5 	bl	80035ac <Display_Setup_Parameter_Temperature>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800c3e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c3e6:	4883      	ldr	r0, [pc, #524]	; (800c5f4 <Setup_Parameter_Temperature_Sensor+0x2a8>)
 800c3e8:	f7f8 fe82 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d119      	bne.n	800c426 <Setup_Parameter_Temperature_Sensor+0xda>
			{
				HAL_Delay(50);
 800c3f2:	2032      	movs	r0, #50	; 0x32
 800c3f4:	f7f7 fc3c 	bl	8003c70 <HAL_Delay>
				y_static_input_temperature_value[0]++;
 800c3f8:	4b7d      	ldr	r3, [pc, #500]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c400:	4618      	mov	r0, r3
 800c402:	f7f4 fb97 	bl	8000b34 <__addsf3>
 800c406:	4603      	mov	r3, r0
 800c408:	461a      	mov	r2, r3
 800c40a:	4b79      	ldr	r3, [pc, #484]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c40c:	601a      	str	r2, [r3, #0]
				if(y_static_input_temperature_value[0] >= TEMPERATURE_MAX)
 800c40e:	4b78      	ldr	r3, [pc, #480]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4979      	ldr	r1, [pc, #484]	; (800c5f8 <Setup_Parameter_Temperature_Sensor+0x2ac>)
 800c414:	4618      	mov	r0, r3
 800c416:	f7f4 fe47 	bl	80010a8 <__aeabi_fcmpge>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <Setup_Parameter_Temperature_Sensor+0xda>
				{
					y_static_input_temperature_value[0] = TEMPERATURE_MAX;
 800c420:	4b73      	ldr	r3, [pc, #460]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c422:	4a75      	ldr	r2, [pc, #468]	; (800c5f8 <Setup_Parameter_Temperature_Sensor+0x2ac>)
 800c424:	601a      	str	r2, [r3, #0]
				}
			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800c426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c42a:	4872      	ldr	r0, [pc, #456]	; (800c5f4 <Setup_Parameter_Temperature_Sensor+0x2a8>)
 800c42c:	f7f8 fe60 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	f040 81e5 	bne.w	800c802 <Setup_Parameter_Temperature_Sensor+0x4b6>
			{
				HAL_Delay(50);
 800c438:	2032      	movs	r0, #50	; 0x32
 800c43a:	f7f7 fc19 	bl	8003c70 <HAL_Delay>
				y_static_input_temperature_value[0]--;
 800c43e:	4b6c      	ldr	r3, [pc, #432]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c446:	4618      	mov	r0, r3
 800c448:	f7f4 fb72 	bl	8000b30 <__aeabi_fsub>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	4b67      	ldr	r3, [pc, #412]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c452:	601a      	str	r2, [r3, #0]
				if(y_static_input_temperature_value[0] <= TEMPERATURE_MIN)
 800c454:	4b66      	ldr	r3, [pc, #408]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f04f 0100 	mov.w	r1, #0
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7f4 fe19 	bl	8001094 <__aeabi_fcmple>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d100      	bne.n	800c46a <Setup_Parameter_Temperature_Sensor+0x11e>
				{
					y_static_input_temperature_value[0] = TEMPERATURE_MIN;
				}
			}
			break;
 800c468:	e1cb      	b.n	800c802 <Setup_Parameter_Temperature_Sensor+0x4b6>
					y_static_input_temperature_value[0] = TEMPERATURE_MIN;
 800c46a:	4b61      	ldr	r3, [pc, #388]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c46c:	f04f 0200 	mov.w	r2, #0
 800c470:	601a      	str	r2, [r3, #0]
			break;
 800c472:	e1c6      	b.n	800c802 <Setup_Parameter_Temperature_Sensor+0x4b6>
		case 2:
			/*lcd display*/
			Display_Setup_Parameter_Temperature(&lcd1, y_static_input_temperature_value[0]);
 800c474:	4b5e      	ldr	r3, [pc, #376]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4618      	mov	r0, r3
 800c47a:	f7f4 fe4f 	bl	800111c <__aeabi_f2uiz>
 800c47e:	4603      	mov	r3, r0
 800c480:	b2db      	uxtb	r3, r3
 800c482:	4619      	mov	r1, r3
 800c484:	4858      	ldr	r0, [pc, #352]	; (800c5e8 <Setup_Parameter_Temperature_Sensor+0x29c>)
 800c486:	f7f7 f891 	bl	80035ac <Display_Setup_Parameter_Temperature>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_06 == 1)
 800c48a:	4b5c      	ldr	r3, [pc, #368]	; (800c5fc <Setup_Parameter_Temperature_Sensor+0x2b0>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b01      	cmp	r3, #1
 800c492:	d130      	bne.n	800c4f6 <Setup_Parameter_Temperature_Sensor+0x1aa>
			{
				while (HAL_GetTick() - time_wake_up_06 <= TIME_WAITTING_START_CALIBRATION)
 800c494:	e002      	b.n	800c49c <Setup_Parameter_Temperature_Sensor+0x150>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800c496:	20af      	movs	r0, #175	; 0xaf
 800c498:	f7f7 fb82 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_06 <= TIME_WAITTING_START_CALIBRATION)
 800c49c:	f7f7 fbde 	bl	8003c5c <HAL_GetTick>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	4a56      	ldr	r2, [pc, #344]	; (800c600 <Setup_Parameter_Temperature_Sensor+0x2b4>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d9f4      	bls.n	800c496 <Setup_Parameter_Temperature_Sensor+0x14a>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800c4ac:	20ff      	movs	r0, #255	; 0xff
 800c4ae:	f7f7 fb77 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
//				DHT_Read_Temperature_Humidity(&DHT22_Sensor_1, &temperature, &humidity);
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800c4b2:	230a      	movs	r3, #10
 800c4b4:	4a53      	ldr	r2, [pc, #332]	; (800c604 <Setup_Parameter_Temperature_Sensor+0x2b8>)
 800c4b6:	4954      	ldr	r1, [pc, #336]	; (800c608 <Setup_Parameter_Temperature_Sensor+0x2bc>)
 800c4b8:	4854      	ldr	r0, [pc, #336]	; (800c60c <Setup_Parameter_Temperature_Sensor+0x2c0>)
 800c4ba:	f7f6 f951 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				x_input_temperature_value[0] = temperature;
 800c4be:	4b52      	ldr	r3, [pc, #328]	; (800c608 <Setup_Parameter_Temperature_Sensor+0x2bc>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a53      	ldr	r2, [pc, #332]	; (800c610 <Setup_Parameter_Temperature_Sensor+0x2c4>)
 800c4c4:	6013      	str	r3, [r2, #0]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	71fb      	strb	r3, [r7, #7]
 800c4ca:	e00a      	b.n	800c4e2 <Setup_Parameter_Temperature_Sensor+0x196>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	4851      	ldr	r0, [pc, #324]	; (800c614 <Setup_Parameter_Temperature_Sensor+0x2c8>)
 800c4d0:	f7f8 fe3d 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800c4d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c4d8:	f7f7 fbca 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800c4dc:	79fb      	ldrb	r3, [r7, #7]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	71fb      	strb	r3, [r7, #7]
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	2b04      	cmp	r3, #4
 800c4e6:	d9f1      	bls.n	800c4cc <Setup_Parameter_Temperature_Sensor+0x180>
				}
				/*increase variable by 1 unit*/
				check_06 ++;
 800c4e8:	4b44      	ldr	r3, [pc, #272]	; (800c5fc <Setup_Parameter_Temperature_Sensor+0x2b0>)
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	4b42      	ldr	r3, [pc, #264]	; (800c5fc <Setup_Parameter_Temperature_Sensor+0x2b0>)
 800c4f4:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from temperature sensor*/
			if(check_06 == 2)
 800c4f6:	4b41      	ldr	r3, [pc, #260]	; (800c5fc <Setup_Parameter_Temperature_Sensor+0x2b0>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	f040 8182 	bne.w	800c806 <Setup_Parameter_Temperature_Sensor+0x4ba>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800c502:	2200      	movs	r2, #0
 800c504:	2101      	movs	r1, #1
 800c506:	4843      	ldr	r0, [pc, #268]	; (800c614 <Setup_Parameter_Temperature_Sensor+0x2c8>)
 800c508:	f7f8 fe09 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Done(&lcd1, x_input_temperature_value[0] );
 800c50c:	4b40      	ldr	r3, [pc, #256]	; (800c610 <Setup_Parameter_Temperature_Sensor+0x2c4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4619      	mov	r1, r3
 800c512:	4835      	ldr	r0, [pc, #212]	; (800c5e8 <Setup_Parameter_Temperature_Sensor+0x29c>)
 800c514:	f7f7 f94a 	bl	80037ac <Display_Done>
			}
			break;
 800c518:	e175      	b.n	800c806 <Setup_Parameter_Temperature_Sensor+0x4ba>


		/*set up value temperature pm 20 - 45*/
		case 3:
			/*lcd display*/
			Display_Setup_Parameter_Temperature(&lcd1, y_static_input_temperature_value[1]);
 800c51a:	4b35      	ldr	r3, [pc, #212]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	4618      	mov	r0, r3
 800c520:	f7f4 fdfc 	bl	800111c <__aeabi_f2uiz>
 800c524:	4603      	mov	r3, r0
 800c526:	b2db      	uxtb	r3, r3
 800c528:	4619      	mov	r1, r3
 800c52a:	482f      	ldr	r0, [pc, #188]	; (800c5e8 <Setup_Parameter_Temperature_Sensor+0x29c>)
 800c52c:	f7f7 f83e 	bl	80035ac <Display_Setup_Parameter_Temperature>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800c530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c534:	482f      	ldr	r0, [pc, #188]	; (800c5f4 <Setup_Parameter_Temperature_Sensor+0x2a8>)
 800c536:	f7f8 fddb 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d119      	bne.n	800c574 <Setup_Parameter_Temperature_Sensor+0x228>
			{
				HAL_Delay(50);
 800c540:	2032      	movs	r0, #50	; 0x32
 800c542:	f7f7 fb95 	bl	8003c70 <HAL_Delay>
				y_static_input_temperature_value[1]++;
 800c546:	4b2a      	ldr	r3, [pc, #168]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c54e:	4618      	mov	r0, r3
 800c550:	f7f4 faf0 	bl	8000b34 <__addsf3>
 800c554:	4603      	mov	r3, r0
 800c556:	461a      	mov	r2, r3
 800c558:	4b25      	ldr	r3, [pc, #148]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c55a:	605a      	str	r2, [r3, #4]
				if(y_static_input_temperature_value[1] >= TEMPERATURE_MAX)
 800c55c:	4b24      	ldr	r3, [pc, #144]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	4925      	ldr	r1, [pc, #148]	; (800c5f8 <Setup_Parameter_Temperature_Sensor+0x2ac>)
 800c562:	4618      	mov	r0, r3
 800c564:	f7f4 fda0 	bl	80010a8 <__aeabi_fcmpge>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <Setup_Parameter_Temperature_Sensor+0x228>
				{
					y_static_input_temperature_value[1] = TEMPERATURE_MAX;
 800c56e:	4b20      	ldr	r3, [pc, #128]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c570:	4a21      	ldr	r2, [pc, #132]	; (800c5f8 <Setup_Parameter_Temperature_Sensor+0x2ac>)
 800c572:	605a      	str	r2, [r3, #4]
				}
			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800c574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c578:	481e      	ldr	r0, [pc, #120]	; (800c5f4 <Setup_Parameter_Temperature_Sensor+0x2a8>)
 800c57a:	f7f8 fdb9 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	f040 8142 	bne.w	800c80a <Setup_Parameter_Temperature_Sensor+0x4be>
			{
				HAL_Delay(50);
 800c586:	2032      	movs	r0, #50	; 0x32
 800c588:	f7f7 fb72 	bl	8003c70 <HAL_Delay>
				y_static_input_temperature_value[1]--;
 800c58c:	4b18      	ldr	r3, [pc, #96]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c594:	4618      	mov	r0, r3
 800c596:	f7f4 facb 	bl	8000b30 <__aeabi_fsub>
 800c59a:	4603      	mov	r3, r0
 800c59c:	461a      	mov	r2, r3
 800c59e:	4b14      	ldr	r3, [pc, #80]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c5a0:	605a      	str	r2, [r3, #4]
				if(y_static_input_temperature_value[1] <= TEMPERATURE_MIN)
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	f04f 0100 	mov.w	r1, #0
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7f4 fd72 	bl	8001094 <__aeabi_fcmple>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d100      	bne.n	800c5b8 <Setup_Parameter_Temperature_Sensor+0x26c>
				{
					y_static_input_temperature_value[1] = TEMPERATURE_MIN;
				}
			}
			break;
 800c5b6:	e128      	b.n	800c80a <Setup_Parameter_Temperature_Sensor+0x4be>
					y_static_input_temperature_value[1] = TEMPERATURE_MIN;
 800c5b8:	4b0d      	ldr	r3, [pc, #52]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c5ba:	f04f 0200 	mov.w	r2, #0
 800c5be:	605a      	str	r2, [r3, #4]
			break;
 800c5c0:	e123      	b.n	800c80a <Setup_Parameter_Temperature_Sensor+0x4be>
		case 4:
			/*lcd display*/
			Display_Setup_Parameter_Temperature(&lcd1, y_static_input_temperature_value[1]);
 800c5c2:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <Setup_Parameter_Temperature_Sensor+0x2a4>)
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7f4 fda8 	bl	800111c <__aeabi_f2uiz>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	4805      	ldr	r0, [pc, #20]	; (800c5e8 <Setup_Parameter_Temperature_Sensor+0x29c>)
 800c5d4:	f7f6 ffea 	bl	80035ac <Display_Setup_Parameter_Temperature>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_06 == 2)
 800c5d8:	4b08      	ldr	r3, [pc, #32]	; (800c5fc <Setup_Parameter_Temperature_Sensor+0x2b0>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d14a      	bne.n	800c678 <Setup_Parameter_Temperature_Sensor+0x32c>
			{
				while (HAL_GetTick() - time_wake_up_06 <= TIME_WAITTING_START_CALIBRATION)
 800c5e2:	e01c      	b.n	800c61e <Setup_Parameter_Temperature_Sensor+0x2d2>
 800c5e4:	40011400 	.word	0x40011400
 800c5e8:	2000086c 	.word	0x2000086c
 800c5ec:	20001c3c 	.word	0x20001c3c
 800c5f0:	20000060 	.word	0x20000060
 800c5f4:	40011000 	.word	0x40011000
 800c5f8:	42700000 	.word	0x42700000
 800c5fc:	20001c3d 	.word	0x20001c3d
 800c600:	000493e0 	.word	0x000493e0
 800c604:	20001c28 	.word	0x20001c28
 800c608:	20001c24 	.word	0x20001c24
 800c60c:	20001b20 	.word	0x20001b20
 800c610:	20001c0c 	.word	0x20001c0c
 800c614:	40011800 	.word	0x40011800
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800c618:	20af      	movs	r0, #175	; 0xaf
 800c61a:	f7f7 fac1 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_06 <= TIME_WAITTING_START_CALIBRATION)
 800c61e:	f7f7 fb1d 	bl	8003c5c <HAL_GetTick>
 800c622:	4602      	mov	r2, r0
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	4a7e      	ldr	r2, [pc, #504]	; (800c824 <Setup_Parameter_Temperature_Sensor+0x4d8>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d9f4      	bls.n	800c618 <Setup_Parameter_Temperature_Sensor+0x2cc>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800c62e:	20ff      	movs	r0, #255	; 0xff
 800c630:	f7f7 fab6 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800c634:	230a      	movs	r3, #10
 800c636:	4a7c      	ldr	r2, [pc, #496]	; (800c828 <Setup_Parameter_Temperature_Sensor+0x4dc>)
 800c638:	497c      	ldr	r1, [pc, #496]	; (800c82c <Setup_Parameter_Temperature_Sensor+0x4e0>)
 800c63a:	487d      	ldr	r0, [pc, #500]	; (800c830 <Setup_Parameter_Temperature_Sensor+0x4e4>)
 800c63c:	f7f6 f890 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				x_input_temperature_value[1] = temperature;
 800c640:	4b7a      	ldr	r3, [pc, #488]	; (800c82c <Setup_Parameter_Temperature_Sensor+0x4e0>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a7b      	ldr	r2, [pc, #492]	; (800c834 <Setup_Parameter_Temperature_Sensor+0x4e8>)
 800c646:	6053      	str	r3, [r2, #4]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800c648:	2300      	movs	r3, #0
 800c64a:	71bb      	strb	r3, [r7, #6]
 800c64c:	e00a      	b.n	800c664 <Setup_Parameter_Temperature_Sensor+0x318>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800c64e:	2101      	movs	r1, #1
 800c650:	4879      	ldr	r0, [pc, #484]	; (800c838 <Setup_Parameter_Temperature_Sensor+0x4ec>)
 800c652:	f7f8 fd7c 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800c656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c65a:	f7f7 fb09 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800c65e:	79bb      	ldrb	r3, [r7, #6]
 800c660:	3301      	adds	r3, #1
 800c662:	71bb      	strb	r3, [r7, #6]
 800c664:	79bb      	ldrb	r3, [r7, #6]
 800c666:	2b04      	cmp	r3, #4
 800c668:	d9f1      	bls.n	800c64e <Setup_Parameter_Temperature_Sensor+0x302>
				}
				/*increase variable by 1 unit*/
				check_06 ++;
 800c66a:	4b74      	ldr	r3, [pc, #464]	; (800c83c <Setup_Parameter_Temperature_Sensor+0x4f0>)
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	3301      	adds	r3, #1
 800c672:	b2da      	uxtb	r2, r3
 800c674:	4b71      	ldr	r3, [pc, #452]	; (800c83c <Setup_Parameter_Temperature_Sensor+0x4f0>)
 800c676:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from temperature sensor*/
			if(check_06 == 3)
 800c678:	4b70      	ldr	r3, [pc, #448]	; (800c83c <Setup_Parameter_Temperature_Sensor+0x4f0>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b03      	cmp	r3, #3
 800c680:	f040 80c5 	bne.w	800c80e <Setup_Parameter_Temperature_Sensor+0x4c2>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800c684:	2200      	movs	r2, #0
 800c686:	2101      	movs	r1, #1
 800c688:	486b      	ldr	r0, [pc, #428]	; (800c838 <Setup_Parameter_Temperature_Sensor+0x4ec>)
 800c68a:	f7f8 fd48 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Done(&lcd1, x_input_temperature_value[1]);
 800c68e:	4b69      	ldr	r3, [pc, #420]	; (800c834 <Setup_Parameter_Temperature_Sensor+0x4e8>)
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	4619      	mov	r1, r3
 800c694:	486a      	ldr	r0, [pc, #424]	; (800c840 <Setup_Parameter_Temperature_Sensor+0x4f4>)
 800c696:	f7f7 f889 	bl	80037ac <Display_Done>
			}
			break;
 800c69a:	e0b8      	b.n	800c80e <Setup_Parameter_Temperature_Sensor+0x4c2>

		/*set up value temperature pm 45 - 55*/
		case 5:
			/*lcd display */
			Display_Setup_Parameter_Temperature(&lcd1, y_static_input_temperature_value[2]);
 800c69c:	4b69      	ldr	r3, [pc, #420]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f4 fd3b 	bl	800111c <__aeabi_f2uiz>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4864      	ldr	r0, [pc, #400]	; (800c840 <Setup_Parameter_Temperature_Sensor+0x4f4>)
 800c6ae:	f7f6 ff7d 	bl	80035ac <Display_Setup_Parameter_Temperature>
			/*check the button press then perform the increment of the variable's value*/
			if(HAL_GPIO_ReadPin(BUTTON_05_UP_GPIO_Port, BUTTON_05_UP_Pin) == GPIO_PIN_RESET)
 800c6b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c6b6:	4864      	ldr	r0, [pc, #400]	; (800c848 <Setup_Parameter_Temperature_Sensor+0x4fc>)
 800c6b8:	f7f8 fd1a 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d119      	bne.n	800c6f6 <Setup_Parameter_Temperature_Sensor+0x3aa>
			{
				y_static_input_temperature_value[2]++;
 800c6c2:	4b60      	ldr	r3, [pc, #384]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7f4 fa32 	bl	8000b34 <__addsf3>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	4b5b      	ldr	r3, [pc, #364]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c6d6:	609a      	str	r2, [r3, #8]
				if(y_static_input_temperature_value[2] >= TEMPERATURE_MAX)
 800c6d8:	4b5a      	ldr	r3, [pc, #360]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	495b      	ldr	r1, [pc, #364]	; (800c84c <Setup_Parameter_Temperature_Sensor+0x500>)
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f4 fce2 	bl	80010a8 <__aeabi_fcmpge>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d005      	beq.n	800c6f6 <Setup_Parameter_Temperature_Sensor+0x3aa>
				{
					HAL_Delay(50);
 800c6ea:	2032      	movs	r0, #50	; 0x32
 800c6ec:	f7f7 fac0 	bl	8003c70 <HAL_Delay>
					y_static_input_temperature_value[2] = TEMPERATURE_MAX;
 800c6f0:	4b54      	ldr	r3, [pc, #336]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c6f2:	4a56      	ldr	r2, [pc, #344]	; (800c84c <Setup_Parameter_Temperature_Sensor+0x500>)
 800c6f4:	609a      	str	r2, [r3, #8]
				}
			}
			/*check the button press then do the decrement of the variable*/
			if(HAL_GPIO_ReadPin(BUTTON_06_DOWN_GPIO_Port, BUTTON_06_DOWN_Pin) == GPIO_PIN_RESET)
 800c6f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c6fa:	4853      	ldr	r0, [pc, #332]	; (800c848 <Setup_Parameter_Temperature_Sensor+0x4fc>)
 800c6fc:	f7f8 fcf8 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	f040 8085 	bne.w	800c812 <Setup_Parameter_Temperature_Sensor+0x4c6>
			{
				y_static_input_temperature_value[2]--;
 800c708:	4b4e      	ldr	r3, [pc, #312]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c710:	4618      	mov	r0, r3
 800c712:	f7f4 fa0d 	bl	8000b30 <__aeabi_fsub>
 800c716:	4603      	mov	r3, r0
 800c718:	461a      	mov	r2, r3
 800c71a:	4b4a      	ldr	r3, [pc, #296]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c71c:	609a      	str	r2, [r3, #8]
				if(y_static_input_temperature_value[2] <= TEMPERATURE_MIN)
 800c71e:	4b49      	ldr	r3, [pc, #292]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	f04f 0100 	mov.w	r1, #0
 800c726:	4618      	mov	r0, r3
 800c728:	f7f4 fcb4 	bl	8001094 <__aeabi_fcmple>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d100      	bne.n	800c734 <Setup_Parameter_Temperature_Sensor+0x3e8>
				{
					HAL_Delay(50);
					y_static_input_temperature_value[2] = TEMPERATURE_MIN;
				}
			}
			break;
 800c732:	e06e      	b.n	800c812 <Setup_Parameter_Temperature_Sensor+0x4c6>
					HAL_Delay(50);
 800c734:	2032      	movs	r0, #50	; 0x32
 800c736:	f7f7 fa9b 	bl	8003c70 <HAL_Delay>
					y_static_input_temperature_value[2] = TEMPERATURE_MIN;
 800c73a:	4b42      	ldr	r3, [pc, #264]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c73c:	f04f 0200 	mov.w	r2, #0
 800c740:	609a      	str	r2, [r3, #8]
			break;
 800c742:	e066      	b.n	800c812 <Setup_Parameter_Temperature_Sensor+0x4c6>
		case 6:
			/*lcd display */
			Display_Setup_Parameter_Temperature(&lcd1, y_static_input_temperature_value[2]);
 800c744:	4b3f      	ldr	r3, [pc, #252]	; (800c844 <Setup_Parameter_Temperature_Sensor+0x4f8>)
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	4618      	mov	r0, r3
 800c74a:	f7f4 fce7 	bl	800111c <__aeabi_f2uiz>
 800c74e:	4603      	mov	r3, r0
 800c750:	b2db      	uxtb	r3, r3
 800c752:	4619      	mov	r1, r3
 800c754:	483a      	ldr	r0, [pc, #232]	; (800c840 <Setup_Parameter_Temperature_Sensor+0x4f4>)
 800c756:	f7f6 ff29 	bl	80035ac <Display_Setup_Parameter_Temperature>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_06 == 3)
 800c75a:	4b38      	ldr	r3, [pc, #224]	; (800c83c <Setup_Parameter_Temperature_Sensor+0x4f0>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b03      	cmp	r3, #3
 800c762:	d130      	bne.n	800c7c6 <Setup_Parameter_Temperature_Sensor+0x47a>
			{
				while (HAL_GetTick() - time_wake_up_06 <= TIME_WAITTING_START_CALIBRATION)
 800c764:	e002      	b.n	800c76c <Setup_Parameter_Temperature_Sensor+0x420>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800c766:	20af      	movs	r0, #175	; 0xaf
 800c768:	f7f7 fa1a 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_06 <= TIME_WAITTING_START_CALIBRATION)
 800c76c:	f7f7 fa76 	bl	8003c5c <HAL_GetTick>
 800c770:	4602      	mov	r2, r0
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	4a2b      	ldr	r2, [pc, #172]	; (800c824 <Setup_Parameter_Temperature_Sensor+0x4d8>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d9f4      	bls.n	800c766 <Setup_Parameter_Temperature_Sensor+0x41a>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800c77c:	20ff      	movs	r0, #255	; 0xff
 800c77e:	f7f7 fa0f 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800c782:	230a      	movs	r3, #10
 800c784:	4a28      	ldr	r2, [pc, #160]	; (800c828 <Setup_Parameter_Temperature_Sensor+0x4dc>)
 800c786:	4929      	ldr	r1, [pc, #164]	; (800c82c <Setup_Parameter_Temperature_Sensor+0x4e0>)
 800c788:	4829      	ldr	r0, [pc, #164]	; (800c830 <Setup_Parameter_Temperature_Sensor+0x4e4>)
 800c78a:	f7f5 ffe9 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				x_input_temperature_value[2] = temperature;
 800c78e:	4b27      	ldr	r3, [pc, #156]	; (800c82c <Setup_Parameter_Temperature_Sensor+0x4e0>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a28      	ldr	r2, [pc, #160]	; (800c834 <Setup_Parameter_Temperature_Sensor+0x4e8>)
 800c794:	6093      	str	r3, [r2, #8]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800c796:	2300      	movs	r3, #0
 800c798:	717b      	strb	r3, [r7, #5]
 800c79a:	e00a      	b.n	800c7b2 <Setup_Parameter_Temperature_Sensor+0x466>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800c79c:	2101      	movs	r1, #1
 800c79e:	4826      	ldr	r0, [pc, #152]	; (800c838 <Setup_Parameter_Temperature_Sensor+0x4ec>)
 800c7a0:	f7f8 fcd5 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800c7a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c7a8:	f7f7 fa62 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800c7ac:	797b      	ldrb	r3, [r7, #5]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	717b      	strb	r3, [r7, #5]
 800c7b2:	797b      	ldrb	r3, [r7, #5]
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	d9f1      	bls.n	800c79c <Setup_Parameter_Temperature_Sensor+0x450>
				}
				/*increase variable by 1 unit*/
				check_06++;
 800c7b8:	4b20      	ldr	r3, [pc, #128]	; (800c83c <Setup_Parameter_Temperature_Sensor+0x4f0>)
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	3301      	adds	r3, #1
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	4b1e      	ldr	r3, [pc, #120]	; (800c83c <Setup_Parameter_Temperature_Sensor+0x4f0>)
 800c7c4:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from temperature sensor*/
			if(check_06 == 4)
 800c7c6:	4b1d      	ldr	r3, [pc, #116]	; (800c83c <Setup_Parameter_Temperature_Sensor+0x4f0>)
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	2b04      	cmp	r3, #4
 800c7ce:	d122      	bne.n	800c816 <Setup_Parameter_Temperature_Sensor+0x4ca>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	2101      	movs	r1, #1
 800c7d4:	4818      	ldr	r0, [pc, #96]	; (800c838 <Setup_Parameter_Temperature_Sensor+0x4ec>)
 800c7d6:	f7f8 fca2 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Done(&lcd1, x_input_temperature_value[2]);
 800c7da:	4b16      	ldr	r3, [pc, #88]	; (800c834 <Setup_Parameter_Temperature_Sensor+0x4e8>)
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4817      	ldr	r0, [pc, #92]	; (800c840 <Setup_Parameter_Temperature_Sensor+0x4f4>)
 800c7e2:	f7f6 ffe3 	bl	80037ac <Display_Done>
			}
			break;
 800c7e6:	e016      	b.n	800c816 <Setup_Parameter_Temperature_Sensor+0x4ca>
		
		/*Default mode*/
		default:
			/*Lcd set cursor*/
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	4814      	ldr	r0, [pc, #80]	; (800c840 <Setup_Parameter_Temperature_Sensor+0x4f4>)
 800c7ee:	f7fb fab3 	bl	8007d58 <CLCD_I2C_SetCursor>
			/*Lcd send string*/
			CLCD_I2C_WriteString(&lcd1, "TemperatureSensor");
 800c7f2:	4917      	ldr	r1, [pc, #92]	; (800c850 <Setup_Parameter_Temperature_Sensor+0x504>)
 800c7f4:	4812      	ldr	r0, [pc, #72]	; (800c840 <Setup_Parameter_Temperature_Sensor+0x4f4>)
 800c7f6:	f7fb fb02 	bl	8007dfe <CLCD_I2C_WriteString>
			/*reassign variable check_06 = 1*/
			check_06 = 1;
 800c7fa:	4b10      	ldr	r3, [pc, #64]	; (800c83c <Setup_Parameter_Temperature_Sensor+0x4f0>)
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	701a      	strb	r2, [r3, #0]
			break;
 800c800:	e00a      	b.n	800c818 <Setup_Parameter_Temperature_Sensor+0x4cc>
			break;
 800c802:	bf00      	nop
 800c804:	e008      	b.n	800c818 <Setup_Parameter_Temperature_Sensor+0x4cc>
			break;
 800c806:	bf00      	nop
 800c808:	e006      	b.n	800c818 <Setup_Parameter_Temperature_Sensor+0x4cc>
			break;
 800c80a:	bf00      	nop
 800c80c:	e004      	b.n	800c818 <Setup_Parameter_Temperature_Sensor+0x4cc>
			break;
 800c80e:	bf00      	nop
 800c810:	e002      	b.n	800c818 <Setup_Parameter_Temperature_Sensor+0x4cc>
			break;
 800c812:	bf00      	nop
 800c814:	e000      	b.n	800c818 <Setup_Parameter_Temperature_Sensor+0x4cc>
			break;
 800c816:	bf00      	nop
	}

	    return 0;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	000493e0 	.word	0x000493e0
 800c828:	20001c28 	.word	0x20001c28
 800c82c:	20001c24 	.word	0x20001c24
 800c830:	20001b20 	.word	0x20001b20
 800c834:	20001c0c 	.word	0x20001c0c
 800c838:	40011800 	.word	0x40011800
 800c83c:	20001c3d 	.word	0x20001c3d
 800c840:	2000086c 	.word	0x2000086c
 800c844:	20000060 	.word	0x20000060
 800c848:	40011000 	.word	0x40011000
 800c84c:	42700000 	.word	0x42700000
 800c850:	080113b4 	.word	0x080113b4

0800c854 <Output_Value_Sum_Pm_Sensor>:

/**
 *
 */
static uint8_t Output_Value_Sum_Pm_Sensor(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_output_value_sum_pm_sensor = 0;
	static __IO uint8_t check_07 = 0;
	uint32_t time_wake_up_07 = HAL_GetTick();
 800c85a:	f7f7 f9ff 	bl	8003c5c <HAL_GetTick>
 800c85e:	6078      	str	r0, [r7, #4]
	float out_put_01 = 0;
 800c860:	f04f 0300 	mov.w	r3, #0
 800c864:	60fb      	str	r3, [r7, #12]
	float value_01 = 0;
 800c866:	f04f 0300 	mov.w	r3, #0
 800c86a:	603b      	str	r3, [r7, #0]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800c86c:	2140      	movs	r1, #64	; 0x40
 800c86e:	489f      	ldr	r0, [pc, #636]	; (800caec <Output_Value_Sum_Pm_Sensor+0x298>)
 800c870:	f7f8 fc3e 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c874:	4603      	mov	r3, r0
 800c876:	2b01      	cmp	r3, #1
 800c878:	d11b      	bne.n	800c8b2 <Output_Value_Sum_Pm_Sensor+0x5e>
	{
		HAL_Delay(100);
 800c87a:	2064      	movs	r0, #100	; 0x64
 800c87c:	f7f7 f9f8 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800c880:	2140      	movs	r1, #64	; 0x40
 800c882:	489a      	ldr	r0, [pc, #616]	; (800caec <Output_Value_Sum_Pm_Sensor+0x298>)
 800c884:	f7f8 fc34 	bl	80050f0 <HAL_GPIO_ReadPin>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d111      	bne.n	800c8b2 <Output_Value_Sum_Pm_Sensor+0x5e>
		{
			/*Display clear*/
			CLCD_I2C_Clear(&lcd1);
 800c88e:	4898      	ldr	r0, [pc, #608]	; (800caf0 <Output_Value_Sum_Pm_Sensor+0x29c>)
 800c890:	f7fb facc 	bl	8007e2c <CLCD_I2C_Clear>
			/*variable up */
			mode_output_value_sum_pm_sensor++;
 800c894:	4b97      	ldr	r3, [pc, #604]	; (800caf4 <Output_Value_Sum_Pm_Sensor+0x2a0>)
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	3301      	adds	r3, #1
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	4b95      	ldr	r3, [pc, #596]	; (800caf4 <Output_Value_Sum_Pm_Sensor+0x2a0>)
 800c8a0:	701a      	strb	r2, [r3, #0]
			if(mode_output_value_sum_pm_sensor > 3)
 800c8a2:	4b94      	ldr	r3, [pc, #592]	; (800caf4 <Output_Value_Sum_Pm_Sensor+0x2a0>)
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b03      	cmp	r3, #3
 800c8aa:	d902      	bls.n	800c8b2 <Output_Value_Sum_Pm_Sensor+0x5e>
				/*variable up  mode_setup_parameter_sum_pm_sensor = 0*/
				mode_output_value_sum_pm_sensor = 0;
 800c8ac:	4b91      	ldr	r3, [pc, #580]	; (800caf4 <Output_Value_Sum_Pm_Sensor+0x2a0>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	701a      	strb	r2, [r3, #0]
   /*
	*setting measurement condition sum pm sensor
	*
	* */

	switch (mode_output_value_sum_pm_sensor)
 800c8b2:	4b90      	ldr	r3, [pc, #576]	; (800caf4 <Output_Value_Sum_Pm_Sensor+0x2a0>)
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	f000 80ad 	beq.w	800ca18 <Output_Value_Sum_Pm_Sensor+0x1c4>
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	f300 80fc 	bgt.w	800cabc <Output_Value_Sum_Pm_Sensor+0x268>
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d002      	beq.n	800c8ce <Output_Value_Sum_Pm_Sensor+0x7a>
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d053      	beq.n	800c974 <Output_Value_Sum_Pm_Sensor+0x120>
 800c8cc:	e0f6      	b.n	800cabc <Output_Value_Sum_Pm_Sensor+0x268>
	{

		case 1:
			/*lcd display option*/
			Display_Setup_Parameter_Sum_pm(&lcd1,y_static_input_sum_pm_value[0]);
 800c8ce:	4b8a      	ldr	r3, [pc, #552]	; (800caf8 <Output_Value_Sum_Pm_Sensor+0x2a4>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7f4 fc22 	bl	800111c <__aeabi_f2uiz>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	4619      	mov	r1, r3
 800c8de:	4884      	ldr	r0, [pc, #528]	; (800caf0 <Output_Value_Sum_Pm_Sensor+0x29c>)
 800c8e0:	f7f6 f884 	bl	80029ec <Display_Setup_Parameter_Sum_pm>
			/*check condition for execution the data reading from sum pm sensor*/
			if(check_07 == 1)
 800c8e4:	4b85      	ldr	r3, [pc, #532]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d132      	bne.n	800c954 <Output_Value_Sum_Pm_Sensor+0x100>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_07 <= TIME_WAITTING_START_CALIBRATION)
 800c8ee:	e002      	b.n	800c8f6 <Output_Value_Sum_Pm_Sensor+0xa2>
				{
					/*Turn on pump*/
					Send_Data_74HC595(0xAF);
 800c8f0:	20af      	movs	r0, #175	; 0xaf
 800c8f2:	f7f7 f955 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_07 <= TIME_WAITTING_START_CALIBRATION)
 800c8f6:	f7f7 f9b1 	bl	8003c5c <HAL_GetTick>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	1ad3      	subs	r3, r2, r3
 800c900:	4a7f      	ldr	r2, [pc, #508]	; (800cb00 <Output_Value_Sum_Pm_Sensor+0x2ac>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d9f4      	bls.n	800c8f0 <Output_Value_Sum_Pm_Sensor+0x9c>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800c906:	20ff      	movs	r0, #255	; 0xff
 800c908:	f7f7 f94a 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				value_01 = Sharp_G2y10_Dust_Sensor_Measuring_Average(&sharpg2y_sensor01, 10);
 800c90c:	210a      	movs	r1, #10
 800c90e:	487d      	ldr	r0, [pc, #500]	; (800cb04 <Output_Value_Sum_Pm_Sensor+0x2b0>)
 800c910:	f001 f8b6 	bl	800da80 <Sharp_G2y10_Dust_Sensor_Measuring_Average>
 800c914:	6038      	str	r0, [r7, #0]
				out_put_01 = Lagrange_Interpolation(x_input_sum_pm_value, y_static_input_sum_pm_value, MAX_ARR_X_Y_LAGRANGE, value_01);
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	2203      	movs	r2, #3
 800c91a:	4977      	ldr	r1, [pc, #476]	; (800caf8 <Output_Value_Sum_Pm_Sensor+0x2a4>)
 800c91c:	487a      	ldr	r0, [pc, #488]	; (800cb08 <Output_Value_Sum_Pm_Sensor+0x2b4>)
 800c91e:	f000 fe85 	bl	800d62c <Lagrange_Interpolation>
 800c922:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from sum pm sensor*/
				for(uint8_t i =0; i < 5; i++)
 800c924:	2300      	movs	r3, #0
 800c926:	72fb      	strb	r3, [r7, #11]
 800c928:	e00a      	b.n	800c940 <Output_Value_Sum_Pm_Sensor+0xec>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800c92a:	2101      	movs	r1, #1
 800c92c:	4877      	ldr	r0, [pc, #476]	; (800cb0c <Output_Value_Sum_Pm_Sensor+0x2b8>)
 800c92e:	f7f8 fc0e 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800c932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c936:	f7f7 f99b 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800c93a:	7afb      	ldrb	r3, [r7, #11]
 800c93c:	3301      	adds	r3, #1
 800c93e:	72fb      	strb	r3, [r7, #11]
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	2b04      	cmp	r3, #4
 800c944:	d9f1      	bls.n	800c92a <Output_Value_Sum_Pm_Sensor+0xd6>
				}
				/*increase variable by 1 unit*/
				check_07 ++;
 800c946:	4b6d      	ldr	r3, [pc, #436]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	3301      	adds	r3, #1
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	4b6a      	ldr	r3, [pc, #424]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800c952:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from sum pm sensor*/
			if(check_07 == 2)
 800c954:	4b69      	ldr	r3, [pc, #420]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	f040 80bb 	bne.w	800cad6 <Output_Value_Sum_Pm_Sensor+0x282>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800c960:	2200      	movs	r2, #0
 800c962:	2101      	movs	r1, #1
 800c964:	4869      	ldr	r0, [pc, #420]	; (800cb0c <Output_Value_Sum_Pm_Sensor+0x2b8>)
 800c966:	f7f8 fbda 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Monitor(&lcd1, out_put_01);
 800c96a:	68f9      	ldr	r1, [r7, #12]
 800c96c:	4860      	ldr	r0, [pc, #384]	; (800caf0 <Output_Value_Sum_Pm_Sensor+0x29c>)
 800c96e:	f7f6 fff9 	bl	8003964 <Display_Monitor>
			}
			break;
 800c972:	e0b0      	b.n	800cad6 <Output_Value_Sum_Pm_Sensor+0x282>

		case 2:
			/*Lcd display*/
			Display_Setup_Parameter_Sum_pm(&lcd1,y_static_input_sum_pm_value[1]);
 800c974:	4b60      	ldr	r3, [pc, #384]	; (800caf8 <Output_Value_Sum_Pm_Sensor+0x2a4>)
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	4618      	mov	r0, r3
 800c97a:	f7f4 fbcf 	bl	800111c <__aeabi_f2uiz>
 800c97e:	4603      	mov	r3, r0
 800c980:	b29b      	uxth	r3, r3
 800c982:	4619      	mov	r1, r3
 800c984:	485a      	ldr	r0, [pc, #360]	; (800caf0 <Output_Value_Sum_Pm_Sensor+0x29c>)
 800c986:	f7f6 f831 	bl	80029ec <Display_Setup_Parameter_Sum_pm>
			/*check condition for execution the data reading from sum pm sensor*/
			if(check_07 == 2)
 800c98a:	4b5c      	ldr	r3, [pc, #368]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b02      	cmp	r3, #2
 800c992:	d132      	bne.n	800c9fa <Output_Value_Sum_Pm_Sensor+0x1a6>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_07 <= TIME_WAITTING_START_CALIBRATION)
 800c994:	e002      	b.n	800c99c <Output_Value_Sum_Pm_Sensor+0x148>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800c996:	20af      	movs	r0, #175	; 0xaf
 800c998:	f7f7 f902 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_07 <= TIME_WAITTING_START_CALIBRATION)
 800c99c:	f7f7 f95e 	bl	8003c5c <HAL_GetTick>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	4a56      	ldr	r2, [pc, #344]	; (800cb00 <Output_Value_Sum_Pm_Sensor+0x2ac>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d9f4      	bls.n	800c996 <Output_Value_Sum_Pm_Sensor+0x142>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800c9ac:	20ff      	movs	r0, #255	; 0xff
 800c9ae:	f7f7 f8f7 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				value_01 = Sharp_G2y10_Dust_Sensor_Measuring_Average(&sharpg2y_sensor01, 10);
 800c9b2:	210a      	movs	r1, #10
 800c9b4:	4853      	ldr	r0, [pc, #332]	; (800cb04 <Output_Value_Sum_Pm_Sensor+0x2b0>)
 800c9b6:	f001 f863 	bl	800da80 <Sharp_G2y10_Dust_Sensor_Measuring_Average>
 800c9ba:	6038      	str	r0, [r7, #0]
				out_put_01 = Lagrange_Interpolation(x_input_sum_pm_value, y_static_input_sum_pm_value, MAX_ARR_X_Y_LAGRANGE, value_01);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	2203      	movs	r2, #3
 800c9c0:	494d      	ldr	r1, [pc, #308]	; (800caf8 <Output_Value_Sum_Pm_Sensor+0x2a4>)
 800c9c2:	4851      	ldr	r0, [pc, #324]	; (800cb08 <Output_Value_Sum_Pm_Sensor+0x2b4>)
 800c9c4:	f000 fe32 	bl	800d62c <Lagrange_Interpolation>
 800c9c8:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from sum pm sensor*/
				for(uint8_t i =0; i < 5; i++)
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	72bb      	strb	r3, [r7, #10]
 800c9ce:	e00a      	b.n	800c9e6 <Output_Value_Sum_Pm_Sensor+0x192>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	484e      	ldr	r0, [pc, #312]	; (800cb0c <Output_Value_Sum_Pm_Sensor+0x2b8>)
 800c9d4:	f7f8 fbbb 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800c9d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c9dc:	f7f7 f948 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800c9e0:	7abb      	ldrb	r3, [r7, #10]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	72bb      	strb	r3, [r7, #10]
 800c9e6:	7abb      	ldrb	r3, [r7, #10]
 800c9e8:	2b04      	cmp	r3, #4
 800c9ea:	d9f1      	bls.n	800c9d0 <Output_Value_Sum_Pm_Sensor+0x17c>
				}
				/*increase variable by 1 unit*/
				check_07 ++;
 800c9ec:	4b43      	ldr	r3, [pc, #268]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	b2da      	uxtb	r2, r3
 800c9f6:	4b41      	ldr	r3, [pc, #260]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800c9f8:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from sum pm sensor*/
			if(check_07 == 3)
 800c9fa:	4b40      	ldr	r3, [pc, #256]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b03      	cmp	r3, #3
 800ca02:	d16a      	bne.n	800cada <Output_Value_Sum_Pm_Sensor+0x286>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800ca04:	2200      	movs	r2, #0
 800ca06:	2101      	movs	r1, #1
 800ca08:	4840      	ldr	r0, [pc, #256]	; (800cb0c <Output_Value_Sum_Pm_Sensor+0x2b8>)
 800ca0a:	f7f8 fb88 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Monitor(&lcd1, out_put_01);
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	4837      	ldr	r0, [pc, #220]	; (800caf0 <Output_Value_Sum_Pm_Sensor+0x29c>)
 800ca12:	f7f6 ffa7 	bl	8003964 <Display_Monitor>
			}
			break;
 800ca16:	e060      	b.n	800cada <Output_Value_Sum_Pm_Sensor+0x286>

		case 3:
			/*lcd display option*/
			Display_Setup_Parameter_Sum_pm(&lcd1,y_static_input_sum_pm_value[2]);
 800ca18:	4b37      	ldr	r3, [pc, #220]	; (800caf8 <Output_Value_Sum_Pm_Sensor+0x2a4>)
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7f4 fb7d 	bl	800111c <__aeabi_f2uiz>
 800ca22:	4603      	mov	r3, r0
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	4619      	mov	r1, r3
 800ca28:	4831      	ldr	r0, [pc, #196]	; (800caf0 <Output_Value_Sum_Pm_Sensor+0x29c>)
 800ca2a:	f7f5 ffdf 	bl	80029ec <Display_Setup_Parameter_Sum_pm>
			/*check condition for execution the data reading from sum pm sensor*/
			if(check_07 == 3)
 800ca2e:	4b33      	ldr	r3, [pc, #204]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b03      	cmp	r3, #3
 800ca36:	d132      	bne.n	800ca9e <Output_Value_Sum_Pm_Sensor+0x24a>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_07 <= TIME_WAITTING_START_CALIBRATION)
 800ca38:	e002      	b.n	800ca40 <Output_Value_Sum_Pm_Sensor+0x1ec>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800ca3a:	20af      	movs	r0, #175	; 0xaf
 800ca3c:	f7f7 f8b0 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_07 <= TIME_WAITTING_START_CALIBRATION)
 800ca40:	f7f7 f90c 	bl	8003c5c <HAL_GetTick>
 800ca44:	4602      	mov	r2, r0
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	4a2d      	ldr	r2, [pc, #180]	; (800cb00 <Output_Value_Sum_Pm_Sensor+0x2ac>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d9f4      	bls.n	800ca3a <Output_Value_Sum_Pm_Sensor+0x1e6>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800ca50:	20ff      	movs	r0, #255	; 0xff
 800ca52:	f7f7 f8a5 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				value_01 = Sharp_G2y10_Dust_Sensor_Measuring_Average(&sharpg2y_sensor01, 10);
 800ca56:	210a      	movs	r1, #10
 800ca58:	482a      	ldr	r0, [pc, #168]	; (800cb04 <Output_Value_Sum_Pm_Sensor+0x2b0>)
 800ca5a:	f001 f811 	bl	800da80 <Sharp_G2y10_Dust_Sensor_Measuring_Average>
 800ca5e:	6038      	str	r0, [r7, #0]
				out_put_01 = Lagrange_Interpolation(x_input_sum_pm_value, y_static_input_sum_pm_value, MAX_ARR_X_Y_LAGRANGE,value_01);
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	2203      	movs	r2, #3
 800ca64:	4924      	ldr	r1, [pc, #144]	; (800caf8 <Output_Value_Sum_Pm_Sensor+0x2a4>)
 800ca66:	4828      	ldr	r0, [pc, #160]	; (800cb08 <Output_Value_Sum_Pm_Sensor+0x2b4>)
 800ca68:	f000 fde0 	bl	800d62c <Lagrange_Interpolation>
 800ca6c:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from sum pm sensor*/
				for(uint8_t i =0; i < 5; i++)
 800ca6e:	2300      	movs	r3, #0
 800ca70:	727b      	strb	r3, [r7, #9]
 800ca72:	e00a      	b.n	800ca8a <Output_Value_Sum_Pm_Sensor+0x236>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800ca74:	2101      	movs	r1, #1
 800ca76:	4825      	ldr	r0, [pc, #148]	; (800cb0c <Output_Value_Sum_Pm_Sensor+0x2b8>)
 800ca78:	f7f8 fb69 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800ca7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ca80:	f7f7 f8f6 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800ca84:	7a7b      	ldrb	r3, [r7, #9]
 800ca86:	3301      	adds	r3, #1
 800ca88:	727b      	strb	r3, [r7, #9]
 800ca8a:	7a7b      	ldrb	r3, [r7, #9]
 800ca8c:	2b04      	cmp	r3, #4
 800ca8e:	d9f1      	bls.n	800ca74 <Output_Value_Sum_Pm_Sensor+0x220>
				}
				/*increase variable by 1 unit*/
				check_07 ++;
 800ca90:	4b1a      	ldr	r3, [pc, #104]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	3301      	adds	r3, #1
 800ca98:	b2da      	uxtb	r2, r3
 800ca9a:	4b18      	ldr	r3, [pc, #96]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800ca9c:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from sum pm sensor*/
			if(check_07 == 4)
 800ca9e:	4b17      	ldr	r3, [pc, #92]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	2b04      	cmp	r3, #4
 800caa6:	d11a      	bne.n	800cade <Output_Value_Sum_Pm_Sensor+0x28a>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800caa8:	2200      	movs	r2, #0
 800caaa:	2101      	movs	r1, #1
 800caac:	4817      	ldr	r0, [pc, #92]	; (800cb0c <Output_Value_Sum_Pm_Sensor+0x2b8>)
 800caae:	f7f8 fb36 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Monitor(&lcd1, out_put_01);
 800cab2:	68f9      	ldr	r1, [r7, #12]
 800cab4:	480e      	ldr	r0, [pc, #56]	; (800caf0 <Output_Value_Sum_Pm_Sensor+0x29c>)
 800cab6:	f7f6 ff55 	bl	8003964 <Display_Monitor>
			}
			break;
 800caba:	e010      	b.n	800cade <Output_Value_Sum_Pm_Sensor+0x28a>

		/*Default mode*/
		default:
			/*reassign variable check_02 = 1*/
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800cabc:	2200      	movs	r2, #0
 800cabe:	2100      	movs	r1, #0
 800cac0:	480b      	ldr	r0, [pc, #44]	; (800caf0 <Output_Value_Sum_Pm_Sensor+0x29c>)
 800cac2:	f7fb f949 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Sum_Pm_Monitor");
 800cac6:	4912      	ldr	r1, [pc, #72]	; (800cb10 <Output_Value_Sum_Pm_Sensor+0x2bc>)
 800cac8:	4809      	ldr	r0, [pc, #36]	; (800caf0 <Output_Value_Sum_Pm_Sensor+0x29c>)
 800caca:	f7fb f998 	bl	8007dfe <CLCD_I2C_WriteString>
			check_07 = 1;
 800cace:	4b0b      	ldr	r3, [pc, #44]	; (800cafc <Output_Value_Sum_Pm_Sensor+0x2a8>)
 800cad0:	2201      	movs	r2, #1
 800cad2:	701a      	strb	r2, [r3, #0]
			break;
 800cad4:	e004      	b.n	800cae0 <Output_Value_Sum_Pm_Sensor+0x28c>
			break;
 800cad6:	bf00      	nop
 800cad8:	e002      	b.n	800cae0 <Output_Value_Sum_Pm_Sensor+0x28c>
			break;
 800cada:	bf00      	nop
 800cadc:	e000      	b.n	800cae0 <Output_Value_Sum_Pm_Sensor+0x28c>
			break;
 800cade:	bf00      	nop
	}

	return 0;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	40011400 	.word	0x40011400
 800caf0:	2000086c 	.word	0x2000086c
 800caf4:	20001c3e 	.word	0x20001c3e
 800caf8:	2000003c 	.word	0x2000003c
 800cafc:	20001c3f 	.word	0x20001c3f
 800cb00:	000493e0 	.word	0x000493e0
 800cb04:	20001b80 	.word	0x20001b80
 800cb08:	20001be8 	.word	0x20001be8
 800cb0c:	40011800 	.word	0x40011800
 800cb10:	080113c8 	.word	0x080113c8

0800cb14 <Output_Value_Co2_Sensor>:

/**
 *
 */
static uint8_t Output_Value_Co2_Sensor(void)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_output_value_co2_pm_sensor = 0;
	static __IO uint8_t check_08 = 0;
	uint32_t time_wake_up_08 = HAL_GetTick();
 800cb1a:	f7f7 f89f 	bl	8003c5c <HAL_GetTick>
 800cb1e:	6078      	str	r0, [r7, #4]
	float out_put_02 = 0;
 800cb20:	f04f 0300 	mov.w	r3, #0
 800cb24:	60fb      	str	r3, [r7, #12]
	float value_02 = 0;
 800cb26:	f04f 0300 	mov.w	r3, #0
 800cb2a:	603b      	str	r3, [r7, #0]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800cb2c:	2140      	movs	r1, #64	; 0x40
 800cb2e:	489f      	ldr	r0, [pc, #636]	; (800cdac <Output_Value_Co2_Sensor+0x298>)
 800cb30:	f7f8 fade 	bl	80050f0 <HAL_GPIO_ReadPin>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d11b      	bne.n	800cb72 <Output_Value_Co2_Sensor+0x5e>
	{
		HAL_Delay(100);
 800cb3a:	2064      	movs	r0, #100	; 0x64
 800cb3c:	f7f7 f898 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800cb40:	2140      	movs	r1, #64	; 0x40
 800cb42:	489a      	ldr	r0, [pc, #616]	; (800cdac <Output_Value_Co2_Sensor+0x298>)
 800cb44:	f7f8 fad4 	bl	80050f0 <HAL_GPIO_ReadPin>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d111      	bne.n	800cb72 <Output_Value_Co2_Sensor+0x5e>
		{
			/*lcd display */
			CLCD_I2C_Clear(&lcd1);
 800cb4e:	4898      	ldr	r0, [pc, #608]	; (800cdb0 <Output_Value_Co2_Sensor+0x29c>)
 800cb50:	f7fb f96c 	bl	8007e2c <CLCD_I2C_Clear>
			/*variable up*/
			mode_output_value_co2_pm_sensor++;
 800cb54:	4b97      	ldr	r3, [pc, #604]	; (800cdb4 <Output_Value_Co2_Sensor+0x2a0>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	4b95      	ldr	r3, [pc, #596]	; (800cdb4 <Output_Value_Co2_Sensor+0x2a0>)
 800cb60:	701a      	strb	r2, [r3, #0]
			if(mode_output_value_co2_pm_sensor > 3)
 800cb62:	4b94      	ldr	r3, [pc, #592]	; (800cdb4 <Output_Value_Co2_Sensor+0x2a0>)
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	2b03      	cmp	r3, #3
 800cb6a:	d902      	bls.n	800cb72 <Output_Value_Co2_Sensor+0x5e>
				mode_output_value_co2_pm_sensor = 0;
 800cb6c:	4b91      	ldr	r3, [pc, #580]	; (800cdb4 <Output_Value_Co2_Sensor+0x2a0>)
 800cb6e:	2200      	movs	r2, #0
 800cb70:	701a      	strb	r2, [r3, #0]

   /*
	*setting measurement condition co2 pm sensor
	*
	* */
	switch (mode_output_value_co2_pm_sensor)
 800cb72:	4b90      	ldr	r3, [pc, #576]	; (800cdb4 <Output_Value_Co2_Sensor+0x2a0>)
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	f000 80ad 	beq.w	800ccd8 <Output_Value_Co2_Sensor+0x1c4>
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	f300 80fc 	bgt.w	800cd7c <Output_Value_Co2_Sensor+0x268>
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d002      	beq.n	800cb8e <Output_Value_Co2_Sensor+0x7a>
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d053      	beq.n	800cc34 <Output_Value_Co2_Sensor+0x120>
 800cb8c:	e0f6      	b.n	800cd7c <Output_Value_Co2_Sensor+0x268>
	{
		case 1:
			/*Lcd display*/
			Display_Setup_Parameter_Co2(&lcd1, y_static_input_co2_value[0]);
 800cb8e:	4b8a      	ldr	r3, [pc, #552]	; (800cdb8 <Output_Value_Co2_Sensor+0x2a4>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7f4 fac2 	bl	800111c <__aeabi_f2uiz>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	4884      	ldr	r0, [pc, #528]	; (800cdb0 <Output_Value_Co2_Sensor+0x29c>)
 800cba0:	f7f5 fffe 	bl	8002ba0 <Display_Setup_Parameter_Co2>
			/*check condition for execution the data reading from co2 sensor*/
			if(check_08 == 1)
 800cba4:	4b85      	ldr	r3, [pc, #532]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d132      	bne.n	800cc14 <Output_Value_Co2_Sensor+0x100>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_08 <= TIME_WAITTING_START_CALIBRATION)
 800cbae:	e002      	b.n	800cbb6 <Output_Value_Co2_Sensor+0xa2>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800cbb0:	20af      	movs	r0, #175	; 0xaf
 800cbb2:	f7f6 fff5 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_08 <= TIME_WAITTING_START_CALIBRATION)
 800cbb6:	f7f7 f851 	bl	8003c5c <HAL_GetTick>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	1ad3      	subs	r3, r2, r3
 800cbc0:	4a7f      	ldr	r2, [pc, #508]	; (800cdc0 <Output_Value_Co2_Sensor+0x2ac>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d9f4      	bls.n	800cbb0 <Output_Value_Co2_Sensor+0x9c>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800cbc6:	20ff      	movs	r0, #255	; 0xff
 800cbc8:	f7f6 ffea 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				value_02 =  Mh_Z19B_Co2_Sensor_Caclulator_Average(&mh_z19b_sensor_01, 10);
 800cbcc:	210a      	movs	r1, #10
 800cbce:	487d      	ldr	r0, [pc, #500]	; (800cdc4 <Output_Value_Co2_Sensor+0x2b0>)
 800cbd0:	f7fb f998 	bl	8007f04 <Mh_Z19B_Co2_Sensor_Caclulator_Average>
 800cbd4:	6038      	str	r0, [r7, #0]
				out_put_02 = Lagrange_Interpolation(x_input_co2_value, y_static_input_co2_value, MAX_ARR_X_Y_LAGRANGE, value_02);
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	2203      	movs	r2, #3
 800cbda:	4977      	ldr	r1, [pc, #476]	; (800cdb8 <Output_Value_Co2_Sensor+0x2a4>)
 800cbdc:	487a      	ldr	r0, [pc, #488]	; (800cdc8 <Output_Value_Co2_Sensor+0x2b4>)
 800cbde:	f000 fd25 	bl	800d62c <Lagrange_Interpolation>
 800cbe2:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from co2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	72fb      	strb	r3, [r7, #11]
 800cbe8:	e00a      	b.n	800cc00 <Output_Value_Co2_Sensor+0xec>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800cbea:	2101      	movs	r1, #1
 800cbec:	4877      	ldr	r0, [pc, #476]	; (800cdcc <Output_Value_Co2_Sensor+0x2b8>)
 800cbee:	f7f8 faae 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800cbf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cbf6:	f7f7 f83b 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	72fb      	strb	r3, [r7, #11]
 800cc00:	7afb      	ldrb	r3, [r7, #11]
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	d9f1      	bls.n	800cbea <Output_Value_Co2_Sensor+0xd6>
				}
				/*increase variable by 1 unit*/
				check_08++;
 800cc06:	4b6d      	ldr	r3, [pc, #436]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	b2da      	uxtb	r2, r3
 800cc10:	4b6a      	ldr	r3, [pc, #424]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800cc12:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from co2 sensor*/
			if(check_08 == 2)
 800cc14:	4b69      	ldr	r3, [pc, #420]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	f040 80bb 	bne.w	800cd96 <Output_Value_Co2_Sensor+0x282>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800cc20:	2200      	movs	r2, #0
 800cc22:	2101      	movs	r1, #1
 800cc24:	4869      	ldr	r0, [pc, #420]	; (800cdcc <Output_Value_Co2_Sensor+0x2b8>)
 800cc26:	f7f8 fa7a 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Monitor(&lcd1, out_put_02);
 800cc2a:	68f9      	ldr	r1, [r7, #12]
 800cc2c:	4860      	ldr	r0, [pc, #384]	; (800cdb0 <Output_Value_Co2_Sensor+0x29c>)
 800cc2e:	f7f6 fe99 	bl	8003964 <Display_Monitor>
			}
			break;
 800cc32:	e0b0      	b.n	800cd96 <Output_Value_Co2_Sensor+0x282>

		case 2:
			/*Lcd display*/
			Display_Setup_Parameter_Co2(&lcd1, y_static_input_co2_value[1]);
 800cc34:	4b60      	ldr	r3, [pc, #384]	; (800cdb8 <Output_Value_Co2_Sensor+0x2a4>)
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7f4 fa6f 	bl	800111c <__aeabi_f2uiz>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	4619      	mov	r1, r3
 800cc44:	485a      	ldr	r0, [pc, #360]	; (800cdb0 <Output_Value_Co2_Sensor+0x29c>)
 800cc46:	f7f5 ffab 	bl	8002ba0 <Display_Setup_Parameter_Co2>
			/*check condition for execution the data reading from co2 sensor*/
			if(check_08 == 2)
 800cc4a:	4b5c      	ldr	r3, [pc, #368]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	d132      	bne.n	800ccba <Output_Value_Co2_Sensor+0x1a6>
			{
				/*Waitting sensor initialization*/
				while (HAL_GetTick() - time_wake_up_08 <= TIME_WAITTING_START_CALIBRATION)
 800cc54:	e002      	b.n	800cc5c <Output_Value_Co2_Sensor+0x148>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800cc56:	20af      	movs	r0, #175	; 0xaf
 800cc58:	f7f6 ffa2 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_08 <= TIME_WAITTING_START_CALIBRATION)
 800cc5c:	f7f6 fffe 	bl	8003c5c <HAL_GetTick>
 800cc60:	4602      	mov	r2, r0
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	4a56      	ldr	r2, [pc, #344]	; (800cdc0 <Output_Value_Co2_Sensor+0x2ac>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d9f4      	bls.n	800cc56 <Output_Value_Co2_Sensor+0x142>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800cc6c:	20ff      	movs	r0, #255	; 0xff
 800cc6e:	f7f6 ff97 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				value_02 =  Mh_Z19B_Co2_Sensor_Caclulator_Average(&mh_z19b_sensor_01, 10);
 800cc72:	210a      	movs	r1, #10
 800cc74:	4853      	ldr	r0, [pc, #332]	; (800cdc4 <Output_Value_Co2_Sensor+0x2b0>)
 800cc76:	f7fb f945 	bl	8007f04 <Mh_Z19B_Co2_Sensor_Caclulator_Average>
 800cc7a:	6038      	str	r0, [r7, #0]
				out_put_02 = Lagrange_Interpolation(x_input_co2_value, y_static_input_co2_value, MAX_ARR_X_Y_LAGRANGE, value_02);
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	2203      	movs	r2, #3
 800cc80:	494d      	ldr	r1, [pc, #308]	; (800cdb8 <Output_Value_Co2_Sensor+0x2a4>)
 800cc82:	4851      	ldr	r0, [pc, #324]	; (800cdc8 <Output_Value_Co2_Sensor+0x2b4>)
 800cc84:	f000 fcd2 	bl	800d62c <Lagrange_Interpolation>
 800cc88:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from co2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	72bb      	strb	r3, [r7, #10]
 800cc8e:	e00a      	b.n	800cca6 <Output_Value_Co2_Sensor+0x192>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800cc90:	2101      	movs	r1, #1
 800cc92:	484e      	ldr	r0, [pc, #312]	; (800cdcc <Output_Value_Co2_Sensor+0x2b8>)
 800cc94:	f7f8 fa5b 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800cc98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cc9c:	f7f6 ffe8 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800cca0:	7abb      	ldrb	r3, [r7, #10]
 800cca2:	3301      	adds	r3, #1
 800cca4:	72bb      	strb	r3, [r7, #10]
 800cca6:	7abb      	ldrb	r3, [r7, #10]
 800cca8:	2b04      	cmp	r3, #4
 800ccaa:	d9f1      	bls.n	800cc90 <Output_Value_Co2_Sensor+0x17c>
				}
				/*increase variable by 1 unit*/
				check_08 ++;
 800ccac:	4b43      	ldr	r3, [pc, #268]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	4b41      	ldr	r3, [pc, #260]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800ccb8:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from co2 sensor*/
			if(check_08 == 3)
 800ccba:	4b40      	ldr	r3, [pc, #256]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	2b03      	cmp	r3, #3
 800ccc2:	d16a      	bne.n	800cd9a <Output_Value_Co2_Sensor+0x286>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	4840      	ldr	r0, [pc, #256]	; (800cdcc <Output_Value_Co2_Sensor+0x2b8>)
 800ccca:	f7f8 fa28 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Monitor(&lcd1, out_put_02);
 800ccce:	68f9      	ldr	r1, [r7, #12]
 800ccd0:	4837      	ldr	r0, [pc, #220]	; (800cdb0 <Output_Value_Co2_Sensor+0x29c>)
 800ccd2:	f7f6 fe47 	bl	8003964 <Display_Monitor>
			}
			break;
 800ccd6:	e060      	b.n	800cd9a <Output_Value_Co2_Sensor+0x286>

		case 3:
			/*Lcd display*/
			Display_Setup_Parameter_Co2(&lcd1, y_static_input_co2_value[2]);
 800ccd8:	4b37      	ldr	r3, [pc, #220]	; (800cdb8 <Output_Value_Co2_Sensor+0x2a4>)
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7f4 fa1d 	bl	800111c <__aeabi_f2uiz>
 800cce2:	4603      	mov	r3, r0
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	4619      	mov	r1, r3
 800cce8:	4831      	ldr	r0, [pc, #196]	; (800cdb0 <Output_Value_Co2_Sensor+0x29c>)
 800ccea:	f7f5 ff59 	bl	8002ba0 <Display_Setup_Parameter_Co2>
			/*check condition for execution the data reading from co2 sensor*/
			if(check_08 == 3)
 800ccee:	4b33      	ldr	r3, [pc, #204]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b03      	cmp	r3, #3
 800ccf6:	d132      	bne.n	800cd5e <Output_Value_Co2_Sensor+0x24a>
			{
				while (HAL_GetTick() - time_wake_up_08 <= TIME_WAITTING_START_CALIBRATION)
 800ccf8:	e002      	b.n	800cd00 <Output_Value_Co2_Sensor+0x1ec>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800ccfa:	20af      	movs	r0, #175	; 0xaf
 800ccfc:	f7f6 ff50 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_08 <= TIME_WAITTING_START_CALIBRATION)
 800cd00:	f7f6 ffac 	bl	8003c5c <HAL_GetTick>
 800cd04:	4602      	mov	r2, r0
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	4a2d      	ldr	r2, [pc, #180]	; (800cdc0 <Output_Value_Co2_Sensor+0x2ac>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d9f4      	bls.n	800ccfa <Output_Value_Co2_Sensor+0x1e6>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800cd10:	20ff      	movs	r0, #255	; 0xff
 800cd12:	f7f6 ff45 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				value_02 =  Mh_Z19B_Co2_Sensor_Caclulator_Average(&mh_z19b_sensor_01, 10);
 800cd16:	210a      	movs	r1, #10
 800cd18:	482a      	ldr	r0, [pc, #168]	; (800cdc4 <Output_Value_Co2_Sensor+0x2b0>)
 800cd1a:	f7fb f8f3 	bl	8007f04 <Mh_Z19B_Co2_Sensor_Caclulator_Average>
 800cd1e:	6038      	str	r0, [r7, #0]
				out_put_02 = Lagrange_Interpolation(x_input_co2_value, y_static_input_co2_value, MAX_ARR_X_Y_LAGRANGE, value_02);
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	2203      	movs	r2, #3
 800cd24:	4924      	ldr	r1, [pc, #144]	; (800cdb8 <Output_Value_Co2_Sensor+0x2a4>)
 800cd26:	4828      	ldr	r0, [pc, #160]	; (800cdc8 <Output_Value_Co2_Sensor+0x2b4>)
 800cd28:	f000 fc80 	bl	800d62c <Lagrange_Interpolation>
 800cd2c:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from co2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800cd2e:	2300      	movs	r3, #0
 800cd30:	727b      	strb	r3, [r7, #9]
 800cd32:	e00a      	b.n	800cd4a <Output_Value_Co2_Sensor+0x236>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800cd34:	2101      	movs	r1, #1
 800cd36:	4825      	ldr	r0, [pc, #148]	; (800cdcc <Output_Value_Co2_Sensor+0x2b8>)
 800cd38:	f7f8 fa09 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800cd3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cd40:	f7f6 ff96 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800cd44:	7a7b      	ldrb	r3, [r7, #9]
 800cd46:	3301      	adds	r3, #1
 800cd48:	727b      	strb	r3, [r7, #9]
 800cd4a:	7a7b      	ldrb	r3, [r7, #9]
 800cd4c:	2b04      	cmp	r3, #4
 800cd4e:	d9f1      	bls.n	800cd34 <Output_Value_Co2_Sensor+0x220>
				}
				/*increase variable by 1 unit*/
				check_08 ++;
 800cd50:	4b1a      	ldr	r3, [pc, #104]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	3301      	adds	r3, #1
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	4b18      	ldr	r3, [pc, #96]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800cd5c:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from co2 sensor*/
			if(check_08 == 4)
 800cd5e:	4b17      	ldr	r3, [pc, #92]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	d11a      	bne.n	800cd9e <Output_Value_Co2_Sensor+0x28a>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800cd68:	2200      	movs	r2, #0
 800cd6a:	2101      	movs	r1, #1
 800cd6c:	4817      	ldr	r0, [pc, #92]	; (800cdcc <Output_Value_Co2_Sensor+0x2b8>)
 800cd6e:	f7f8 f9d6 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Monitor(&lcd1, out_put_02);
 800cd72:	68f9      	ldr	r1, [r7, #12]
 800cd74:	480e      	ldr	r0, [pc, #56]	; (800cdb0 <Output_Value_Co2_Sensor+0x29c>)
 800cd76:	f7f6 fdf5 	bl	8003964 <Display_Monitor>
			}
			break;
 800cd7a:	e010      	b.n	800cd9e <Output_Value_Co2_Sensor+0x28a>

		/*Default mode*/
		default:
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2100      	movs	r1, #0
 800cd80:	480b      	ldr	r0, [pc, #44]	; (800cdb0 <Output_Value_Co2_Sensor+0x29c>)
 800cd82:	f7fa ffe9 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Co2_Monitor");
 800cd86:	4912      	ldr	r1, [pc, #72]	; (800cdd0 <Output_Value_Co2_Sensor+0x2bc>)
 800cd88:	4809      	ldr	r0, [pc, #36]	; (800cdb0 <Output_Value_Co2_Sensor+0x29c>)
 800cd8a:	f7fb f838 	bl	8007dfe <CLCD_I2C_WriteString>
			check_08 = 1;
 800cd8e:	4b0b      	ldr	r3, [pc, #44]	; (800cdbc <Output_Value_Co2_Sensor+0x2a8>)
 800cd90:	2201      	movs	r2, #1
 800cd92:	701a      	strb	r2, [r3, #0]
			break;
 800cd94:	e004      	b.n	800cda0 <Output_Value_Co2_Sensor+0x28c>
			break;
 800cd96:	bf00      	nop
 800cd98:	e002      	b.n	800cda0 <Output_Value_Co2_Sensor+0x28c>
			break;
 800cd9a:	bf00      	nop
 800cd9c:	e000      	b.n	800cda0 <Output_Value_Co2_Sensor+0x28c>
			break;
 800cd9e:	bf00      	nop
	}

	    return 0;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	40011400 	.word	0x40011400
 800cdb0:	2000086c 	.word	0x2000086c
 800cdb4:	20001c40 	.word	0x20001c40
 800cdb8:	20000048 	.word	0x20000048
 800cdbc:	20001c41 	.word	0x20001c41
 800cdc0:	000493e0 	.word	0x000493e0
 800cdc4:	20001b1c 	.word	0x20001b1c
 800cdc8:	20001bf4 	.word	0x20001bf4
 800cdcc:	40011800 	.word	0x40011800
 800cdd0:	080113d8 	.word	0x080113d8

0800cdd4 <Output_Value_So2_Sensor>:

/**
 *
 */
static uint8_t Output_Value_So2_Sensor(void)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_output_value_so2_sensor = 0;
	static __IO uint8_t check_09 = 0;
	uint32_t time_wake_up_09 = HAL_GetTick();
 800cdda:	f7f6 ff3f 	bl	8003c5c <HAL_GetTick>
 800cdde:	6078      	str	r0, [r7, #4]
	float out_put_03 = 0;
 800cde0:	f04f 0300 	mov.w	r3, #0
 800cde4:	60fb      	str	r3, [r7, #12]
	float value_03 = 0;
 800cde6:	f04f 0300 	mov.w	r3, #0
 800cdea:	603b      	str	r3, [r7, #0]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800cdec:	2140      	movs	r1, #64	; 0x40
 800cdee:	489f      	ldr	r0, [pc, #636]	; (800d06c <Output_Value_So2_Sensor+0x298>)
 800cdf0:	f7f8 f97e 	bl	80050f0 <HAL_GPIO_ReadPin>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d11b      	bne.n	800ce32 <Output_Value_So2_Sensor+0x5e>
	{
		HAL_Delay(100);
 800cdfa:	2064      	movs	r0, #100	; 0x64
 800cdfc:	f7f6 ff38 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800ce00:	2140      	movs	r1, #64	; 0x40
 800ce02:	489a      	ldr	r0, [pc, #616]	; (800d06c <Output_Value_So2_Sensor+0x298>)
 800ce04:	f7f8 f974 	bl	80050f0 <HAL_GPIO_ReadPin>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d111      	bne.n	800ce32 <Output_Value_So2_Sensor+0x5e>
		{
			/*Lcd clear*/
			CLCD_I2C_Clear(&lcd1);
 800ce0e:	4898      	ldr	r0, [pc, #608]	; (800d070 <Output_Value_So2_Sensor+0x29c>)
 800ce10:	f7fb f80c 	bl	8007e2c <CLCD_I2C_Clear>
			mode_output_value_so2_sensor++;
 800ce14:	4b97      	ldr	r3, [pc, #604]	; (800d074 <Output_Value_So2_Sensor+0x2a0>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	4b95      	ldr	r3, [pc, #596]	; (800d074 <Output_Value_So2_Sensor+0x2a0>)
 800ce20:	701a      	strb	r2, [r3, #0]
			if(mode_output_value_so2_sensor > 3)
 800ce22:	4b94      	ldr	r3, [pc, #592]	; (800d074 <Output_Value_So2_Sensor+0x2a0>)
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	2b03      	cmp	r3, #3
 800ce2a:	d902      	bls.n	800ce32 <Output_Value_So2_Sensor+0x5e>
				mode_output_value_so2_sensor = 0;
 800ce2c:	4b91      	ldr	r3, [pc, #580]	; (800d074 <Output_Value_So2_Sensor+0x2a0>)
 800ce2e:	2200      	movs	r2, #0
 800ce30:	701a      	strb	r2, [r3, #0]
   /*
	*setting measurement condition so2 pm sensor
	*
	* */

	switch (mode_output_value_so2_sensor)
 800ce32:	4b90      	ldr	r3, [pc, #576]	; (800d074 <Output_Value_So2_Sensor+0x2a0>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	2b03      	cmp	r3, #3
 800ce3a:	f000 80ad 	beq.w	800cf98 <Output_Value_So2_Sensor+0x1c4>
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	f300 80fc 	bgt.w	800d03c <Output_Value_So2_Sensor+0x268>
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d002      	beq.n	800ce4e <Output_Value_So2_Sensor+0x7a>
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d053      	beq.n	800cef4 <Output_Value_So2_Sensor+0x120>
 800ce4c:	e0f6      	b.n	800d03c <Output_Value_So2_Sensor+0x268>
	{

		case 1:
			/*lcd display option*/
			Display_Setup_Parameter_So2(&lcd1, y_static_input_so2_value[0]);
 800ce4e:	4b8a      	ldr	r3, [pc, #552]	; (800d078 <Output_Value_So2_Sensor+0x2a4>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7f4 f962 	bl	800111c <__aeabi_f2uiz>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4884      	ldr	r0, [pc, #528]	; (800d070 <Output_Value_So2_Sensor+0x29c>)
 800ce60:	f7f6 f84e 	bl	8002f00 <Display_Setup_Parameter_So2>
			/*check condition for execution the data reading from So2 sensor*/
			if(check_09 == 1)
 800ce64:	4b85      	ldr	r3, [pc, #532]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d132      	bne.n	800ced4 <Output_Value_So2_Sensor+0x100>
			{
				while (HAL_GetTick() - time_wake_up_09 <= TIME_WAITTING_START_CALIBRATION)
 800ce6e:	e002      	b.n	800ce76 <Output_Value_So2_Sensor+0xa2>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800ce70:	20af      	movs	r0, #175	; 0xaf
 800ce72:	f7f6 fe95 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_09 <= TIME_WAITTING_START_CALIBRATION)
 800ce76:	f7f6 fef1 	bl	8003c5c <HAL_GetTick>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	4a7f      	ldr	r2, [pc, #508]	; (800d080 <Output_Value_So2_Sensor+0x2ac>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d9f4      	bls.n	800ce70 <Output_Value_So2_Sensor+0x9c>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800ce86:	20ff      	movs	r0, #255	; 0xff
 800ce88:	f7f6 fe8a 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				value_03 =  hx711_so2_result(&so2_sensor, 10);
 800ce8c:	210a      	movs	r1, #10
 800ce8e:	487d      	ldr	r0, [pc, #500]	; (800d084 <Output_Value_So2_Sensor+0x2b0>)
 800ce90:	f001 f91a 	bl	800e0c8 <hx711_so2_result>
 800ce94:	6038      	str	r0, [r7, #0]
				out_put_03 = Lagrange_Interpolation(x_input_so2_pm_value, y_static_input_so2_value, MAX_ARR_X_Y_LAGRANGE, value_03);
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	2203      	movs	r2, #3
 800ce9a:	4977      	ldr	r1, [pc, #476]	; (800d078 <Output_Value_So2_Sensor+0x2a4>)
 800ce9c:	487a      	ldr	r0, [pc, #488]	; (800d088 <Output_Value_So2_Sensor+0x2b4>)
 800ce9e:	f000 fbc5 	bl	800d62c <Lagrange_Interpolation>
 800cea2:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from so2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800cea4:	2300      	movs	r3, #0
 800cea6:	72fb      	strb	r3, [r7, #11]
 800cea8:	e00a      	b.n	800cec0 <Output_Value_So2_Sensor+0xec>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800ceaa:	2101      	movs	r1, #1
 800ceac:	4877      	ldr	r0, [pc, #476]	; (800d08c <Output_Value_So2_Sensor+0x2b8>)
 800ceae:	f7f8 f94e 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800ceb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ceb6:	f7f6 fedb 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800ceba:	7afb      	ldrb	r3, [r7, #11]
 800cebc:	3301      	adds	r3, #1
 800cebe:	72fb      	strb	r3, [r7, #11]
 800cec0:	7afb      	ldrb	r3, [r7, #11]
 800cec2:	2b04      	cmp	r3, #4
 800cec4:	d9f1      	bls.n	800ceaa <Output_Value_So2_Sensor+0xd6>
				}
				/*increase variable by 1 unit*/
				check_09 ++;
 800cec6:	4b6d      	ldr	r3, [pc, #436]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	3301      	adds	r3, #1
 800cece:	b2da      	uxtb	r2, r3
 800ced0:	4b6a      	ldr	r3, [pc, #424]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800ced2:	701a      	strb	r2, [r3, #0]
			}
		     /*check condition when finished reading data from so2 sensor*/
			if(check_09 == 2)
 800ced4:	4b69      	ldr	r3, [pc, #420]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	f040 80bb 	bne.w	800d056 <Output_Value_So2_Sensor+0x282>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800cee0:	2200      	movs	r2, #0
 800cee2:	2101      	movs	r1, #1
 800cee4:	4869      	ldr	r0, [pc, #420]	; (800d08c <Output_Value_So2_Sensor+0x2b8>)
 800cee6:	f7f8 f91a 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Monitor(&lcd1, out_put_03);
 800ceea:	68f9      	ldr	r1, [r7, #12]
 800ceec:	4860      	ldr	r0, [pc, #384]	; (800d070 <Output_Value_So2_Sensor+0x29c>)
 800ceee:	f7f6 fd39 	bl	8003964 <Display_Monitor>
			}
			break;
 800cef2:	e0b0      	b.n	800d056 <Output_Value_So2_Sensor+0x282>

		case 2:
			/*Lcd display*/
			Display_Setup_Parameter_So2(&lcd1, y_static_input_so2_value[1]);
 800cef4:	4b60      	ldr	r3, [pc, #384]	; (800d078 <Output_Value_So2_Sensor+0x2a4>)
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7f4 f90f 	bl	800111c <__aeabi_f2uiz>
 800cefe:	4603      	mov	r3, r0
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	4619      	mov	r1, r3
 800cf04:	485a      	ldr	r0, [pc, #360]	; (800d070 <Output_Value_So2_Sensor+0x29c>)
 800cf06:	f7f5 fffb 	bl	8002f00 <Display_Setup_Parameter_So2>
			/*check condition for execution the data reading from So2 sensor*/
			if(check_09 == 2)
 800cf0a:	4b5c      	ldr	r3, [pc, #368]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d132      	bne.n	800cf7a <Output_Value_So2_Sensor+0x1a6>
			{
				while (HAL_GetTick() - time_wake_up_09 <= TIME_WAITTING_START_CALIBRATION)
 800cf14:	e002      	b.n	800cf1c <Output_Value_So2_Sensor+0x148>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800cf16:	20af      	movs	r0, #175	; 0xaf
 800cf18:	f7f6 fe42 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_09 <= TIME_WAITTING_START_CALIBRATION)
 800cf1c:	f7f6 fe9e 	bl	8003c5c <HAL_GetTick>
 800cf20:	4602      	mov	r2, r0
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	4a56      	ldr	r2, [pc, #344]	; (800d080 <Output_Value_So2_Sensor+0x2ac>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d9f4      	bls.n	800cf16 <Output_Value_So2_Sensor+0x142>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800cf2c:	20ff      	movs	r0, #255	; 0xff
 800cf2e:	f7f6 fe37 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				value_03 =  hx711_so2_result(&so2_sensor, 10);
 800cf32:	210a      	movs	r1, #10
 800cf34:	4853      	ldr	r0, [pc, #332]	; (800d084 <Output_Value_So2_Sensor+0x2b0>)
 800cf36:	f001 f8c7 	bl	800e0c8 <hx711_so2_result>
 800cf3a:	6038      	str	r0, [r7, #0]
				out_put_03 = Lagrange_Interpolation(x_input_so2_pm_value, y_static_input_so2_value, MAX_ARR_X_Y_LAGRANGE, value_03);
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	2203      	movs	r2, #3
 800cf40:	494d      	ldr	r1, [pc, #308]	; (800d078 <Output_Value_So2_Sensor+0x2a4>)
 800cf42:	4851      	ldr	r0, [pc, #324]	; (800d088 <Output_Value_So2_Sensor+0x2b4>)
 800cf44:	f000 fb72 	bl	800d62c <Lagrange_Interpolation>
 800cf48:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from so2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	72bb      	strb	r3, [r7, #10]
 800cf4e:	e00a      	b.n	800cf66 <Output_Value_So2_Sensor+0x192>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800cf50:	2101      	movs	r1, #1
 800cf52:	484e      	ldr	r0, [pc, #312]	; (800d08c <Output_Value_So2_Sensor+0x2b8>)
 800cf54:	f7f8 f8fb 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800cf58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cf5c:	f7f6 fe88 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800cf60:	7abb      	ldrb	r3, [r7, #10]
 800cf62:	3301      	adds	r3, #1
 800cf64:	72bb      	strb	r3, [r7, #10]
 800cf66:	7abb      	ldrb	r3, [r7, #10]
 800cf68:	2b04      	cmp	r3, #4
 800cf6a:	d9f1      	bls.n	800cf50 <Output_Value_So2_Sensor+0x17c>
				}
				/*increase variable by 1 unit*/
				check_09++;
 800cf6c:	4b43      	ldr	r3, [pc, #268]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	3301      	adds	r3, #1
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	4b41      	ldr	r3, [pc, #260]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800cf78:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from so2 sensor*/
			if(check_09 == 3)
 800cf7a:	4b40      	ldr	r3, [pc, #256]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	d16a      	bne.n	800d05a <Output_Value_So2_Sensor+0x286>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800cf84:	2200      	movs	r2, #0
 800cf86:	2101      	movs	r1, #1
 800cf88:	4840      	ldr	r0, [pc, #256]	; (800d08c <Output_Value_So2_Sensor+0x2b8>)
 800cf8a:	f7f8 f8c8 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Monitor(&lcd1, out_put_03);
 800cf8e:	68f9      	ldr	r1, [r7, #12]
 800cf90:	4837      	ldr	r0, [pc, #220]	; (800d070 <Output_Value_So2_Sensor+0x29c>)
 800cf92:	f7f6 fce7 	bl	8003964 <Display_Monitor>
			}
			break;
 800cf96:	e060      	b.n	800d05a <Output_Value_So2_Sensor+0x286>

		case 3:
			/*Lcd display*/
			Display_Setup_Parameter_So2(&lcd1, y_static_input_so2_value[2]);
 800cf98:	4b37      	ldr	r3, [pc, #220]	; (800d078 <Output_Value_So2_Sensor+0x2a4>)
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7f4 f8bd 	bl	800111c <__aeabi_f2uiz>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4831      	ldr	r0, [pc, #196]	; (800d070 <Output_Value_So2_Sensor+0x29c>)
 800cfaa:	f7f5 ffa9 	bl	8002f00 <Display_Setup_Parameter_So2>
			/*check condition for execution the data reading from So2 sensor*/
			if(check_09 == 3)
 800cfae:	4b33      	ldr	r3, [pc, #204]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b03      	cmp	r3, #3
 800cfb6:	d132      	bne.n	800d01e <Output_Value_So2_Sensor+0x24a>
			{
				while (HAL_GetTick() - time_wake_up_09 <= TIME_WAITTING_START_CALIBRATION)
 800cfb8:	e002      	b.n	800cfc0 <Output_Value_So2_Sensor+0x1ec>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800cfba:	20af      	movs	r0, #175	; 0xaf
 800cfbc:	f7f6 fdf0 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_09 <= TIME_WAITTING_START_CALIBRATION)
 800cfc0:	f7f6 fe4c 	bl	8003c5c <HAL_GetTick>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	1ad3      	subs	r3, r2, r3
 800cfca:	4a2d      	ldr	r2, [pc, #180]	; (800d080 <Output_Value_So2_Sensor+0x2ac>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d9f4      	bls.n	800cfba <Output_Value_So2_Sensor+0x1e6>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800cfd0:	20ff      	movs	r0, #255	; 0xff
 800cfd2:	f7f6 fde5 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				value_03 =  hx711_so2_result(&so2_sensor, 10);
 800cfd6:	210a      	movs	r1, #10
 800cfd8:	482a      	ldr	r0, [pc, #168]	; (800d084 <Output_Value_So2_Sensor+0x2b0>)
 800cfda:	f001 f875 	bl	800e0c8 <hx711_so2_result>
 800cfde:	6038      	str	r0, [r7, #0]
				out_put_03 = Lagrange_Interpolation(x_input_so2_pm_value, y_static_input_so2_value, MAX_ARR_X_Y_LAGRANGE, value_03);
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	2203      	movs	r2, #3
 800cfe4:	4924      	ldr	r1, [pc, #144]	; (800d078 <Output_Value_So2_Sensor+0x2a4>)
 800cfe6:	4828      	ldr	r0, [pc, #160]	; (800d088 <Output_Value_So2_Sensor+0x2b4>)
 800cfe8:	f000 fb20 	bl	800d62c <Lagrange_Interpolation>
 800cfec:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from so2 sensor*/
				for(uint8_t i =0; i < 5; i++)
 800cfee:	2300      	movs	r3, #0
 800cff0:	727b      	strb	r3, [r7, #9]
 800cff2:	e00a      	b.n	800d00a <Output_Value_So2_Sensor+0x236>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800cff4:	2101      	movs	r1, #1
 800cff6:	4825      	ldr	r0, [pc, #148]	; (800d08c <Output_Value_So2_Sensor+0x2b8>)
 800cff8:	f7f8 f8a9 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800cffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d000:	f7f6 fe36 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800d004:	7a7b      	ldrb	r3, [r7, #9]
 800d006:	3301      	adds	r3, #1
 800d008:	727b      	strb	r3, [r7, #9]
 800d00a:	7a7b      	ldrb	r3, [r7, #9]
 800d00c:	2b04      	cmp	r3, #4
 800d00e:	d9f1      	bls.n	800cff4 <Output_Value_So2_Sensor+0x220>
				}
				/*increase variable by 1 unit*/
				check_09++;
 800d010:	4b1a      	ldr	r3, [pc, #104]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	b2db      	uxtb	r3, r3
 800d016:	3301      	adds	r3, #1
 800d018:	b2da      	uxtb	r2, r3
 800d01a:	4b18      	ldr	r3, [pc, #96]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800d01c:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from so2 sensor*/
			if(check_09 == 4)
 800d01e:	4b17      	ldr	r3, [pc, #92]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	b2db      	uxtb	r3, r3
 800d024:	2b04      	cmp	r3, #4
 800d026:	d11a      	bne.n	800d05e <Output_Value_So2_Sensor+0x28a>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800d028:	2200      	movs	r2, #0
 800d02a:	2101      	movs	r1, #1
 800d02c:	4817      	ldr	r0, [pc, #92]	; (800d08c <Output_Value_So2_Sensor+0x2b8>)
 800d02e:	f7f8 f876 	bl	800511e <HAL_GPIO_WritePin>
				/*Lcd display*/
				Display_Monitor(&lcd1, out_put_03);
 800d032:	68f9      	ldr	r1, [r7, #12]
 800d034:	480e      	ldr	r0, [pc, #56]	; (800d070 <Output_Value_So2_Sensor+0x29c>)
 800d036:	f7f6 fc95 	bl	8003964 <Display_Monitor>
			}
			break;
 800d03a:	e010      	b.n	800d05e <Output_Value_So2_Sensor+0x28a>

		/*Default mode*/
		default:
			/*reassign variable check_04 = 1*/
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800d03c:	2200      	movs	r2, #0
 800d03e:	2100      	movs	r1, #0
 800d040:	480b      	ldr	r0, [pc, #44]	; (800d070 <Output_Value_So2_Sensor+0x29c>)
 800d042:	f7fa fe89 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "So2_Monitor");
 800d046:	4912      	ldr	r1, [pc, #72]	; (800d090 <Output_Value_So2_Sensor+0x2bc>)
 800d048:	4809      	ldr	r0, [pc, #36]	; (800d070 <Output_Value_So2_Sensor+0x29c>)
 800d04a:	f7fa fed8 	bl	8007dfe <CLCD_I2C_WriteString>
			check_09 = 1;
 800d04e:	4b0b      	ldr	r3, [pc, #44]	; (800d07c <Output_Value_So2_Sensor+0x2a8>)
 800d050:	2201      	movs	r2, #1
 800d052:	701a      	strb	r2, [r3, #0]
			break;
 800d054:	e004      	b.n	800d060 <Output_Value_So2_Sensor+0x28c>
			break;
 800d056:	bf00      	nop
 800d058:	e002      	b.n	800d060 <Output_Value_So2_Sensor+0x28c>
			break;
 800d05a:	bf00      	nop
 800d05c:	e000      	b.n	800d060 <Output_Value_So2_Sensor+0x28c>
			break;
 800d05e:	bf00      	nop
	}
	    return 0;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	40011400 	.word	0x40011400
 800d070:	2000086c 	.word	0x2000086c
 800d074:	20001c42 	.word	0x20001c42
 800d078:	20000054 	.word	0x20000054
 800d07c:	20001c43 	.word	0x20001c43
 800d080:	000493e0 	.word	0x000493e0
 800d084:	20001ba8 	.word	0x20001ba8
 800d088:	20001c00 	.word	0x20001c00
 800d08c:	40011800 	.word	0x40011800
 800d090:	080113e4 	.word	0x080113e4

0800d094 <Output_Value_Humidity_Sensor>:

/**
 *
 */
static uint8_t Output_Value_Humidity_Sensor(void)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_output_value_humidity_sensor = 0;
	static __IO uint8_t check_10 = 0;
	uint32_t time_wake_up_10 = HAL_GetTick();
 800d09a:	f7f6 fddf 	bl	8003c5c <HAL_GetTick>
 800d09e:	6078      	str	r0, [r7, #4]
	float out_put_4 = 0;
 800d0a0:	f04f 0300 	mov.w	r3, #0
 800d0a4:	60fb      	str	r3, [r7, #12]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800d0a6:	2140      	movs	r1, #64	; 0x40
 800d0a8:	48a1      	ldr	r0, [pc, #644]	; (800d330 <Output_Value_Humidity_Sensor+0x29c>)
 800d0aa:	f7f8 f821 	bl	80050f0 <HAL_GPIO_ReadPin>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d11b      	bne.n	800d0ec <Output_Value_Humidity_Sensor+0x58>
	{
		HAL_Delay(100);
 800d0b4:	2064      	movs	r0, #100	; 0x64
 800d0b6:	f7f6 fddb 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800d0ba:	2140      	movs	r1, #64	; 0x40
 800d0bc:	489c      	ldr	r0, [pc, #624]	; (800d330 <Output_Value_Humidity_Sensor+0x29c>)
 800d0be:	f7f8 f817 	bl	80050f0 <HAL_GPIO_ReadPin>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d111      	bne.n	800d0ec <Output_Value_Humidity_Sensor+0x58>
		{
			/*Lcd clear*/
			CLCD_I2C_Clear(&lcd1);
 800d0c8:	489a      	ldr	r0, [pc, #616]	; (800d334 <Output_Value_Humidity_Sensor+0x2a0>)
 800d0ca:	f7fa feaf 	bl	8007e2c <CLCD_I2C_Clear>
			mode_output_value_humidity_sensor++;
 800d0ce:	4b9a      	ldr	r3, [pc, #616]	; (800d338 <Output_Value_Humidity_Sensor+0x2a4>)
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	4b97      	ldr	r3, [pc, #604]	; (800d338 <Output_Value_Humidity_Sensor+0x2a4>)
 800d0da:	701a      	strb	r2, [r3, #0]
			if(mode_output_value_humidity_sensor > 3)
 800d0dc:	4b96      	ldr	r3, [pc, #600]	; (800d338 <Output_Value_Humidity_Sensor+0x2a4>)
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d902      	bls.n	800d0ec <Output_Value_Humidity_Sensor+0x58>
				mode_output_value_humidity_sensor = 0;
 800d0e6:	4b94      	ldr	r3, [pc, #592]	; (800d338 <Output_Value_Humidity_Sensor+0x2a4>)
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	701a      	strb	r2, [r3, #0]
   /*
	*setting measurement condition humidity sensor
	*
	* */

	switch (mode_output_value_humidity_sensor)
 800d0ec:	4b92      	ldr	r3, [pc, #584]	; (800d338 <Output_Value_Humidity_Sensor+0x2a4>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	f000 80b1 	beq.w	800d25a <Output_Value_Humidity_Sensor+0x1c6>
 800d0f8:	2b03      	cmp	r3, #3
 800d0fa:	f300 8102 	bgt.w	800d302 <Output_Value_Humidity_Sensor+0x26e>
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d002      	beq.n	800d108 <Output_Value_Humidity_Sensor+0x74>
 800d102:	2b02      	cmp	r3, #2
 800d104:	d055      	beq.n	800d1b2 <Output_Value_Humidity_Sensor+0x11e>
 800d106:	e0fc      	b.n	800d302 <Output_Value_Humidity_Sensor+0x26e>
	{


		case 1:
			/*lcd display*/
			Display_Setup_Parameter_Humidity(&lcd1, y_static_input_humidity_value[0]);
 800d108:	4b8c      	ldr	r3, [pc, #560]	; (800d33c <Output_Value_Humidity_Sensor+0x2a8>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7f4 f805 	bl	800111c <__aeabi_f2uiz>
 800d112:	4603      	mov	r3, r0
 800d114:	b2db      	uxtb	r3, r3
 800d116:	4619      	mov	r1, r3
 800d118:	4886      	ldr	r0, [pc, #536]	; (800d334 <Output_Value_Humidity_Sensor+0x2a0>)
 800d11a:	f7f6 f8a1 	bl	8003260 <Display_Setup_Parameter_Humidity>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_10 == 1)
 800d11e:	4b88      	ldr	r3, [pc, #544]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	b2db      	uxtb	r3, r3
 800d124:	2b01      	cmp	r3, #1
 800d126:	d134      	bne.n	800d192 <Output_Value_Humidity_Sensor+0xfe>
			{
				while (HAL_GetTick() - time_wake_up_10 <= TIME_WAITTING_START_CALIBRATION)
 800d128:	e002      	b.n	800d130 <Output_Value_Humidity_Sensor+0x9c>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800d12a:	20af      	movs	r0, #175	; 0xaf
 800d12c:	f7f6 fd38 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_10 <= TIME_WAITTING_START_CALIBRATION)
 800d130:	f7f6 fd94 	bl	8003c5c <HAL_GetTick>
 800d134:	4602      	mov	r2, r0
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	4a82      	ldr	r2, [pc, #520]	; (800d344 <Output_Value_Humidity_Sensor+0x2b0>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d9f4      	bls.n	800d12a <Output_Value_Humidity_Sensor+0x96>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800d140:	20ff      	movs	r0, #255	; 0xff
 800d142:	f7f6 fd2d 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800d146:	230a      	movs	r3, #10
 800d148:	4a7f      	ldr	r2, [pc, #508]	; (800d348 <Output_Value_Humidity_Sensor+0x2b4>)
 800d14a:	4980      	ldr	r1, [pc, #512]	; (800d34c <Output_Value_Humidity_Sensor+0x2b8>)
 800d14c:	4880      	ldr	r0, [pc, #512]	; (800d350 <Output_Value_Humidity_Sensor+0x2bc>)
 800d14e:	f7f5 fb07 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				out_put_4 =  Lagrange_Interpolation(x_input_humidity_value, y_static_input_humidity_value, MAX_ARR_X_Y_LAGRANGE, humidity);
 800d152:	4b7d      	ldr	r3, [pc, #500]	; (800d348 <Output_Value_Humidity_Sensor+0x2b4>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2203      	movs	r2, #3
 800d158:	4978      	ldr	r1, [pc, #480]	; (800d33c <Output_Value_Humidity_Sensor+0x2a8>)
 800d15a:	487e      	ldr	r0, [pc, #504]	; (800d354 <Output_Value_Humidity_Sensor+0x2c0>)
 800d15c:	f000 fa66 	bl	800d62c <Lagrange_Interpolation>
 800d160:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800d162:	2300      	movs	r3, #0
 800d164:	72fb      	strb	r3, [r7, #11]
 800d166:	e00a      	b.n	800d17e <Output_Value_Humidity_Sensor+0xea>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800d168:	2101      	movs	r1, #1
 800d16a:	487b      	ldr	r0, [pc, #492]	; (800d358 <Output_Value_Humidity_Sensor+0x2c4>)
 800d16c:	f7f7 ffef 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800d170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d174:	f7f6 fd7c 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800d178:	7afb      	ldrb	r3, [r7, #11]
 800d17a:	3301      	adds	r3, #1
 800d17c:	72fb      	strb	r3, [r7, #11]
 800d17e:	7afb      	ldrb	r3, [r7, #11]
 800d180:	2b04      	cmp	r3, #4
 800d182:	d9f1      	bls.n	800d168 <Output_Value_Humidity_Sensor+0xd4>
				}
				/*increase variable by 1 unit*/
				check_10 ++;
 800d184:	4b6e      	ldr	r3, [pc, #440]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	3301      	adds	r3, #1
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	4b6c      	ldr	r3, [pc, #432]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d190:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from humidity sensor*/
			if(check_10 == 2)
 800d192:	4b6b      	ldr	r3, [pc, #428]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	b2db      	uxtb	r3, r3
 800d198:	2b02      	cmp	r3, #2
 800d19a:	f040 80bf 	bne.w	800d31c <Output_Value_Humidity_Sensor+0x288>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800d19e:	2200      	movs	r2, #0
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	486d      	ldr	r0, [pc, #436]	; (800d358 <Output_Value_Humidity_Sensor+0x2c4>)
 800d1a4:	f7f7 ffbb 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Monitor(&lcd1, out_put_4);
 800d1a8:	68f9      	ldr	r1, [r7, #12]
 800d1aa:	4862      	ldr	r0, [pc, #392]	; (800d334 <Output_Value_Humidity_Sensor+0x2a0>)
 800d1ac:	f7f6 fbda 	bl	8003964 <Display_Monitor>
			}
			break;
 800d1b0:	e0b4      	b.n	800d31c <Output_Value_Humidity_Sensor+0x288>


		case 2:
			/*lcd display*/
			Display_Setup_Parameter_Humidity(&lcd1, y_static_input_humidity_value[1]);
 800d1b2:	4b62      	ldr	r3, [pc, #392]	; (800d33c <Output_Value_Humidity_Sensor+0x2a8>)
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f3 ffb0 	bl	800111c <__aeabi_f2uiz>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	485c      	ldr	r0, [pc, #368]	; (800d334 <Output_Value_Humidity_Sensor+0x2a0>)
 800d1c4:	f7f6 f84c 	bl	8003260 <Display_Setup_Parameter_Humidity>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_10 == 2)
 800d1c8:	4b5d      	ldr	r3, [pc, #372]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d134      	bne.n	800d23c <Output_Value_Humidity_Sensor+0x1a8>
			{
				while (HAL_GetTick() - time_wake_up_10 <= TIME_WAITTING_START_CALIBRATION)
 800d1d2:	e002      	b.n	800d1da <Output_Value_Humidity_Sensor+0x146>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800d1d4:	20af      	movs	r0, #175	; 0xaf
 800d1d6:	f7f6 fce3 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_10 <= TIME_WAITTING_START_CALIBRATION)
 800d1da:	f7f6 fd3f 	bl	8003c5c <HAL_GetTick>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	4a57      	ldr	r2, [pc, #348]	; (800d344 <Output_Value_Humidity_Sensor+0x2b0>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d9f4      	bls.n	800d1d4 <Output_Value_Humidity_Sensor+0x140>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800d1ea:	20ff      	movs	r0, #255	; 0xff
 800d1ec:	f7f6 fcd8 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				//DHT_Read_Temperature_Humidity(&DHT22_Sensor_1, &temperature, &humidity);
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800d1f0:	230a      	movs	r3, #10
 800d1f2:	4a55      	ldr	r2, [pc, #340]	; (800d348 <Output_Value_Humidity_Sensor+0x2b4>)
 800d1f4:	4955      	ldr	r1, [pc, #340]	; (800d34c <Output_Value_Humidity_Sensor+0x2b8>)
 800d1f6:	4856      	ldr	r0, [pc, #344]	; (800d350 <Output_Value_Humidity_Sensor+0x2bc>)
 800d1f8:	f7f5 fab2 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				out_put_4 =  Lagrange_Interpolation(x_input_humidity_value, y_static_input_humidity_value, MAX_ARR_X_Y_LAGRANGE, humidity);
 800d1fc:	4b52      	ldr	r3, [pc, #328]	; (800d348 <Output_Value_Humidity_Sensor+0x2b4>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2203      	movs	r2, #3
 800d202:	494e      	ldr	r1, [pc, #312]	; (800d33c <Output_Value_Humidity_Sensor+0x2a8>)
 800d204:	4853      	ldr	r0, [pc, #332]	; (800d354 <Output_Value_Humidity_Sensor+0x2c0>)
 800d206:	f000 fa11 	bl	800d62c <Lagrange_Interpolation>
 800d20a:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800d20c:	2300      	movs	r3, #0
 800d20e:	72bb      	strb	r3, [r7, #10]
 800d210:	e00a      	b.n	800d228 <Output_Value_Humidity_Sensor+0x194>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800d212:	2101      	movs	r1, #1
 800d214:	4850      	ldr	r0, [pc, #320]	; (800d358 <Output_Value_Humidity_Sensor+0x2c4>)
 800d216:	f7f7 ff9a 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800d21a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d21e:	f7f6 fd27 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800d222:	7abb      	ldrb	r3, [r7, #10]
 800d224:	3301      	adds	r3, #1
 800d226:	72bb      	strb	r3, [r7, #10]
 800d228:	7abb      	ldrb	r3, [r7, #10]
 800d22a:	2b04      	cmp	r3, #4
 800d22c:	d9f1      	bls.n	800d212 <Output_Value_Humidity_Sensor+0x17e>
				}
				/*increase variable by 1 unit*/
				check_10 ++;
 800d22e:	4b44      	ldr	r3, [pc, #272]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	3301      	adds	r3, #1
 800d236:	b2da      	uxtb	r2, r3
 800d238:	4b41      	ldr	r3, [pc, #260]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d23a:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from humidity sensor*/
			if(check_10 == 3)
 800d23c:	4b40      	ldr	r3, [pc, #256]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	b2db      	uxtb	r3, r3
 800d242:	2b03      	cmp	r3, #3
 800d244:	d16c      	bne.n	800d320 <Output_Value_Humidity_Sensor+0x28c>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800d246:	2200      	movs	r2, #0
 800d248:	2101      	movs	r1, #1
 800d24a:	4843      	ldr	r0, [pc, #268]	; (800d358 <Output_Value_Humidity_Sensor+0x2c4>)
 800d24c:	f7f7 ff67 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Monitor(&lcd1, out_put_4);
 800d250:	68f9      	ldr	r1, [r7, #12]
 800d252:	4838      	ldr	r0, [pc, #224]	; (800d334 <Output_Value_Humidity_Sensor+0x2a0>)
 800d254:	f7f6 fb86 	bl	8003964 <Display_Monitor>
			}
			break;
 800d258:	e062      	b.n	800d320 <Output_Value_Humidity_Sensor+0x28c>



		case 3:
			/*lcd display */
			Display_Setup_Parameter_Humidity(&lcd1, y_static_input_humidity_value[2]);
 800d25a:	4b38      	ldr	r3, [pc, #224]	; (800d33c <Output_Value_Humidity_Sensor+0x2a8>)
 800d25c:	689b      	ldr	r3, [r3, #8]
 800d25e:	4618      	mov	r0, r3
 800d260:	f7f3 ff5c 	bl	800111c <__aeabi_f2uiz>
 800d264:	4603      	mov	r3, r0
 800d266:	b2db      	uxtb	r3, r3
 800d268:	4619      	mov	r1, r3
 800d26a:	4832      	ldr	r0, [pc, #200]	; (800d334 <Output_Value_Humidity_Sensor+0x2a0>)
 800d26c:	f7f5 fff8 	bl	8003260 <Display_Setup_Parameter_Humidity>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_10 == 3)
 800d270:	4b33      	ldr	r3, [pc, #204]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	b2db      	uxtb	r3, r3
 800d276:	2b03      	cmp	r3, #3
 800d278:	d134      	bne.n	800d2e4 <Output_Value_Humidity_Sensor+0x250>
			{
				while (HAL_GetTick() - time_wake_up_10 <= TIME_WAITTING_START_CALIBRATION)
 800d27a:	e002      	b.n	800d282 <Output_Value_Humidity_Sensor+0x1ee>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800d27c:	20af      	movs	r0, #175	; 0xaf
 800d27e:	f7f6 fc8f 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_10 <= TIME_WAITTING_START_CALIBRATION)
 800d282:	f7f6 fceb 	bl	8003c5c <HAL_GetTick>
 800d286:	4602      	mov	r2, r0
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	4a2d      	ldr	r2, [pc, #180]	; (800d344 <Output_Value_Humidity_Sensor+0x2b0>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d9f4      	bls.n	800d27c <Output_Value_Humidity_Sensor+0x1e8>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800d292:	20ff      	movs	r0, #255	; 0xff
 800d294:	f7f6 fc84 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800d298:	230a      	movs	r3, #10
 800d29a:	4a2b      	ldr	r2, [pc, #172]	; (800d348 <Output_Value_Humidity_Sensor+0x2b4>)
 800d29c:	492b      	ldr	r1, [pc, #172]	; (800d34c <Output_Value_Humidity_Sensor+0x2b8>)
 800d29e:	482c      	ldr	r0, [pc, #176]	; (800d350 <Output_Value_Humidity_Sensor+0x2bc>)
 800d2a0:	f7f5 fa5e 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				out_put_4 =  Lagrange_Interpolation(x_input_humidity_value, y_static_input_humidity_value, MAX_ARR_X_Y_LAGRANGE, humidity);
 800d2a4:	4b28      	ldr	r3, [pc, #160]	; (800d348 <Output_Value_Humidity_Sensor+0x2b4>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2203      	movs	r2, #3
 800d2aa:	4924      	ldr	r1, [pc, #144]	; (800d33c <Output_Value_Humidity_Sensor+0x2a8>)
 800d2ac:	4829      	ldr	r0, [pc, #164]	; (800d354 <Output_Value_Humidity_Sensor+0x2c0>)
 800d2ae:	f000 f9bd 	bl	800d62c <Lagrange_Interpolation>
 800d2b2:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	727b      	strb	r3, [r7, #9]
 800d2b8:	e00a      	b.n	800d2d0 <Output_Value_Humidity_Sensor+0x23c>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800d2ba:	2101      	movs	r1, #1
 800d2bc:	4826      	ldr	r0, [pc, #152]	; (800d358 <Output_Value_Humidity_Sensor+0x2c4>)
 800d2be:	f7f7 ff46 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800d2c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d2c6:	f7f6 fcd3 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800d2ca:	7a7b      	ldrb	r3, [r7, #9]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	727b      	strb	r3, [r7, #9]
 800d2d0:	7a7b      	ldrb	r3, [r7, #9]
 800d2d2:	2b04      	cmp	r3, #4
 800d2d4:	d9f1      	bls.n	800d2ba <Output_Value_Humidity_Sensor+0x226>
				}
				/*increase variable by 1 unit*/
				check_10 ++;
 800d2d6:	4b1a      	ldr	r3, [pc, #104]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	3301      	adds	r3, #1
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	4b17      	ldr	r3, [pc, #92]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d2e2:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from humidity sensor*/
			if(check_10 == 4)
 800d2e4:	4b16      	ldr	r3, [pc, #88]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	2b04      	cmp	r3, #4
 800d2ec:	d11a      	bne.n	800d324 <Output_Value_Humidity_Sensor+0x290>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	4819      	ldr	r0, [pc, #100]	; (800d358 <Output_Value_Humidity_Sensor+0x2c4>)
 800d2f4:	f7f7 ff13 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Monitor(&lcd1, out_put_4);
 800d2f8:	68f9      	ldr	r1, [r7, #12]
 800d2fa:	480e      	ldr	r0, [pc, #56]	; (800d334 <Output_Value_Humidity_Sensor+0x2a0>)
 800d2fc:	f7f6 fb32 	bl	8003964 <Display_Monitor>
			}
			break;
 800d300:	e010      	b.n	800d324 <Output_Value_Humidity_Sensor+0x290>

		/*Default mode*/
		default:
			/*reassign variable*/
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800d302:	2200      	movs	r2, #0
 800d304:	2100      	movs	r1, #0
 800d306:	480b      	ldr	r0, [pc, #44]	; (800d334 <Output_Value_Humidity_Sensor+0x2a0>)
 800d308:	f7fa fd26 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Humidity_Monitor");
 800d30c:	4913      	ldr	r1, [pc, #76]	; (800d35c <Output_Value_Humidity_Sensor+0x2c8>)
 800d30e:	4809      	ldr	r0, [pc, #36]	; (800d334 <Output_Value_Humidity_Sensor+0x2a0>)
 800d310:	f7fa fd75 	bl	8007dfe <CLCD_I2C_WriteString>
			check_10 = 1;
 800d314:	4b0a      	ldr	r3, [pc, #40]	; (800d340 <Output_Value_Humidity_Sensor+0x2ac>)
 800d316:	2201      	movs	r2, #1
 800d318:	701a      	strb	r2, [r3, #0]
			break;
 800d31a:	e004      	b.n	800d326 <Output_Value_Humidity_Sensor+0x292>
			break;
 800d31c:	bf00      	nop
 800d31e:	e002      	b.n	800d326 <Output_Value_Humidity_Sensor+0x292>
			break;
 800d320:	bf00      	nop
 800d322:	e000      	b.n	800d326 <Output_Value_Humidity_Sensor+0x292>
			break;
 800d324:	bf00      	nop
	}

	    return 0;
 800d326:	2300      	movs	r3, #0
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	40011400 	.word	0x40011400
 800d334:	2000086c 	.word	0x2000086c
 800d338:	20001c44 	.word	0x20001c44
 800d33c:	2000006c 	.word	0x2000006c
 800d340:	20001c45 	.word	0x20001c45
 800d344:	000493e0 	.word	0x000493e0
 800d348:	20001c28 	.word	0x20001c28
 800d34c:	20001c24 	.word	0x20001c24
 800d350:	20001b20 	.word	0x20001b20
 800d354:	20001c18 	.word	0x20001c18
 800d358:	40011800 	.word	0x40011800
 800d35c:	080113f0 	.word	0x080113f0

0800d360 <Output_Value_Temperature_Sensor>:

/**
 *
 */
static uint8_t Output_Value_Temperature_Sensor(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
	static __IO uint8_t mode_output_value_temperature_sensor = 0;
	static __IO uint8_t check_11 = 0;
	uint32_t time_wake_up_11 = HAL_GetTick();
 800d366:	f7f6 fc79 	bl	8003c5c <HAL_GetTick>
 800d36a:	6078      	str	r0, [r7, #4]
	float out_put_05 = 0;
 800d36c:	f04f 0300 	mov.w	r3, #0
 800d370:	60fb      	str	r3, [r7, #12]
	/*check button04 set parameter*/
	if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800d372:	2140      	movs	r1, #64	; 0x40
 800d374:	48a1      	ldr	r0, [pc, #644]	; (800d5fc <Output_Value_Temperature_Sensor+0x29c>)
 800d376:	f7f7 febb 	bl	80050f0 <HAL_GPIO_ReadPin>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d11b      	bne.n	800d3b8 <Output_Value_Temperature_Sensor+0x58>
	{
		HAL_Delay(100);
 800d380:	2064      	movs	r0, #100	; 0x64
 800d382:	f7f6 fc75 	bl	8003c70 <HAL_Delay>
		/*check button04 set parameter*/
		if(HAL_GPIO_ReadPin(BUTTON_04_SET_GROUP_SENOR_GPIO_Port, BUTTON_04_SET_GROUP_SENOR_Pin) == GPIO_PIN_SET)
 800d386:	2140      	movs	r1, #64	; 0x40
 800d388:	489c      	ldr	r0, [pc, #624]	; (800d5fc <Output_Value_Temperature_Sensor+0x29c>)
 800d38a:	f7f7 feb1 	bl	80050f0 <HAL_GPIO_ReadPin>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b01      	cmp	r3, #1
 800d392:	d111      	bne.n	800d3b8 <Output_Value_Temperature_Sensor+0x58>
		{
			/*Lcd clear*/
			CLCD_I2C_Clear(&lcd1);
 800d394:	489a      	ldr	r0, [pc, #616]	; (800d600 <Output_Value_Temperature_Sensor+0x2a0>)
 800d396:	f7fa fd49 	bl	8007e2c <CLCD_I2C_Clear>
			mode_output_value_temperature_sensor++;
 800d39a:	4b9a      	ldr	r3, [pc, #616]	; (800d604 <Output_Value_Temperature_Sensor+0x2a4>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	4b97      	ldr	r3, [pc, #604]	; (800d604 <Output_Value_Temperature_Sensor+0x2a4>)
 800d3a6:	701a      	strb	r2, [r3, #0]
			if(mode_output_value_temperature_sensor > 3)
 800d3a8:	4b96      	ldr	r3, [pc, #600]	; (800d604 <Output_Value_Temperature_Sensor+0x2a4>)
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2b03      	cmp	r3, #3
 800d3b0:	d902      	bls.n	800d3b8 <Output_Value_Temperature_Sensor+0x58>
				mode_output_value_temperature_sensor = 0;
 800d3b2:	4b94      	ldr	r3, [pc, #592]	; (800d604 <Output_Value_Temperature_Sensor+0x2a4>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	701a      	strb	r2, [r3, #0]
   /*
	*setting measurement condition temperature sensor
	*
	* */

	switch (mode_output_value_temperature_sensor)
 800d3b8:	4b92      	ldr	r3, [pc, #584]	; (800d604 <Output_Value_Temperature_Sensor+0x2a4>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	2b03      	cmp	r3, #3
 800d3c0:	f000 80b1 	beq.w	800d526 <Output_Value_Temperature_Sensor+0x1c6>
 800d3c4:	2b03      	cmp	r3, #3
 800d3c6:	f300 8102 	bgt.w	800d5ce <Output_Value_Temperature_Sensor+0x26e>
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d002      	beq.n	800d3d4 <Output_Value_Temperature_Sensor+0x74>
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d055      	beq.n	800d47e <Output_Value_Temperature_Sensor+0x11e>
 800d3d2:	e0fc      	b.n	800d5ce <Output_Value_Temperature_Sensor+0x26e>
	{


		case 1:
			/*lcd display*/
			Display_Setup_Parameter_Temperature(&lcd1, y_static_input_temperature_value[0]);
 800d3d4:	4b8c      	ldr	r3, [pc, #560]	; (800d608 <Output_Value_Temperature_Sensor+0x2a8>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7f3 fe9f 	bl	800111c <__aeabi_f2uiz>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4886      	ldr	r0, [pc, #536]	; (800d600 <Output_Value_Temperature_Sensor+0x2a0>)
 800d3e6:	f7f6 f8e1 	bl	80035ac <Display_Setup_Parameter_Temperature>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_11 == 1)
 800d3ea:	4b88      	ldr	r3, [pc, #544]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d134      	bne.n	800d45e <Output_Value_Temperature_Sensor+0xfe>
			{
				while (HAL_GetTick() - time_wake_up_11 <= TIME_WAITTING_START_CALIBRATION)
 800d3f4:	e002      	b.n	800d3fc <Output_Value_Temperature_Sensor+0x9c>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800d3f6:	20af      	movs	r0, #175	; 0xaf
 800d3f8:	f7f6 fbd2 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_11 <= TIME_WAITTING_START_CALIBRATION)
 800d3fc:	f7f6 fc2e 	bl	8003c5c <HAL_GetTick>
 800d400:	4602      	mov	r2, r0
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	4a82      	ldr	r2, [pc, #520]	; (800d610 <Output_Value_Temperature_Sensor+0x2b0>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d9f4      	bls.n	800d3f6 <Output_Value_Temperature_Sensor+0x96>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800d40c:	20ff      	movs	r0, #255	; 0xff
 800d40e:	f7f6 fbc7 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
//				DHT_Read_Temperature_Humidity(&DHT22_Sensor_1, &temperature, &humidity);
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800d412:	230a      	movs	r3, #10
 800d414:	4a7f      	ldr	r2, [pc, #508]	; (800d614 <Output_Value_Temperature_Sensor+0x2b4>)
 800d416:	4980      	ldr	r1, [pc, #512]	; (800d618 <Output_Value_Temperature_Sensor+0x2b8>)
 800d418:	4880      	ldr	r0, [pc, #512]	; (800d61c <Output_Value_Temperature_Sensor+0x2bc>)
 800d41a:	f7f5 f9a1 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				out_put_05 = Lagrange_Interpolation(x_input_temperature_value, y_static_input_temperature_value, MAX_ARR_X_Y_LAGRANGE, temperature);
 800d41e:	4b7e      	ldr	r3, [pc, #504]	; (800d618 <Output_Value_Temperature_Sensor+0x2b8>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2203      	movs	r2, #3
 800d424:	4978      	ldr	r1, [pc, #480]	; (800d608 <Output_Value_Temperature_Sensor+0x2a8>)
 800d426:	487e      	ldr	r0, [pc, #504]	; (800d620 <Output_Value_Temperature_Sensor+0x2c0>)
 800d428:	f000 f900 	bl	800d62c <Lagrange_Interpolation>
 800d42c:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800d42e:	2300      	movs	r3, #0
 800d430:	72fb      	strb	r3, [r7, #11]
 800d432:	e00a      	b.n	800d44a <Output_Value_Temperature_Sensor+0xea>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800d434:	2101      	movs	r1, #1
 800d436:	487b      	ldr	r0, [pc, #492]	; (800d624 <Output_Value_Temperature_Sensor+0x2c4>)
 800d438:	f7f7 fe89 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800d43c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d440:	f7f6 fc16 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800d444:	7afb      	ldrb	r3, [r7, #11]
 800d446:	3301      	adds	r3, #1
 800d448:	72fb      	strb	r3, [r7, #11]
 800d44a:	7afb      	ldrb	r3, [r7, #11]
 800d44c:	2b04      	cmp	r3, #4
 800d44e:	d9f1      	bls.n	800d434 <Output_Value_Temperature_Sensor+0xd4>
				}
				/*increase variable by 1 unit*/
				check_11 ++;
 800d450:	4b6e      	ldr	r3, [pc, #440]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	b2db      	uxtb	r3, r3
 800d456:	3301      	adds	r3, #1
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	4b6c      	ldr	r3, [pc, #432]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d45c:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from temperature sensor*/
			if(check_11 == 2)
 800d45e:	4b6b      	ldr	r3, [pc, #428]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b02      	cmp	r3, #2
 800d466:	f040 80bf 	bne.w	800d5e8 <Output_Value_Temperature_Sensor+0x288>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800d46a:	2200      	movs	r2, #0
 800d46c:	2101      	movs	r1, #1
 800d46e:	486d      	ldr	r0, [pc, #436]	; (800d624 <Output_Value_Temperature_Sensor+0x2c4>)
 800d470:	f7f7 fe55 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Monitor(&lcd1, out_put_05 );
 800d474:	68f9      	ldr	r1, [r7, #12]
 800d476:	4862      	ldr	r0, [pc, #392]	; (800d600 <Output_Value_Temperature_Sensor+0x2a0>)
 800d478:	f7f6 fa74 	bl	8003964 <Display_Monitor>
			}
			break;
 800d47c:	e0b4      	b.n	800d5e8 <Output_Value_Temperature_Sensor+0x288>


		case 2:
			/*lcd display*/
			Display_Setup_Parameter_Temperature(&lcd1, y_static_input_temperature_value[1]);
 800d47e:	4b62      	ldr	r3, [pc, #392]	; (800d608 <Output_Value_Temperature_Sensor+0x2a8>)
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	4618      	mov	r0, r3
 800d484:	f7f3 fe4a 	bl	800111c <__aeabi_f2uiz>
 800d488:	4603      	mov	r3, r0
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	4619      	mov	r1, r3
 800d48e:	485c      	ldr	r0, [pc, #368]	; (800d600 <Output_Value_Temperature_Sensor+0x2a0>)
 800d490:	f7f6 f88c 	bl	80035ac <Display_Setup_Parameter_Temperature>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_11 == 2)
 800d494:	4b5d      	ldr	r3, [pc, #372]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d134      	bne.n	800d508 <Output_Value_Temperature_Sensor+0x1a8>
			{
				while (HAL_GetTick() - time_wake_up_11 <= TIME_WAITTING_START_CALIBRATION)
 800d49e:	e002      	b.n	800d4a6 <Output_Value_Temperature_Sensor+0x146>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800d4a0:	20af      	movs	r0, #175	; 0xaf
 800d4a2:	f7f6 fb7d 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_11 <= TIME_WAITTING_START_CALIBRATION)
 800d4a6:	f7f6 fbd9 	bl	8003c5c <HAL_GetTick>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	1ad3      	subs	r3, r2, r3
 800d4b0:	4a57      	ldr	r2, [pc, #348]	; (800d610 <Output_Value_Temperature_Sensor+0x2b0>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d9f4      	bls.n	800d4a0 <Output_Value_Temperature_Sensor+0x140>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800d4b6:	20ff      	movs	r0, #255	; 0xff
 800d4b8:	f7f6 fb72 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800d4bc:	230a      	movs	r3, #10
 800d4be:	4a55      	ldr	r2, [pc, #340]	; (800d614 <Output_Value_Temperature_Sensor+0x2b4>)
 800d4c0:	4955      	ldr	r1, [pc, #340]	; (800d618 <Output_Value_Temperature_Sensor+0x2b8>)
 800d4c2:	4856      	ldr	r0, [pc, #344]	; (800d61c <Output_Value_Temperature_Sensor+0x2bc>)
 800d4c4:	f7f5 f94c 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				out_put_05 = Lagrange_Interpolation(x_input_temperature_value, y_static_input_temperature_value, MAX_ARR_X_Y_LAGRANGE, temperature);
 800d4c8:	4b53      	ldr	r3, [pc, #332]	; (800d618 <Output_Value_Temperature_Sensor+0x2b8>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2203      	movs	r2, #3
 800d4ce:	494e      	ldr	r1, [pc, #312]	; (800d608 <Output_Value_Temperature_Sensor+0x2a8>)
 800d4d0:	4853      	ldr	r0, [pc, #332]	; (800d620 <Output_Value_Temperature_Sensor+0x2c0>)
 800d4d2:	f000 f8ab 	bl	800d62c <Lagrange_Interpolation>
 800d4d6:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800d4d8:	2300      	movs	r3, #0
 800d4da:	72bb      	strb	r3, [r7, #10]
 800d4dc:	e00a      	b.n	800d4f4 <Output_Value_Temperature_Sensor+0x194>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800d4de:	2101      	movs	r1, #1
 800d4e0:	4850      	ldr	r0, [pc, #320]	; (800d624 <Output_Value_Temperature_Sensor+0x2c4>)
 800d4e2:	f7f7 fe34 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800d4e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d4ea:	f7f6 fbc1 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800d4ee:	7abb      	ldrb	r3, [r7, #10]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	72bb      	strb	r3, [r7, #10]
 800d4f4:	7abb      	ldrb	r3, [r7, #10]
 800d4f6:	2b04      	cmp	r3, #4
 800d4f8:	d9f1      	bls.n	800d4de <Output_Value_Temperature_Sensor+0x17e>
				}
				/*increase variable by 1 unit*/
				check_11 ++;
 800d4fa:	4b44      	ldr	r3, [pc, #272]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	3301      	adds	r3, #1
 800d502:	b2da      	uxtb	r2, r3
 800d504:	4b41      	ldr	r3, [pc, #260]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d506:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from temperature sensor*/
			if(check_11 == 3)
 800d508:	4b40      	ldr	r3, [pc, #256]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d16c      	bne.n	800d5ec <Output_Value_Temperature_Sensor+0x28c>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800d512:	2200      	movs	r2, #0
 800d514:	2101      	movs	r1, #1
 800d516:	4843      	ldr	r0, [pc, #268]	; (800d624 <Output_Value_Temperature_Sensor+0x2c4>)
 800d518:	f7f7 fe01 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Monitor(&lcd1, out_put_05);
 800d51c:	68f9      	ldr	r1, [r7, #12]
 800d51e:	4838      	ldr	r0, [pc, #224]	; (800d600 <Output_Value_Temperature_Sensor+0x2a0>)
 800d520:	f7f6 fa20 	bl	8003964 <Display_Monitor>
			}
			break;
 800d524:	e062      	b.n	800d5ec <Output_Value_Temperature_Sensor+0x28c>


		case 3:
			/*lcd display */
			Display_Setup_Parameter_Temperature(&lcd1, y_static_input_temperature_value[2]);
 800d526:	4b38      	ldr	r3, [pc, #224]	; (800d608 <Output_Value_Temperature_Sensor+0x2a8>)
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7f3 fdf6 	bl	800111c <__aeabi_f2uiz>
 800d530:	4603      	mov	r3, r0
 800d532:	b2db      	uxtb	r3, r3
 800d534:	4619      	mov	r1, r3
 800d536:	4832      	ldr	r0, [pc, #200]	; (800d600 <Output_Value_Temperature_Sensor+0x2a0>)
 800d538:	f7f6 f838 	bl	80035ac <Display_Setup_Parameter_Temperature>
			/*check condition for execution the data reading from humidity sensor*/
			if(check_11 == 3)
 800d53c:	4b33      	ldr	r3, [pc, #204]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b03      	cmp	r3, #3
 800d544:	d134      	bne.n	800d5b0 <Output_Value_Temperature_Sensor+0x250>
			{
				while (HAL_GetTick() - time_wake_up_11 <= TIME_WAITTING_START_CALIBRATION)
 800d546:	e002      	b.n	800d54e <Output_Value_Temperature_Sensor+0x1ee>
				{
					/*wake up pump*/
					Send_Data_74HC595(0xAF);
 800d548:	20af      	movs	r0, #175	; 0xaf
 800d54a:	f7f6 fb29 	bl	8003ba0 <Send_Data_74HC595>
				while (HAL_GetTick() - time_wake_up_11 <= TIME_WAITTING_START_CALIBRATION)
 800d54e:	f7f6 fb85 	bl	8003c5c <HAL_GetTick>
 800d552:	4602      	mov	r2, r0
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	4a2d      	ldr	r2, [pc, #180]	; (800d610 <Output_Value_Temperature_Sensor+0x2b0>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d9f4      	bls.n	800d548 <Output_Value_Temperature_Sensor+0x1e8>
				}
				/*Turn off pump*/
				Send_Data_74HC595(0xFF);
 800d55e:	20ff      	movs	r0, #255	; 0xff
 800d560:	f7f6 fb1e 	bl	8003ba0 <Send_Data_74HC595>
				/*input value*/
				DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800d564:	230a      	movs	r3, #10
 800d566:	4a2b      	ldr	r2, [pc, #172]	; (800d614 <Output_Value_Temperature_Sensor+0x2b4>)
 800d568:	492b      	ldr	r1, [pc, #172]	; (800d618 <Output_Value_Temperature_Sensor+0x2b8>)
 800d56a:	482c      	ldr	r0, [pc, #176]	; (800d61c <Output_Value_Temperature_Sensor+0x2bc>)
 800d56c:	f7f5 f8f8 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>
				out_put_05 = Lagrange_Interpolation(x_input_temperature_value, y_static_input_temperature_value, MAX_ARR_X_Y_LAGRANGE, temperature);
 800d570:	4b29      	ldr	r3, [pc, #164]	; (800d618 <Output_Value_Temperature_Sensor+0x2b8>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2203      	movs	r2, #3
 800d576:	4924      	ldr	r1, [pc, #144]	; (800d608 <Output_Value_Temperature_Sensor+0x2a8>)
 800d578:	4829      	ldr	r0, [pc, #164]	; (800d620 <Output_Value_Temperature_Sensor+0x2c0>)
 800d57a:	f000 f857 	bl	800d62c <Lagrange_Interpolation>
 800d57e:	60f8      	str	r0, [r7, #12]
				/*Tonggle buzz after having read data from humidity sensor*/
				for(uint8_t i =0; i < 5; i++)
 800d580:	2300      	movs	r3, #0
 800d582:	727b      	strb	r3, [r7, #9]
 800d584:	e00a      	b.n	800d59c <Output_Value_Temperature_Sensor+0x23c>
				{
					HAL_GPIO_TogglePin(Buzz_GPIO_Port, Buzz_Pin);
 800d586:	2101      	movs	r1, #1
 800d588:	4826      	ldr	r0, [pc, #152]	; (800d624 <Output_Value_Temperature_Sensor+0x2c4>)
 800d58a:	f7f7 fde0 	bl	800514e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800d58e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d592:	f7f6 fb6d 	bl	8003c70 <HAL_Delay>
				for(uint8_t i =0; i < 5; i++)
 800d596:	7a7b      	ldrb	r3, [r7, #9]
 800d598:	3301      	adds	r3, #1
 800d59a:	727b      	strb	r3, [r7, #9]
 800d59c:	7a7b      	ldrb	r3, [r7, #9]
 800d59e:	2b04      	cmp	r3, #4
 800d5a0:	d9f1      	bls.n	800d586 <Output_Value_Temperature_Sensor+0x226>
				}
				/*increase variable by 1 unit*/
				check_11++;
 800d5a2:	4b1a      	ldr	r3, [pc, #104]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	4b17      	ldr	r3, [pc, #92]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d5ae:	701a      	strb	r2, [r3, #0]
			}
			/*check condition when finished reading data from temperature sensor*/
			if(check_11 == 4)
 800d5b0:	4b16      	ldr	r3, [pc, #88]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	2b04      	cmp	r3, #4
 800d5b8:	d11a      	bne.n	800d5f0 <Output_Value_Temperature_Sensor+0x290>
			{
				/*Buzz off*/
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	2101      	movs	r1, #1
 800d5be:	4819      	ldr	r0, [pc, #100]	; (800d624 <Output_Value_Temperature_Sensor+0x2c4>)
 800d5c0:	f7f7 fdad 	bl	800511e <HAL_GPIO_WritePin>
				/*lcd display*/
				Display_Monitor(&lcd1,out_put_05);
 800d5c4:	68f9      	ldr	r1, [r7, #12]
 800d5c6:	480e      	ldr	r0, [pc, #56]	; (800d600 <Output_Value_Temperature_Sensor+0x2a0>)
 800d5c8:	f7f6 f9cc 	bl	8003964 <Display_Monitor>
			}
			break;
 800d5cc:	e010      	b.n	800d5f0 <Output_Value_Temperature_Sensor+0x290>

		/*Default mode*/
		default:

			/*reassign variable check_06 = 1*/
			CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	480b      	ldr	r0, [pc, #44]	; (800d600 <Output_Value_Temperature_Sensor+0x2a0>)
 800d5d4:	f7fa fbc0 	bl	8007d58 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&lcd1, "Temp_Monitor");
 800d5d8:	4913      	ldr	r1, [pc, #76]	; (800d628 <Output_Value_Temperature_Sensor+0x2c8>)
 800d5da:	4809      	ldr	r0, [pc, #36]	; (800d600 <Output_Value_Temperature_Sensor+0x2a0>)
 800d5dc:	f7fa fc0f 	bl	8007dfe <CLCD_I2C_WriteString>
			check_11 = 1;
 800d5e0:	4b0a      	ldr	r3, [pc, #40]	; (800d60c <Output_Value_Temperature_Sensor+0x2ac>)
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	701a      	strb	r2, [r3, #0]
			break;
 800d5e6:	e004      	b.n	800d5f2 <Output_Value_Temperature_Sensor+0x292>
			break;
 800d5e8:	bf00      	nop
 800d5ea:	e002      	b.n	800d5f2 <Output_Value_Temperature_Sensor+0x292>
			break;
 800d5ec:	bf00      	nop
 800d5ee:	e000      	b.n	800d5f2 <Output_Value_Temperature_Sensor+0x292>
			break;
 800d5f0:	bf00      	nop
	}

	    return 0;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	40011400 	.word	0x40011400
 800d600:	2000086c 	.word	0x2000086c
 800d604:	20001c46 	.word	0x20001c46
 800d608:	20000060 	.word	0x20000060
 800d60c:	20001c47 	.word	0x20001c47
 800d610:	000493e0 	.word	0x000493e0
 800d614:	20001c28 	.word	0x20001c28
 800d618:	20001c24 	.word	0x20001c24
 800d61c:	20001b20 	.word	0x20001b20
 800d620:	20001c0c 	.word	0x20001c0c
 800d624:	40011800 	.word	0x40011800
 800d628:	08011404 	.word	0x08011404

0800d62c <Lagrange_Interpolation>:
 * @param lenght 
 * @param find_value 
 * @return float 
 */
float Lagrange_Interpolation(float *x, float *y, uint8_t lenght ,float find_value)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b088      	sub	sp, #32
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	603b      	str	r3, [r7, #0]
 800d638:	4613      	mov	r3, r2
 800d63a:	71fb      	strb	r3, [r7, #7]
	float s = 1, t = 1 , k = 0;
 800d63c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d640:	61fb      	str	r3, [r7, #28]
 800d642:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d646:	61bb      	str	r3, [r7, #24]
 800d648:	f04f 0300 	mov.w	r3, #0
 800d64c:	617b      	str	r3, [r7, #20]
	for(uint8_t i =0; i< lenght; i++)
 800d64e:	2300      	movs	r3, #0
 800d650:	74fb      	strb	r3, [r7, #19]
 800d652:	e04f      	b.n	800d6f4 <Lagrange_Interpolation+0xc8>
	{
		s = 1;
 800d654:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d658:	61fb      	str	r3, [r7, #28]
		t = 1;
 800d65a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d65e:	61bb      	str	r3, [r7, #24]
		for(uint8_t j =0; j < lenght ; j++)
 800d660:	2300      	movs	r3, #0
 800d662:	74bb      	strb	r3, [r7, #18]
 800d664:	e02a      	b.n	800d6bc <Lagrange_Interpolation+0x90>
		{
			if(j!=i)
 800d666:	7cba      	ldrb	r2, [r7, #18]
 800d668:	7cfb      	ldrb	r3, [r7, #19]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d023      	beq.n	800d6b6 <Lagrange_Interpolation+0x8a>
			{
				s = s*(find_value - *(x+j));
 800d66e:	7cbb      	ldrb	r3, [r7, #18]
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	4413      	add	r3, r2
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4619      	mov	r1, r3
 800d67a:	6838      	ldr	r0, [r7, #0]
 800d67c:	f7f3 fa58 	bl	8000b30 <__aeabi_fsub>
 800d680:	4603      	mov	r3, r0
 800d682:	4619      	mov	r1, r3
 800d684:	69f8      	ldr	r0, [r7, #28]
 800d686:	f7f3 fb5d 	bl	8000d44 <__aeabi_fmul>
 800d68a:	4603      	mov	r3, r0
 800d68c:	61fb      	str	r3, [r7, #28]
				t = t *(*(x + i) - *(x +j));
 800d68e:	7cfb      	ldrb	r3, [r7, #19]
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	4413      	add	r3, r2
 800d696:	6818      	ldr	r0, [r3, #0]
 800d698:	7cbb      	ldrb	r3, [r7, #18]
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	4413      	add	r3, r2
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	f7f3 fa44 	bl	8000b30 <__aeabi_fsub>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	69b8      	ldr	r0, [r7, #24]
 800d6ae:	f7f3 fb49 	bl	8000d44 <__aeabi_fmul>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	61bb      	str	r3, [r7, #24]
		for(uint8_t j =0; j < lenght ; j++)
 800d6b6:	7cbb      	ldrb	r3, [r7, #18]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	74bb      	strb	r3, [r7, #18]
 800d6bc:	7cba      	ldrb	r2, [r7, #18]
 800d6be:	79fb      	ldrb	r3, [r7, #7]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d3d0      	bcc.n	800d666 <Lagrange_Interpolation+0x3a>
			}
		}
		k = k +((s/t) * (*(y+i)));
 800d6c4:	69b9      	ldr	r1, [r7, #24]
 800d6c6:	69f8      	ldr	r0, [r7, #28]
 800d6c8:	f7f3 fbf0 	bl	8000eac <__aeabi_fdiv>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	7cfb      	ldrb	r3, [r7, #19]
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	f7f3 fb32 	bl	8000d44 <__aeabi_fmul>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	6978      	ldr	r0, [r7, #20]
 800d6e6:	f7f3 fa25 	bl	8000b34 <__addsf3>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	617b      	str	r3, [r7, #20]
	for(uint8_t i =0; i< lenght; i++)
 800d6ee:	7cfb      	ldrb	r3, [r7, #19]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	74fb      	strb	r3, [r7, #19]
 800d6f4:	7cfa      	ldrb	r2, [r7, #19]
 800d6f6:	79fb      	ldrb	r3, [r7, #7]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d3ab      	bcc.n	800d654 <Lagrange_Interpolation+0x28>
	}
	return k;
 800d6fc:	697b      	ldr	r3, [r7, #20]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3720      	adds	r7, #32
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
	...

0800d708 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU>:

/** Read_Data_Parameter_Group_Sensor
 *
 */
void Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU(void)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	af00      	add	r7, sp, #0
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_PM2_5_SENSOR, x_input_pm2_5_value, sizeof(x_input_pm2_5_value)/sizeof(float));
 800d70c:	2203      	movs	r2, #3
 800d70e:	491e      	ldr	r1, [pc, #120]	; (800d788 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0x80>)
 800d710:	481e      	ldr	r0, [pc, #120]	; (800d78c <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0x84>)
 800d712:	f7fd f94a 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_SUM_PM_SENSOR, x_input_sum_pm_value, sizeof(x_input_sum_pm_value)/sizeof(float));
 800d716:	2203      	movs	r2, #3
 800d718:	491d      	ldr	r1, [pc, #116]	; (800d790 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0x88>)
 800d71a:	481e      	ldr	r0, [pc, #120]	; (800d794 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0x8c>)
 800d71c:	f7fd f945 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_CO2_SENSOR, x_input_co2_value, sizeof(x_input_co2_value)/sizeof(float));
 800d720:	2203      	movs	r2, #3
 800d722:	491d      	ldr	r1, [pc, #116]	; (800d798 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0x90>)
 800d724:	481d      	ldr	r0, [pc, #116]	; (800d79c <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0x94>)
 800d726:	f7fd f940 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_SO2_PM_VALUE, x_input_so2_pm_value, sizeof(x_input_so2_pm_value)/sizeof(float));
 800d72a:	2203      	movs	r2, #3
 800d72c:	491c      	ldr	r1, [pc, #112]	; (800d7a0 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0x98>)
 800d72e:	481d      	ldr	r0, [pc, #116]	; (800d7a4 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0x9c>)
 800d730:	f7fd f93b 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_TEMPERATURE, x_input_temperature_value, sizeof(x_input_temperature_value)/sizeof(float));
 800d734:	2203      	movs	r2, #3
 800d736:	491c      	ldr	r1, [pc, #112]	; (800d7a8 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xa0>)
 800d738:	481c      	ldr	r0, [pc, #112]	; (800d7ac <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xa4>)
 800d73a:	f7fd f936 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_HUMIDITY, x_input_humidity_value, sizeof(x_input_humidity_value)/sizeof(float));
 800d73e:	2203      	movs	r2, #3
 800d740:	491b      	ldr	r1, [pc, #108]	; (800d7b0 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xa8>)
 800d742:	481c      	ldr	r0, [pc, #112]	; (800d7b4 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xac>)
 800d744:	f7fd f931 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_PM2_5, y_static_input_pm2_5_value,  sizeof(y_static_input_pm2_5_value)/sizeof(float));
 800d748:	2203      	movs	r2, #3
 800d74a:	491b      	ldr	r1, [pc, #108]	; (800d7b8 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xb0>)
 800d74c:	481b      	ldr	r0, [pc, #108]	; (800d7bc <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xb4>)
 800d74e:	f7fd f92c 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_SUM_PM, y_static_input_sum_pm_value,  sizeof(y_static_input_sum_pm_value)/sizeof(float));
 800d752:	2203      	movs	r2, #3
 800d754:	491a      	ldr	r1, [pc, #104]	; (800d7c0 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xb8>)
 800d756:	481b      	ldr	r0, [pc, #108]	; (800d7c4 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xbc>)
 800d758:	f7fd f927 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_CO2, y_static_input_co2_value,  sizeof(y_static_input_co2_value)/sizeof(float));
 800d75c:	2203      	movs	r2, #3
 800d75e:	491a      	ldr	r1, [pc, #104]	; (800d7c8 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xc0>)
 800d760:	481a      	ldr	r0, [pc, #104]	; (800d7cc <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xc4>)
 800d762:	f7fd f922 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_SO2, y_static_input_so2_value,  sizeof(y_static_input_so2_value)/sizeof(float));
 800d766:	2203      	movs	r2, #3
 800d768:	4919      	ldr	r1, [pc, #100]	; (800d7d0 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xc8>)
 800d76a:	481a      	ldr	r0, [pc, #104]	; (800d7d4 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xcc>)
 800d76c:	f7fd f91d 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_TEMPERATURE, y_static_input_temperature_value,  sizeof(y_static_input_temperature_value)/sizeof(float));
 800d770:	2203      	movs	r2, #3
 800d772:	4919      	ldr	r1, [pc, #100]	; (800d7d8 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xd0>)
 800d774:	4819      	ldr	r0, [pc, #100]	; (800d7dc <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xd4>)
 800d776:	f7fd f918 	bl	800a9aa <Read_Value_Float_Flash>
	/*read Parameter data type float*/
	Read_Value_Float_Flash(START_BASE_ADDRESS_PARAMETER_HUMIDITY, y_static_input_humidity_value,  sizeof(y_static_input_humidity_value)/sizeof(float));
 800d77a:	2203      	movs	r2, #3
 800d77c:	4918      	ldr	r1, [pc, #96]	; (800d7e0 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xd8>)
 800d77e:	4819      	ldr	r0, [pc, #100]	; (800d7e4 <Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU+0xdc>)
 800d780:	f7fd f913 	bl	800a9aa <Read_Value_Float_Flash>
}
 800d784:	bf00      	nop
 800d786:	bd80      	pop	{r7, pc}
 800d788:	20001bdc 	.word	0x20001bdc
 800d78c:	0801fc00 	.word	0x0801fc00
 800d790:	20001be8 	.word	0x20001be8
 800d794:	0801fc96 	.word	0x0801fc96
 800d798:	20001bf4 	.word	0x20001bf4
 800d79c:	0801fd2c 	.word	0x0801fd2c
 800d7a0:	20001c00 	.word	0x20001c00
 800d7a4:	0801fdc2 	.word	0x0801fdc2
 800d7a8:	20001c0c 	.word	0x20001c0c
 800d7ac:	0801fe58 	.word	0x0801fe58
 800d7b0:	20001c18 	.word	0x20001c18
 800d7b4:	0801feee 	.word	0x0801feee
 800d7b8:	20000030 	.word	0x20000030
 800d7bc:	0801f800 	.word	0x0801f800
 800d7c0:	2000003c 	.word	0x2000003c
 800d7c4:	0801f896 	.word	0x0801f896
 800d7c8:	20000048 	.word	0x20000048
 800d7cc:	0801f92c 	.word	0x0801f92c
 800d7d0:	20000054 	.word	0x20000054
 800d7d4:	0801f9c2 	.word	0x0801f9c2
 800d7d8:	20000060 	.word	0x20000060
 800d7dc:	0801fa58 	.word	0x0801fa58
 800d7e0:	2000006c 	.word	0x2000006c
 800d7e4:	0801faee 	.word	0x0801faee

0800d7e8 <Init_Sensor>:

/**
 * Init_Sensor
*/
void Init_Sensor(void)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
		{4, Init_BMP18_Air_Pressure},
		{5, Init_Sharp_G2y10_Sum_Dust_Sensor},
		{6, Init_Lm335A_Temperature_Sensor},
		{7, Int_Read_Data_Parameter_Group_Sensor_To_Flash_MCU}
	*/
	for(uint8_t i =0; i<sizeof(gSensor_Init_System)/sizeof(gSensor); i++)
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	71fb      	strb	r3, [r7, #7]
 800d7f2:	e00c      	b.n	800d80e <Init_Sensor+0x26>
	{
		gSensor_Init_System[i].gSensor.gInit_Sensor();
 800d7f4:	79fa      	ldrb	r2, [r7, #7]
 800d7f6:	490a      	ldr	r1, [pc, #40]	; (800d820 <Init_Sensor+0x38>)
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	005b      	lsls	r3, r3, #1
 800d7fc:	4413      	add	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	440b      	add	r3, r1
 800d802:	3304      	adds	r3, #4
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4798      	blx	r3
	for(uint8_t i =0; i<sizeof(gSensor_Init_System)/sizeof(gSensor); i++)
 800d808:	79fb      	ldrb	r3, [r7, #7]
 800d80a:	3301      	adds	r3, #1
 800d80c:	71fb      	strb	r3, [r7, #7]
 800d80e:	79fb      	ldrb	r3, [r7, #7]
 800d810:	2b07      	cmp	r3, #7
 800d812:	d9ef      	bls.n	800d7f4 <Init_Sensor+0xc>
	}

}
 800d814:	bf00      	nop
 800d816:	bf00      	nop
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	20000078 	.word	0x20000078

0800d824 <Run_Normal>:

/**
 * @brief Run_Normal
*/
void Run_Normal(void)
{
 800d824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d828:	b08a      	sub	sp, #40	; 0x28
 800d82a:	af06      	add	r7, sp, #24
	static __IO float pm2_5, sum_pm, co2, so2, batery_voltage, vdc_input, solar_voltage;
	uint32_t Wake_Up_Send_Data_Lora = HAL_GetTick();
 800d82c:	f7f6 fa16 	bl	8003c5c <HAL_GetTick>
 800d830:	60f8      	str	r0, [r7, #12]
	batery_voltage = vdc_input = solar_voltage = 12000; /*Uinit: mV*/
 800d832:	4b4d      	ldr	r3, [pc, #308]	; (800d968 <Run_Normal+0x144>)
 800d834:	4a4d      	ldr	r2, [pc, #308]	; (800d96c <Run_Normal+0x148>)
 800d836:	6013      	str	r3, [r2, #0]
 800d838:	4a4d      	ldr	r2, [pc, #308]	; (800d970 <Run_Normal+0x14c>)
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	4a4d      	ldr	r2, [pc, #308]	; (800d974 <Run_Normal+0x150>)
 800d83e:	6013      	str	r3, [r2, #0]
	pm2_5 = sum_pm = co2 = so2 = 0;
 800d840:	f04f 0300 	mov.w	r3, #0
 800d844:	4a4c      	ldr	r2, [pc, #304]	; (800d978 <Run_Normal+0x154>)
 800d846:	6013      	str	r3, [r2, #0]
 800d848:	4a4c      	ldr	r2, [pc, #304]	; (800d97c <Run_Normal+0x158>)
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	4a4c      	ldr	r2, [pc, #304]	; (800d980 <Run_Normal+0x15c>)
 800d84e:	6013      	str	r3, [r2, #0]
 800d850:	4a4c      	ldr	r2, [pc, #304]	; (800d984 <Run_Normal+0x160>)
 800d852:	6013      	str	r3, [r2, #0]
	/*run nomarl */
	/* Lcd setup cursor */
	CLCD_I2C_SetCursor(&lcd1, 0, 0);
 800d854:	2200      	movs	r2, #0
 800d856:	2100      	movs	r1, #0
 800d858:	484b      	ldr	r0, [pc, #300]	; (800d988 <Run_Normal+0x164>)
 800d85a:	f7fa fa7d 	bl	8007d58 <CLCD_I2C_SetCursor>
	/* Lcd send string*/
	CLCD_I2C_WriteString(&lcd1, "Run Normal");
 800d85e:	494b      	ldr	r1, [pc, #300]	; (800d98c <Run_Normal+0x168>)
 800d860:	4849      	ldr	r0, [pc, #292]	; (800d988 <Run_Normal+0x164>)
 800d862:	f7fa facc 	bl	8007dfe <CLCD_I2C_WriteString>
	/* Lcd setup cursor */
	CLCD_I2C_SetCursor(&lcd1, 0, 3);
 800d866:	2203      	movs	r2, #3
 800d868:	2100      	movs	r1, #0
 800d86a:	4847      	ldr	r0, [pc, #284]	; (800d988 <Run_Normal+0x164>)
 800d86c:	f7fa fa74 	bl	8007d58 <CLCD_I2C_SetCursor>
	/* Lcd send string*/
	CLCD_I2C_WriteString(&lcd1, "Tab_0");
 800d870:	4947      	ldr	r1, [pc, #284]	; (800d990 <Run_Normal+0x16c>)
 800d872:	4845      	ldr	r0, [pc, #276]	; (800d988 <Run_Normal+0x164>)
 800d874:	f7fa fac3 	bl	8007dfe <CLCD_I2C_WriteString>
	/*read value pm2_5 sensor*/
	//pm2_5 =  Hpma115S0_Caclulator_Average(&hpma115s0_sensor_01, 10);
	/*read value sum_pm sensor*/
//	if(flag_system.check_start_mesurment_sensor == 1)
//	{
		sum_pm  =  Sharp_G2y10_Dust_Sensor_Measuring_Average(&sharpg2y_sensor01, 10);
 800d878:	210a      	movs	r1, #10
 800d87a:	4846      	ldr	r0, [pc, #280]	; (800d994 <Run_Normal+0x170>)
 800d87c:	f000 f900 	bl	800da80 <Sharp_G2y10_Dust_Sensor_Measuring_Average>
 800d880:	4603      	mov	r3, r0
 800d882:	4a3f      	ldr	r2, [pc, #252]	; (800d980 <Run_Normal+0x15c>)
 800d884:	6013      	str	r3, [r2, #0]
		/*read value co2 sensor*/
		co2 = Mh_Z19B_Co2_Sensor_Caclulator_Average(&mh_z19b_sensor_01, 10);
 800d886:	210a      	movs	r1, #10
 800d888:	4843      	ldr	r0, [pc, #268]	; (800d998 <Run_Normal+0x174>)
 800d88a:	f7fa fb3b 	bl	8007f04 <Mh_Z19B_Co2_Sensor_Caclulator_Average>
 800d88e:	4603      	mov	r3, r0
 800d890:	4a3a      	ldr	r2, [pc, #232]	; (800d97c <Run_Normal+0x158>)
 800d892:	6013      	str	r3, [r2, #0]
		/*read value so2 sensor*/
		so2 = hx711_so2_result(&so2_sensor, 10);
 800d894:	210a      	movs	r1, #10
 800d896:	4841      	ldr	r0, [pc, #260]	; (800d99c <Run_Normal+0x178>)
 800d898:	f000 fc16 	bl	800e0c8 <hx711_so2_result>
 800d89c:	4603      	mov	r3, r0
 800d89e:	4a36      	ldr	r2, [pc, #216]	; (800d978 <Run_Normal+0x154>)
 800d8a0:	6013      	str	r3, [r2, #0]
		/*read value temp, humi*/
		DHT_Read_Temperature_Humidity_Average(&DHT22_Sensor_1, &temperature,  &humidity, 10);
 800d8a2:	230a      	movs	r3, #10
 800d8a4:	4a3e      	ldr	r2, [pc, #248]	; (800d9a0 <Run_Normal+0x17c>)
 800d8a6:	493f      	ldr	r1, [pc, #252]	; (800d9a4 <Run_Normal+0x180>)
 800d8a8:	483f      	ldr	r0, [pc, #252]	; (800d9a8 <Run_Normal+0x184>)
 800d8aa:	f7f4 ff59 	bl	8002760 <DHT_Read_Temperature_Humidity_Average>

		if(HAL_GetTick() - Wake_Up_Send_Data_Lora >= 200)
 800d8ae:	f7f6 f9d5 	bl	8003c5c <HAL_GetTick>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	2bc7      	cmp	r3, #199	; 0xc7
 800d8ba:	d94f      	bls.n	800d95c <Run_Normal+0x138>
		{
			Wake_Up_Send_Data_Lora = HAL_GetTick();
 800d8bc:	f7f6 f9ce 	bl	8003c5c <HAL_GetTick>
 800d8c0:	60f8      	str	r0, [r7, #12]
			Lora_Uart_Master_Send_Data_To_Salve(&moudle_lora_01, temperature, (uint16_t)humidity, (uint16_t)co2, (uint16_t)so2, (uint16_t)sum_pm, (uint16_t)pm2_5, (uint16_t)batery_voltage, (uint16_t)vdc_input, (uint16_t)solar_voltage);
 800d8c2:	4b38      	ldr	r3, [pc, #224]	; (800d9a4 <Run_Normal+0x180>)
 800d8c4:	f8d3 8000 	ldr.w	r8, [r3]
 800d8c8:	4b35      	ldr	r3, [pc, #212]	; (800d9a0 <Run_Normal+0x17c>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7f3 fc25 	bl	800111c <__aeabi_f2uiz>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	fa1f f983 	uxth.w	r9, r3
 800d8d8:	4b28      	ldr	r3, [pc, #160]	; (800d97c <Run_Normal+0x158>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7f3 fc1d 	bl	800111c <__aeabi_f2uiz>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	fa1f fa83 	uxth.w	sl, r3
 800d8e8:	4b23      	ldr	r3, [pc, #140]	; (800d978 <Run_Normal+0x154>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7f3 fc15 	bl	800111c <__aeabi_f2uiz>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	b29c      	uxth	r4, r3
 800d8f6:	4b22      	ldr	r3, [pc, #136]	; (800d980 <Run_Normal+0x15c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7f3 fc0e 	bl	800111c <__aeabi_f2uiz>
 800d900:	4603      	mov	r3, r0
 800d902:	b29d      	uxth	r5, r3
 800d904:	4b1f      	ldr	r3, [pc, #124]	; (800d984 <Run_Normal+0x160>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f3 fc07 	bl	800111c <__aeabi_f2uiz>
 800d90e:	4603      	mov	r3, r0
 800d910:	b29e      	uxth	r6, r3
 800d912:	4b18      	ldr	r3, [pc, #96]	; (800d974 <Run_Normal+0x150>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4618      	mov	r0, r3
 800d918:	f7f3 fc00 	bl	800111c <__aeabi_f2uiz>
 800d91c:	4603      	mov	r3, r0
 800d91e:	b29b      	uxth	r3, r3
 800d920:	607b      	str	r3, [r7, #4]
 800d922:	4b13      	ldr	r3, [pc, #76]	; (800d970 <Run_Normal+0x14c>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4618      	mov	r0, r3
 800d928:	f7f3 fbf8 	bl	800111c <__aeabi_f2uiz>
 800d92c:	4603      	mov	r3, r0
 800d92e:	b29a      	uxth	r2, r3
 800d930:	603a      	str	r2, [r7, #0]
 800d932:	4b0e      	ldr	r3, [pc, #56]	; (800d96c <Run_Normal+0x148>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4618      	mov	r0, r3
 800d938:	f7f3 fbf0 	bl	800111c <__aeabi_f2uiz>
 800d93c:	4603      	mov	r3, r0
 800d93e:	b29b      	uxth	r3, r3
 800d940:	9305      	str	r3, [sp, #20]
 800d942:	683a      	ldr	r2, [r7, #0]
 800d944:	9204      	str	r2, [sp, #16]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	9303      	str	r3, [sp, #12]
 800d94a:	9602      	str	r6, [sp, #8]
 800d94c:	9501      	str	r5, [sp, #4]
 800d94e:	9400      	str	r4, [sp, #0]
 800d950:	4653      	mov	r3, sl
 800d952:	464a      	mov	r2, r9
 800d954:	4641      	mov	r1, r8
 800d956:	4815      	ldr	r0, [pc, #84]	; (800d9ac <Run_Normal+0x188>)
 800d958:	f7fc fe74 	bl	800a644 <Lora_Uart_Master_Send_Data_To_Salve>
		}
//		flag_system.check_start_mesurment_sensor = 0;
//	}
	//Lora_Uart_Master_Send_Data_To_Salve(&moudle_lora_01, temperature, (uint16_t)humidity, (uint16_t)co2, (uint16_t)so2, (uint16_t)sum_pm, (uint16_t)pm2_5, (uint16_t)batery_voltage, (uint16_t)vdc_input, (uint16_t)solar_voltage);

}
 800d95c:	bf00      	nop
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d966:	bf00      	nop
 800d968:	463b8000 	.word	0x463b8000
 800d96c:	20001c48 	.word	0x20001c48
 800d970:	20001c4c 	.word	0x20001c4c
 800d974:	20001c50 	.word	0x20001c50
 800d978:	20001c54 	.word	0x20001c54
 800d97c:	20001c58 	.word	0x20001c58
 800d980:	20001c5c 	.word	0x20001c5c
 800d984:	20001c60 	.word	0x20001c60
 800d988:	2000086c 	.word	0x2000086c
 800d98c:	08011414 	.word	0x08011414
 800d990:	08011420 	.word	0x08011420
 800d994:	20001b80 	.word	0x20001b80
 800d998:	20001b1c 	.word	0x20001b1c
 800d99c:	20001ba8 	.word	0x20001ba8
 800d9a0:	20001c28 	.word	0x20001c28
 800d9a4:	20001c24 	.word	0x20001c24
 800d9a8:	20001b20 	.word	0x20001b20
 800d9ac:	2000084c 	.word	0x2000084c

0800d9b0 <Funtion_Routine_Hightlevel>:
/**
 * @brief Funtion_Routine_Hightlevel
 * 
 */
void Funtion_Routine_Hightlevel(void)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	af00      	add	r7, sp, #0
	if(flag_system.flag_01==0)
 800d9b4:	4b04      	ldr	r3, [pc, #16]	; (800d9c8 <Funtion_Routine_Hightlevel+0x18>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d101      	bne.n	800d9c0 <Funtion_Routine_Hightlevel+0x10>
	{
		Selec_Option_Sensor_Name();
 800d9bc:	f7fd f8ac 	bl	800ab18 <Selec_Option_Sensor_Name>
	}
	Save_Parameter_Sensor();
 800d9c0:	f7fd f9b4 	bl	800ad2c <Save_Parameter_Sensor>
}
 800d9c4:	bf00      	nop
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	20001c2c 	.word	0x20001c2c

0800d9cc <G2y10_Delay_Init>:
 * @brief G2y10_Delay_Init
 * 
 * @param sensor_x 
 */
static void G2y10_Delay_Init(SharpG2y10DustSensor_Name *sensor_x)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
	Delay_Tim_Init(sensor_x->Timerx);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7f4 ffe4 	bl	80029a6 <Delay_Tim_Init>
}
 800d9de:	bf00      	nop
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <G2y10_Delay_Us>:
 * 
 * @param sensor_x 
 * @param Time 
 */
static void G2y10_Delay_Us(SharpG2y10DustSensor_Name *sensor_x, uint16_t Time)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	807b      	strh	r3, [r7, #2]
	Delay_Timer_Us(sensor_x->Timerx, Time);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	887a      	ldrh	r2, [r7, #2]
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7f4 ffde 	bl	80029bc <Delay_Timer_Us>
}
 800da00:	bf00      	nop
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <G2y10_ADC_Channel_Config>:
 * @brief G2y10_ADC_Channel_Config
 *
 * @param sensor_x
 */
static void G2y10_ADC_Channel_Config(SharpG2y10DustSensor_Name *sensor_x)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b086      	sub	sp, #24
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 800da10:	f107 030c 	add.w	r3, r7, #12
 800da14:	2200      	movs	r2, #0
 800da16:	601a      	str	r2, [r3, #0]
 800da18:	605a      	str	r2, [r3, #4]
 800da1a:	609a      	str	r2, [r3, #8]
    sConfig.Channel = ADC_CHANNEL_10;
 800da1c:	230a      	movs	r3, #10
 800da1e:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800da20:	2301      	movs	r3, #1
 800da22:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800da24:	2307      	movs	r3, #7
 800da26:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(sensor_x->G2y10_ADC, &sConfig) != HAL_OK)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f107 020c 	add.w	r2, r7, #12
 800da30:	4611      	mov	r1, r2
 800da32:	4618      	mov	r0, r3
 800da34:	f7f6 fc04 	bl	8004240 <HAL_ADC_ConfigChannel>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d001      	beq.n	800da42 <G2y10_ADC_Channel_Config+0x3a>
    {
        Error_Handler();
 800da3e:	f7f4 f98d 	bl	8001d5c <Error_Handler>
    }

}
 800da42:	bf00      	nop
 800da44:	3718      	adds	r7, #24
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <Sharp_G2y10_Dust_Sensor_Init>:
 * @param G2y10_Sample_Time_ADC
 * @param G2y10_Port
 * @param G2y10_Pin
 */
void Sharp_G2y10_Dust_Sensor_Init(SharpG2y10DustSensor_Name *sensor_x, ADC_HandleTypeDef *G2y10_ADCx,  TIM_HandleTypeDef* Timer,GPIO_TypeDef *G2y10_Port, uint16_t G2y10_Pin)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b084      	sub	sp, #16
 800da4e:	af00      	add	r7, sp, #0
 800da50:	60f8      	str	r0, [r7, #12]
 800da52:	60b9      	str	r1, [r7, #8]
 800da54:	607a      	str	r2, [r7, #4]
 800da56:	603b      	str	r3, [r7, #0]
    sensor_x->G2y10_ADC = G2y10_ADCx;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	68ba      	ldr	r2, [r7, #8]
 800da5c:	601a      	str	r2, [r3, #0]
    sensor_x->Timerx = Timer;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	609a      	str	r2, [r3, #8]
    sensor_x->PORT = G2y10_Port;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	605a      	str	r2, [r3, #4]
    sensor_x->Pin = G2y10_Pin;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	8b3a      	ldrh	r2, [r7, #24]
 800da6e:	831a      	strh	r2, [r3, #24]
    G2y10_Delay_Init(sensor_x);
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	f7ff ffab 	bl	800d9cc <G2y10_Delay_Init>
}
 800da76:	bf00      	nop
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
	...

0800da80 <Sharp_G2y10_Dust_Sensor_Measuring_Average>:
 * @param GPIO_Pin
 * @param time_out
 * @return uint16_t
 */
float Sharp_G2y10_Dust_Sensor_Measuring_Average(SharpG2y10DustSensor_Name *sensor_x, uint8_t sample)
{
 800da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da84:	b091      	sub	sp, #68	; 0x44
 800da86:	af00      	add	r7, sp, #0
 800da88:	60f8      	str	r0, [r7, #12]
 800da8a:	460b      	mov	r3, r1
 800da8c:	72fb      	strb	r3, [r7, #11]
 800da8e:	466b      	mov	r3, sp
 800da90:	461e      	mov	r6, r3
    uint16_t arr_buff[sample];
 800da92:	7af9      	ldrb	r1, [r7, #11]
 800da94:	460b      	mov	r3, r1
 800da96:	3b01      	subs	r3, #1
 800da98:	62bb      	str	r3, [r7, #40]	; 0x28
 800da9a:	b2cb      	uxtb	r3, r1
 800da9c:	2200      	movs	r2, #0
 800da9e:	603b      	str	r3, [r7, #0]
 800daa0:	607a      	str	r2, [r7, #4]
 800daa2:	f04f 0200 	mov.w	r2, #0
 800daa6:	f04f 0300 	mov.w	r3, #0
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	0103      	lsls	r3, r0, #4
 800daae:	6838      	ldr	r0, [r7, #0]
 800dab0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800dab4:	6838      	ldr	r0, [r7, #0]
 800dab6:	0102      	lsls	r2, r0, #4
 800dab8:	b2cb      	uxtb	r3, r1
 800daba:	2200      	movs	r2, #0
 800dabc:	469a      	mov	sl, r3
 800dabe:	4693      	mov	fp, r2
 800dac0:	f04f 0200 	mov.w	r2, #0
 800dac4:	f04f 0300 	mov.w	r3, #0
 800dac8:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800dacc:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800dad0:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800dad4:	460b      	mov	r3, r1
 800dad6:	005b      	lsls	r3, r3, #1
 800dad8:	3307      	adds	r3, #7
 800dada:	08db      	lsrs	r3, r3, #3
 800dadc:	00db      	lsls	r3, r3, #3
 800dade:	ebad 0d03 	sub.w	sp, sp, r3
 800dae2:	466b      	mov	r3, sp
 800dae4:	3301      	adds	r3, #1
 800dae6:	085b      	lsrs	r3, r3, #1
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t copy_buff[sample];
 800daec:	7af9      	ldrb	r1, [r7, #11]
 800daee:	460b      	mov	r3, r1
 800daf0:	3b01      	subs	r3, #1
 800daf2:	623b      	str	r3, [r7, #32]
 800daf4:	b2cb      	uxtb	r3, r1
 800daf6:	2200      	movs	r2, #0
 800daf8:	4698      	mov	r8, r3
 800dafa:	4691      	mov	r9, r2
 800dafc:	f04f 0200 	mov.w	r2, #0
 800db00:	f04f 0300 	mov.w	r3, #0
 800db04:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800db08:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800db0c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800db10:	b2cb      	uxtb	r3, r1
 800db12:	2200      	movs	r2, #0
 800db14:	461c      	mov	r4, r3
 800db16:	4615      	mov	r5, r2
 800db18:	f04f 0200 	mov.w	r2, #0
 800db1c:	f04f 0300 	mov.w	r3, #0
 800db20:	012b      	lsls	r3, r5, #4
 800db22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800db26:	0122      	lsls	r2, r4, #4
 800db28:	460b      	mov	r3, r1
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	3307      	adds	r3, #7
 800db2e:	08db      	lsrs	r3, r3, #3
 800db30:	00db      	lsls	r3, r3, #3
 800db32:	ebad 0d03 	sub.w	sp, sp, r3
 800db36:	466b      	mov	r3, sp
 800db38:	3301      	adds	r3, #1
 800db3a:	085b      	lsrs	r3, r3, #1
 800db3c:	005b      	lsls	r3, r3, #1
 800db3e:	61fb      	str	r3, [r7, #28]
    uint16_t min, max;
    uint32_t sum  = 0;
 800db40:	2300      	movs	r3, #0
 800db42:	637b      	str	r3, [r7, #52]	; 0x34
    float data = 0;
 800db44:	f04f 0300 	mov.w	r3, #0
 800db48:	61bb      	str	r3, [r7, #24]
    uint8_t index = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    float calcVoltage = 0.0, dust_density = 0.0;
 800db50:	f04f 0300 	mov.w	r3, #0
 800db54:	617b      	str	r3, [r7, #20]
 800db56:	f04f 0300 	mov.w	r3, #0
 800db5a:	63fb      	str	r3, [r7, #60]	; 0x3c

    for(uint8_t i = 0; i< sample; i++)
 800db5c:	2300      	movs	r3, #0
 800db5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800db62:	e042      	b.n	800dbea <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x16a>
    {
        G2y10_ADC_Channel_Config(sensor_x);
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f7ff ff4f 	bl	800da08 <G2y10_ADC_Channel_Config>
        HAL_ADC_Start(sensor_x->G2y10_ADC);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7f6 f97a 	bl	8003e68 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(sensor_x->G2y10_ADC, 1000);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7f6 fa4d 	bl	800401c <HAL_ADC_PollForConversion>
        HAL_GPIO_WritePin(sensor_x->PORT, sensor_x->Pin, GPIO_PIN_SET);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6858      	ldr	r0, [r3, #4]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	8b1b      	ldrh	r3, [r3, #24]
 800db8a:	2201      	movs	r2, #1
 800db8c:	4619      	mov	r1, r3
 800db8e:	f7f7 fac6 	bl	800511e <HAL_GPIO_WritePin>
        G2y10_Delay_Us(sensor_x, 280);
 800db92:	f44f 718c 	mov.w	r1, #280	; 0x118
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f7ff ff25 	bl	800d9e6 <G2y10_Delay_Us>
        arr_buff[i]= HAL_ADC_GetValue(sensor_x->G2y10_ADC);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7f6 fb41 	bl	8004228 <HAL_ADC_GetValue>
 800dba6:	4603      	mov	r3, r0
 800dba8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dbac:	b299      	uxth	r1, r3
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        G2y10_Delay_Us(sensor_x, 19);
 800dbb4:	2113      	movs	r1, #19
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f7ff ff15 	bl	800d9e6 <G2y10_Delay_Us>
        G2y10_Delay_Us(sensor_x, 9680);
 800dbbc:	f242 51d0 	movw	r1, #9680	; 0x25d0
 800dbc0:	68f8      	ldr	r0, [r7, #12]
 800dbc2:	f7ff ff10 	bl	800d9e6 <G2y10_Delay_Us>
        HAL_GPIO_WritePin(sensor_x->PORT, sensor_x->Pin, GPIO_PIN_RESET);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	6858      	ldr	r0, [r3, #4]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	8b1b      	ldrh	r3, [r3, #24]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	f7f7 faa4 	bl	800511e <HAL_GPIO_WritePin>
        HAL_ADC_Stop(sensor_x->G2y10_ADC);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7f6 f9f2 	bl	8003fc4 <HAL_ADC_Stop>
    for(uint8_t i = 0; i< sample; i++)
 800dbe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dbea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dbee:	7afb      	ldrb	r3, [r7, #11]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d3b7      	bcc.n	800db64 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0xe4>
        //G2y10_Delay_Us(sensor_x, 5000);
    }

    for(uint8_t i = 0; i < sample; i++)
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800dbfa:	e00d      	b.n	800dc18 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x198>
    {
        sum += arr_buff[i];
 800dbfc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dc06:	461a      	mov	r2, r3
 800dc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc0a:	4413      	add	r3, r2
 800dc0c:	637b      	str	r3, [r7, #52]	; 0x34
    for(uint8_t i = 0; i < sample; i++)
 800dc0e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dc12:	3301      	adds	r3, #1
 800dc14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800dc18:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dc1c:	7afb      	ldrb	r3, [r7, #11]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d3ec      	bcc.n	800dbfc <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x17c>
    }

    data = (float)(sum - max - min) / sample;
 800dc22:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dc24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc26:	1ad2      	subs	r2, r2, r3
 800dc28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7f3 f831 	bl	8000c94 <__aeabi_ui2f>
 800dc32:	4604      	mov	r4, r0
 800dc34:	7afb      	ldrb	r3, [r7, #11]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7f3 f830 	bl	8000c9c <__aeabi_i2f>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	4619      	mov	r1, r3
 800dc40:	4620      	mov	r0, r4
 800dc42:	f7f3 f933 	bl	8000eac <__aeabi_fdiv>
 800dc46:	4603      	mov	r3, r0
 800dc48:	61bb      	str	r3, [r7, #24]

    for(uint8_t i = 0; i< sample; i++)
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800dc50:	e033      	b.n	800dcba <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x23a>
    {
    	 if(abs(data - arr_buff[i]) < data)
 800dc52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7f3 f81d 	bl	8000c9c <__aeabi_i2f>
 800dc62:	4603      	mov	r3, r0
 800dc64:	4619      	mov	r1, r3
 800dc66:	69b8      	ldr	r0, [r7, #24]
 800dc68:	f7f2 ff62 	bl	8000b30 <__aeabi_fsub>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f3 fa2e 	bl	80010d0 <__aeabi_f2iz>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	bfb8      	it	lt
 800dc7a:	425b      	neglt	r3, r3
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7f3 f80d 	bl	8000c9c <__aeabi_i2f>
 800dc82:	4603      	mov	r3, r0
 800dc84:	4619      	mov	r1, r3
 800dc86:	69b8      	ldr	r0, [r7, #24]
 800dc88:	f7f3 fa18 	bl	80010bc <__aeabi_fcmpgt>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00e      	beq.n	800dcb0 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x230>
    	 {
    		 copy_buff[index] = arr_buff[i];
 800dc92:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800dc96:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    		 index ++;
 800dca6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dcaa:	3301      	adds	r3, #1
 800dcac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    for(uint8_t i = 0; i< sample; i++)
 800dcb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800dcba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800dcbe:	7afb      	ldrb	r3, [r7, #11]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d3c6      	bcc.n	800dc52 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x1d2>
    	 }
    }

    max = copy_buff[0];
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	881b      	ldrh	r3, [r3, #0]
 800dcc8:	867b      	strh	r3, [r7, #50]	; 0x32
    min = copy_buff[0];
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	863b      	strh	r3, [r7, #48]	; 0x30
    sum = copy_buff[0];
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	881b      	ldrh	r3, [r3, #0]
 800dcd4:	637b      	str	r3, [r7, #52]	; 0x34

    for(uint8_t i = 0; i < index; i++)
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800dcdc:	e02a      	b.n	800dd34 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x2b4>
    {
		if(max < copy_buff[i])
 800dcde:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dce8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d206      	bcs.n	800dcfc <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x27c>
		{
			max = copy_buff[i];
 800dcee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dcf8:	867b      	strh	r3, [r7, #50]	; 0x32
 800dcfa:	e00d      	b.n	800dd18 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x298>
		}
		else if(min >  copy_buff[i])
 800dcfc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dd06:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d905      	bls.n	800dd18 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x298>
		{
			min = copy_buff[i];
 800dd0c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dd16:	863b      	strh	r3, [r7, #48]	; 0x30
		}

		sum+=copy_buff[i];
 800dd18:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dd22:	461a      	mov	r2, r3
 800dd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd26:	4413      	add	r3, r2
 800dd28:	637b      	str	r3, [r7, #52]	; 0x34
    for(uint8_t i = 0; i < index; i++)
 800dd2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd2e:	3301      	adds	r3, #1
 800dd30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800dd34:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d3ce      	bcc.n	800dcde <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x25e>
    }

    data = (float)(sum - max - min)/index;
 800dd40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dd42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd44:	1ad2      	subs	r2, r2, r3
 800dd46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7f2 ffa2 	bl	8000c94 <__aeabi_ui2f>
 800dd50:	4604      	mov	r4, r0
 800dd52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7f2 ffa0 	bl	8000c9c <__aeabi_i2f>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	4619      	mov	r1, r3
 800dd60:	4620      	mov	r0, r4
 800dd62:	f7f3 f8a3 	bl	8000eac <__aeabi_fdiv>
 800dd66:	4603      	mov	r3, r0
 800dd68:	61bb      	str	r3, [r7, #24]

    calcVoltage = data * (3.3 / 4095);
 800dd6a:	69b8      	ldr	r0, [r7, #24]
 800dd6c:	f7f2 fb5c 	bl	8000428 <__aeabi_f2d>
 800dd70:	a319      	add	r3, pc, #100	; (adr r3, 800ddd8 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x358>)
 800dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd76:	f7f2 fbaf 	bl	80004d8 <__aeabi_dmul>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	4610      	mov	r0, r2
 800dd80:	4619      	mov	r1, r3
 800dd82:	f7f2 fe81 	bl	8000a88 <__aeabi_d2f>
 800dd86:	4603      	mov	r3, r0
 800dd88:	617b      	str	r3, [r7, #20]

    dust_density =  data * 0.17f - 0.1f;
 800dd8a:	4915      	ldr	r1, [pc, #84]	; (800dde0 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x360>)
 800dd8c:	69b8      	ldr	r0, [r7, #24]
 800dd8e:	f7f2 ffd9 	bl	8000d44 <__aeabi_fmul>
 800dd92:	4603      	mov	r3, r0
 800dd94:	4913      	ldr	r1, [pc, #76]	; (800dde4 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x364>)
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7f2 feca 	bl	8000b30 <__aeabi_fsub>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(dust_density >= 500)
 800dda0:	4911      	ldr	r1, [pc, #68]	; (800dde8 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x368>)
 800dda2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dda4:	f7f3 f980 	bl	80010a8 <__aeabi_fcmpge>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d001      	beq.n	800ddb2 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x332>
    {
    	dust_density = 500;
 800ddae:	4b0e      	ldr	r3, [pc, #56]	; (800dde8 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x368>)
 800ddb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(dust_density <= 0)
 800ddb2:	f04f 0100 	mov.w	r1, #0
 800ddb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ddb8:	f7f3 f96c 	bl	8001094 <__aeabi_fcmple>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <Sharp_G2y10_Dust_Sensor_Measuring_Average+0x348>
    {
    	dust_density = 0;
 800ddc2:	f04f 0300 	mov.w	r3, #0
 800ddc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    return dust_density;
 800ddc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddca:	46b5      	mov	sp, r6
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3744      	adds	r7, #68	; 0x44
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd6:	bf00      	nop
 800ddd8:	e734d9b4 	.word	0xe734d9b4
 800dddc:	3f4a680c 	.word	0x3f4a680c
 800dde0:	3e2e147b 	.word	0x3e2e147b
 800dde4:	3dcccccd 	.word	0x3dcccccd
 800dde8:	43fa0000 	.word	0x43fa0000

0800ddec <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 800ddf2:	2304      	movs	r3, #4
 800ddf4:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 800ddf6:	e006      	b.n	800de06 <hx711_delay_us+0x1a>
  {
    delay--;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	607b      	str	r3, [r7, #4]
    __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop");
 800ddfe:	bf00      	nop
 800de00:	bf00      	nop
 800de02:	bf00      	nop
 800de04:	bf00      	nop
  while (delay > 0)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1f5      	bne.n	800ddf8 <hx711_delay_us+0xc>
  }
}
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
 800de10:	370c      	adds	r7, #12
 800de12:	46bd      	mov	sp, r7
 800de14:	bc80      	pop	{r7}
 800de16:	4770      	bx	lr

0800de18 <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 800de20:	e002      	b.n	800de28 <hx711_lock+0x10>
    hx711_delay(1);
 800de22:	2001      	movs	r0, #1
 800de24:	f7f5 ff24 	bl	8003c70 <HAL_Delay>
  while (hx711->lock)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	7d1b      	ldrb	r3, [r3, #20]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1f8      	bne.n	800de22 <hx711_lock+0xa>
  hx711->lock = 1;      
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	751a      	strb	r2, [r3, #20]
}
 800de36:	bf00      	nop
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 800de3e:	b480      	push	{r7}
 800de40:	b083      	sub	sp, #12
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	751a      	strb	r2, [r3, #20]
}
 800de4c:	bf00      	nop
 800de4e:	370c      	adds	r7, #12
 800de50:	46bd      	mov	sp, r7
 800de52:	bc80      	pop	{r7}
 800de54:	4770      	bx	lr

0800de56 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 800de56:	b580      	push	{r7, lr}
 800de58:	b088      	sub	sp, #32
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	60f8      	str	r0, [r7, #12]
 800de5e:	60b9      	str	r1, [r7, #8]
 800de60:	603b      	str	r3, [r7, #0]
 800de62:	4613      	mov	r3, r2
 800de64:	80fb      	strh	r3, [r7, #6]
  //hx711_lock(hx711);
  hx711->clk_gpio = clk_gpio;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	68ba      	ldr	r2, [r7, #8]
 800de6a:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	88fa      	ldrh	r2, [r7, #6]
 800de70:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800de7c:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 800de7e:	f107 0310 	add.w	r3, r7, #16
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	605a      	str	r2, [r3, #4]
 800de88:	609a      	str	r2, [r3, #8]
 800de8a:	60da      	str	r2, [r3, #12]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800de8c:	2301      	movs	r3, #1
 800de8e:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 800de90:	2300      	movs	r3, #0
 800de92:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800de94:	2303      	movs	r3, #3
 800de96:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 800de98:	88fb      	ldrh	r3, [r7, #6]
 800de9a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 800de9c:	f107 0310 	add.w	r3, r7, #16
 800dea0:	4619      	mov	r1, r3
 800dea2:	68b8      	ldr	r0, [r7, #8]
 800dea4:	f7f6 ffa0 	bl	8004de8 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 800dea8:	2300      	movs	r3, #0
 800deaa:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 800deac:	2301      	movs	r3, #1
 800deae:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800deb0:	2303      	movs	r3, #3
 800deb2:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 800deb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800deb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 800deb8:	f107 0310 	add.w	r3, r7, #16
 800debc:	4619      	mov	r1, r3
 800debe:	6838      	ldr	r0, [r7, #0]
 800dec0:	f7f6 ff92 	bl	8004de8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6818      	ldr	r0, [r3, #0]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	891b      	ldrh	r3, [r3, #8]
 800decc:	2201      	movs	r2, #1
 800dece:	4619      	mov	r1, r3
 800ded0:	f7f7 f925 	bl	800511e <HAL_GPIO_WritePin>
  hx711_delay(10);
 800ded4:	200a      	movs	r0, #10
 800ded6:	f7f5 fecb 	bl	8003c70 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6818      	ldr	r0, [r3, #0]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	891b      	ldrh	r3, [r3, #8]
 800dee2:	2200      	movs	r2, #0
 800dee4:	4619      	mov	r1, r3
 800dee6:	f7f7 f91a 	bl	800511e <HAL_GPIO_WritePin>
  hx711_delay(10);
 800deea:	200a      	movs	r0, #10
 800deec:	f7f5 fec0 	bl	8003c70 <HAL_Delay>
  hx711_value(hx711);
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f000 f829 	bl	800df48 <hx711_value>
  hx711_value(hx711);
 800def6:	68f8      	ldr	r0, [r7, #12]
 800def8:	f000 f826 	bl	800df48 <hx711_value>
  //hx711_unlock(hx711);
}
 800defc:	bf00      	nop
 800defe:	3720      	adds	r7, #32
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <hx711_set_gain>:


void hx711_set_gain(hx711_t *hx711, uint8_t gain)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	460b      	mov	r3, r1
 800df0e:	70fb      	strb	r3, [r7, #3]
	switch(gain)
 800df10:	78fb      	ldrb	r3, [r7, #3]
 800df12:	2b80      	cmp	r3, #128	; 0x80
 800df14:	d006      	beq.n	800df24 <hx711_set_gain+0x20>
 800df16:	2b80      	cmp	r3, #128	; 0x80
 800df18:	dc10      	bgt.n	800df3c <hx711_set_gain+0x38>
 800df1a:	2b20      	cmp	r3, #32
 800df1c:	d00a      	beq.n	800df34 <hx711_set_gain+0x30>
 800df1e:	2b40      	cmp	r3, #64	; 0x40
 800df20:	d004      	beq.n	800df2c <hx711_set_gain+0x28>
			    break;
		case 32:
			    hx711->gain = 2;
			    break;
		default:
			break;
 800df22:	e00b      	b.n	800df3c <hx711_set_gain+0x38>
				hx711->gain = 1;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	755a      	strb	r2, [r3, #21]
				break;
 800df2a:	e008      	b.n	800df3e <hx711_set_gain+0x3a>
			    hx711->gain = 3;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2203      	movs	r2, #3
 800df30:	755a      	strb	r2, [r3, #21]
			    break;
 800df32:	e004      	b.n	800df3e <hx711_set_gain+0x3a>
			    hx711->gain = 2;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2202      	movs	r2, #2
 800df38:	755a      	strb	r2, [r3, #21]
			    break;
 800df3a:	e000      	b.n	800df3e <hx711_set_gain+0x3a>
			break;
 800df3c:	bf00      	nop
	}
}
 800df3e:	bf00      	nop
 800df40:	370c      	adds	r7, #12
 800df42:	46bd      	mov	sp, r7
 800df44:	bc80      	pop	{r7}
 800df46:	4770      	bx	lr

0800df48 <hx711_value>:

//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 800df50:	2300      	movs	r3, #0
 800df52:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 800df54:	f7f5 fe82 	bl	8003c5c <HAL_GetTick>
 800df58:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800df5a:	e00b      	b.n	800df74 <hx711_value+0x2c>
  {
    hx711_delay(1);
 800df5c:	2001      	movs	r0, #1
 800df5e:	f7f5 fe87 	bl	8003c70 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 800df62:	f7f5 fe7b 	bl	8003c5c <HAL_GetTick>
 800df66:	4602      	mov	r2, r0
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	2b96      	cmp	r3, #150	; 0x96
 800df6e:	d901      	bls.n	800df74 <hx711_value+0x2c>
      return 0;
 800df70:	2300      	movs	r3, #0
 800df72:	e060      	b.n	800e036 <hx711_value+0xee>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	895b      	ldrh	r3, [r3, #10]
 800df7c:	4619      	mov	r1, r3
 800df7e:	4610      	mov	r0, r2
 800df80:	f7f7 f8b6 	bl	80050f0 <HAL_GPIO_ReadPin>
 800df84:	4603      	mov	r3, r0
 800df86:	2b01      	cmp	r3, #1
 800df88:	d0e8      	beq.n	800df5c <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 800df8a:	2300      	movs	r3, #0
 800df8c:	74fb      	strb	r3, [r7, #19]
 800df8e:	e02a      	b.n	800dfe6 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6818      	ldr	r0, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	891b      	ldrh	r3, [r3, #8]
 800df98:	2201      	movs	r2, #1
 800df9a:	4619      	mov	r1, r3
 800df9c:	f7f7 f8bf 	bl	800511e <HAL_GPIO_WritePin>
    hx711_delay_us();
 800dfa0:	f7ff ff24 	bl	800ddec <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6818      	ldr	r0, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	891b      	ldrh	r3, [r3, #8]
 800dfac:	2200      	movs	r2, #0
 800dfae:	4619      	mov	r1, r3
 800dfb0:	f7f7 f8b5 	bl	800511e <HAL_GPIO_WritePin>
    hx711_delay_us();
 800dfb4:	f7ff ff1a 	bl	800ddec <hx711_delay_us>
    data = data << 1;    
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	005b      	lsls	r3, r3, #1
 800dfbc:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	685a      	ldr	r2, [r3, #4]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	895b      	ldrh	r3, [r3, #10]
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	4610      	mov	r0, r2
 800dfca:	f7f7 f891 	bl	80050f0 <HAL_GPIO_ReadPin>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d102      	bne.n	800dfda <hx711_value+0x92>
      data ++;
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 800dfda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	74fb      	strb	r3, [r7, #19]
 800dfe6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfea:	2b17      	cmp	r3, #23
 800dfec:	ddd0      	ble.n	800df90 <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 800dff4:	617b      	str	r3, [r7, #20]
  for(uint8_t i = 0; i < hx711->gain; i++)
 800dff6:	2300      	movs	r3, #0
 800dff8:	74bb      	strb	r3, [r7, #18]
 800dffa:	e016      	b.n	800e02a <hx711_value+0xe2>
  {
	  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6818      	ldr	r0, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	891b      	ldrh	r3, [r3, #8]
 800e004:	2201      	movs	r2, #1
 800e006:	4619      	mov	r1, r3
 800e008:	f7f7 f889 	bl	800511e <HAL_GPIO_WritePin>
	  hx711_delay_us();
 800e00c:	f7ff feee 	bl	800ddec <hx711_delay_us>
	  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6818      	ldr	r0, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	891b      	ldrh	r3, [r3, #8]
 800e018:	2200      	movs	r2, #0
 800e01a:	4619      	mov	r1, r3
 800e01c:	f7f7 f87f 	bl	800511e <HAL_GPIO_WritePin>
	  hx711_delay_us();
 800e020:	f7ff fee4 	bl	800ddec <hx711_delay_us>
  for(uint8_t i = 0; i < hx711->gain; i++)
 800e024:	7cbb      	ldrb	r3, [r7, #18]
 800e026:	3301      	adds	r3, #1
 800e028:	74bb      	strb	r3, [r7, #18]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	7d5b      	ldrb	r3, [r3, #21]
 800e02e:	7cba      	ldrb	r2, [r7, #18]
 800e030:	429a      	cmp	r2, r3
 800e032:	d3e3      	bcc.n	800dffc <hx711_value+0xb4>
  }
  return data;    
 800e034:	697b      	ldr	r3, [r7, #20]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3718      	adds	r7, #24
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 800e03e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	460b      	mov	r3, r1
 800e04a:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff fee3 	bl	800de18 <hx711_lock>
  int64_t  ave = 0;
 800e052:	f04f 0200 	mov.w	r2, #0
 800e056:	f04f 0300 	mov.w	r3, #0
 800e05a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 800e05e:	2300      	movs	r3, #0
 800e060:	81fb      	strh	r3, [r7, #14]
 800e062:	e014      	b.n	800e08e <hx711_tare+0x50>
  {
    ave += hx711_value(hx711);
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7ff ff6f 	bl	800df48 <hx711_value>
 800e06a:	4603      	mov	r3, r0
 800e06c:	17da      	asrs	r2, r3, #31
 800e06e:	461c      	mov	r4, r3
 800e070:	4615      	mov	r5, r2
 800e072:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e076:	eb12 0804 	adds.w	r8, r2, r4
 800e07a:	eb43 0905 	adc.w	r9, r3, r5
 800e07e:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 800e082:	2005      	movs	r0, #5
 800e084:	f7f5 fdf4 	bl	8003c70 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 800e088:	89fb      	ldrh	r3, [r7, #14]
 800e08a:	3301      	adds	r3, #1
 800e08c:	81fb      	strh	r3, [r7, #14]
 800e08e:	89fa      	ldrh	r2, [r7, #14]
 800e090:	887b      	ldrh	r3, [r7, #2]
 800e092:	429a      	cmp	r2, r3
 800e094:	d3e6      	bcc.n	800e064 <hx711_tare+0x26>
  }
  hx711->offset = (int32_t)(ave / sample);
 800e096:	887b      	ldrh	r3, [r7, #2]
 800e098:	2200      	movs	r2, #0
 800e09a:	469a      	mov	sl, r3
 800e09c:	4693      	mov	fp, r2
 800e09e:	4652      	mov	r2, sl
 800e0a0:	465b      	mov	r3, fp
 800e0a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e0a6:	f7f3 f859 	bl	800115c <__aeabi_ldivmod>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7ff fec3 	bl	800de3e <hx711_unlock>
}
 800e0b8:	bf00      	nop
 800e0ba:	3718      	adds	r7, #24
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0c2:	0000      	movs	r0, r0
 800e0c4:	0000      	movs	r0, r0
	...

0800e0c8 <hx711_so2_result>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_so2_result(hx711_t *hx711, uint16_t sample)
{
 800e0c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0cc:	b088      	sub	sp, #32
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff fe9e 	bl	800de18 <hx711_lock>
  int64_t  ave = 0;
 800e0dc:	f04f 0200 	mov.w	r2, #0
 800e0e0:	f04f 0300 	mov.w	r3, #0
 800e0e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	82fb      	strh	r3, [r7, #22]
 800e0ec:	e014      	b.n	800e118 <hx711_so2_result+0x50>
  {
    ave += hx711_value(hx711);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7ff ff2a 	bl	800df48 <hx711_value>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	17da      	asrs	r2, r3, #31
 800e0f8:	461c      	mov	r4, r3
 800e0fa:	4615      	mov	r5, r2
 800e0fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e100:	eb12 0804 	adds.w	r8, r2, r4
 800e104:	eb43 0905 	adc.w	r9, r3, r5
 800e108:	e9c7 8906 	strd	r8, r9, [r7, #24]
    hx711_delay(5);
 800e10c:	2005      	movs	r0, #5
 800e10e:	f7f5 fdaf 	bl	8003c70 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 800e112:	8afb      	ldrh	r3, [r7, #22]
 800e114:	3301      	adds	r3, #1
 800e116:	82fb      	strh	r3, [r7, #22]
 800e118:	8afa      	ldrh	r2, [r7, #22]
 800e11a:	887b      	ldrh	r3, [r7, #2]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d3e6      	bcc.n	800e0ee <hx711_so2_result+0x26>
  }
  int32_t data = (int32_t)(ave / sample);
 800e120:	887b      	ldrh	r3, [r7, #2]
 800e122:	2200      	movs	r2, #0
 800e124:	469a      	mov	sl, r3
 800e126:	4693      	mov	fp, r2
 800e128:	4652      	mov	r2, sl
 800e12a:	465b      	mov	r3, fp
 800e12c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e130:	f7f3 f814 	bl	800115c <__aeabi_ldivmod>
 800e134:	4602      	mov	r2, r0
 800e136:	460b      	mov	r3, r1
 800e138:	4613      	mov	r3, r2
 800e13a:	60fb      	str	r3, [r7, #12]
  float answer =  (float)((((((((float)data - hx711->offset) * 1.25f) / pow(2, 23)) / 128.0f) / 132) / 28) * pow(10, -9)) / hx711->coef;
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7f2 fdad 	bl	8000c9c <__aeabi_i2f>
 800e142:	4604      	mov	r4, r0
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	4618      	mov	r0, r3
 800e14a:	f7f2 fda7 	bl	8000c9c <__aeabi_i2f>
 800e14e:	4603      	mov	r3, r0
 800e150:	4619      	mov	r1, r3
 800e152:	4620      	mov	r0, r4
 800e154:	f7f2 fcec 	bl	8000b30 <__aeabi_fsub>
 800e158:	4603      	mov	r3, r0
 800e15a:	4931      	ldr	r1, [pc, #196]	; (800e220 <hx711_so2_result+0x158>)
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7f2 fdf1 	bl	8000d44 <__aeabi_fmul>
 800e162:	4603      	mov	r3, r0
 800e164:	4618      	mov	r0, r3
 800e166:	f7f2 f95f 	bl	8000428 <__aeabi_f2d>
 800e16a:	f04f 0200 	mov.w	r2, #0
 800e16e:	4b2d      	ldr	r3, [pc, #180]	; (800e224 <hx711_so2_result+0x15c>)
 800e170:	f7f2 fadc 	bl	800072c <__aeabi_ddiv>
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	4610      	mov	r0, r2
 800e17a:	4619      	mov	r1, r3
 800e17c:	f04f 0200 	mov.w	r2, #0
 800e180:	4b29      	ldr	r3, [pc, #164]	; (800e228 <hx711_so2_result+0x160>)
 800e182:	f7f2 fad3 	bl	800072c <__aeabi_ddiv>
 800e186:	4602      	mov	r2, r0
 800e188:	460b      	mov	r3, r1
 800e18a:	4610      	mov	r0, r2
 800e18c:	4619      	mov	r1, r3
 800e18e:	f04f 0200 	mov.w	r2, #0
 800e192:	4b26      	ldr	r3, [pc, #152]	; (800e22c <hx711_so2_result+0x164>)
 800e194:	f7f2 faca 	bl	800072c <__aeabi_ddiv>
 800e198:	4602      	mov	r2, r0
 800e19a:	460b      	mov	r3, r1
 800e19c:	4610      	mov	r0, r2
 800e19e:	4619      	mov	r1, r3
 800e1a0:	f04f 0200 	mov.w	r2, #0
 800e1a4:	4b22      	ldr	r3, [pc, #136]	; (800e230 <hx711_so2_result+0x168>)
 800e1a6:	f7f2 fac1 	bl	800072c <__aeabi_ddiv>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	a319      	add	r3, pc, #100	; (adr r3, 800e218 <hx711_so2_result+0x150>)
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	f7f2 f98e 	bl	80004d8 <__aeabi_dmul>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	460b      	mov	r3, r1
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	f7f2 fc60 	bl	8000a88 <__aeabi_d2f>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7f2 fe6b 	bl	8000eac <__aeabi_fdiv>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	613b      	str	r3, [r7, #16]
  if(answer < 0)
 800e1da:	f04f 0100 	mov.w	r1, #0
 800e1de:	6938      	ldr	r0, [r7, #16]
 800e1e0:	f7f2 ff4e 	bl	8001080 <__aeabi_fcmplt>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d002      	beq.n	800e1f0 <hx711_so2_result+0x128>
	  answer  = 0;
 800e1ea:	f04f 0300 	mov.w	r3, #0
 800e1ee:	613b      	str	r3, [r7, #16]
  if(answer > 1000)
 800e1f0:	4910      	ldr	r1, [pc, #64]	; (800e234 <hx711_so2_result+0x16c>)
 800e1f2:	6938      	ldr	r0, [r7, #16]
 800e1f4:	f7f2 ff62 	bl	80010bc <__aeabi_fcmpgt>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d001      	beq.n	800e202 <hx711_so2_result+0x13a>
	  answer = 1000;
 800e1fe:	4b0d      	ldr	r3, [pc, #52]	; (800e234 <hx711_so2_result+0x16c>)
 800e200:	613b      	str	r3, [r7, #16]
  hx711_unlock(hx711);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7ff fe1b 	bl	800de3e <hx711_unlock>
  return answer;
 800e208:	693b      	ldr	r3, [r7, #16]
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3720      	adds	r7, #32
 800e20e:	46bd      	mov	sp, r7
 800e210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e214:	f3af 8000 	nop.w
 800e218:	e826d695 	.word	0xe826d695
 800e21c:	3e112e0b 	.word	0x3e112e0b
 800e220:	3fa00000 	.word	0x3fa00000
 800e224:	41600000 	.word	0x41600000
 800e228:	40600000 	.word	0x40600000
 800e22c:	40608000 	.word	0x40608000
 800e230:	403c0000 	.word	0x403c0000
 800e234:	447a0000 	.word	0x447a0000

0800e238 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  hx711->coef = coef;  
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	611a      	str	r2, [r3, #16]
}
 800e248:	bf00      	nop
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bc80      	pop	{r7}
 800e250:	4770      	bx	lr
	...

0800e254 <__errno>:
 800e254:	4b01      	ldr	r3, [pc, #4]	; (800e25c <__errno+0x8>)
 800e256:	6818      	ldr	r0, [r3, #0]
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	200000d8 	.word	0x200000d8

0800e260 <std>:
 800e260:	2300      	movs	r3, #0
 800e262:	b510      	push	{r4, lr}
 800e264:	4604      	mov	r4, r0
 800e266:	e9c0 3300 	strd	r3, r3, [r0]
 800e26a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e26e:	6083      	str	r3, [r0, #8]
 800e270:	8181      	strh	r1, [r0, #12]
 800e272:	6643      	str	r3, [r0, #100]	; 0x64
 800e274:	81c2      	strh	r2, [r0, #14]
 800e276:	6183      	str	r3, [r0, #24]
 800e278:	4619      	mov	r1, r3
 800e27a:	2208      	movs	r2, #8
 800e27c:	305c      	adds	r0, #92	; 0x5c
 800e27e:	f000 f91a 	bl	800e4b6 <memset>
 800e282:	4b05      	ldr	r3, [pc, #20]	; (800e298 <std+0x38>)
 800e284:	6224      	str	r4, [r4, #32]
 800e286:	6263      	str	r3, [r4, #36]	; 0x24
 800e288:	4b04      	ldr	r3, [pc, #16]	; (800e29c <std+0x3c>)
 800e28a:	62a3      	str	r3, [r4, #40]	; 0x28
 800e28c:	4b04      	ldr	r3, [pc, #16]	; (800e2a0 <std+0x40>)
 800e28e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e290:	4b04      	ldr	r3, [pc, #16]	; (800e2a4 <std+0x44>)
 800e292:	6323      	str	r3, [r4, #48]	; 0x30
 800e294:	bd10      	pop	{r4, pc}
 800e296:	bf00      	nop
 800e298:	0800efe5 	.word	0x0800efe5
 800e29c:	0800f007 	.word	0x0800f007
 800e2a0:	0800f03f 	.word	0x0800f03f
 800e2a4:	0800f063 	.word	0x0800f063

0800e2a8 <_cleanup_r>:
 800e2a8:	4901      	ldr	r1, [pc, #4]	; (800e2b0 <_cleanup_r+0x8>)
 800e2aa:	f000 b8af 	b.w	800e40c <_fwalk_reent>
 800e2ae:	bf00      	nop
 800e2b0:	0800fec9 	.word	0x0800fec9

0800e2b4 <__sfmoreglue>:
 800e2b4:	2268      	movs	r2, #104	; 0x68
 800e2b6:	b570      	push	{r4, r5, r6, lr}
 800e2b8:	1e4d      	subs	r5, r1, #1
 800e2ba:	4355      	muls	r5, r2
 800e2bc:	460e      	mov	r6, r1
 800e2be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e2c2:	f000 f921 	bl	800e508 <_malloc_r>
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	b140      	cbz	r0, 800e2dc <__sfmoreglue+0x28>
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	e9c0 1600 	strd	r1, r6, [r0]
 800e2d0:	300c      	adds	r0, #12
 800e2d2:	60a0      	str	r0, [r4, #8]
 800e2d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e2d8:	f000 f8ed 	bl	800e4b6 <memset>
 800e2dc:	4620      	mov	r0, r4
 800e2de:	bd70      	pop	{r4, r5, r6, pc}

0800e2e0 <__sfp_lock_acquire>:
 800e2e0:	4801      	ldr	r0, [pc, #4]	; (800e2e8 <__sfp_lock_acquire+0x8>)
 800e2e2:	f000 b8d8 	b.w	800e496 <__retarget_lock_acquire_recursive>
 800e2e6:	bf00      	nop
 800e2e8:	20001c65 	.word	0x20001c65

0800e2ec <__sfp_lock_release>:
 800e2ec:	4801      	ldr	r0, [pc, #4]	; (800e2f4 <__sfp_lock_release+0x8>)
 800e2ee:	f000 b8d3 	b.w	800e498 <__retarget_lock_release_recursive>
 800e2f2:	bf00      	nop
 800e2f4:	20001c65 	.word	0x20001c65

0800e2f8 <__sinit_lock_acquire>:
 800e2f8:	4801      	ldr	r0, [pc, #4]	; (800e300 <__sinit_lock_acquire+0x8>)
 800e2fa:	f000 b8cc 	b.w	800e496 <__retarget_lock_acquire_recursive>
 800e2fe:	bf00      	nop
 800e300:	20001c66 	.word	0x20001c66

0800e304 <__sinit_lock_release>:
 800e304:	4801      	ldr	r0, [pc, #4]	; (800e30c <__sinit_lock_release+0x8>)
 800e306:	f000 b8c7 	b.w	800e498 <__retarget_lock_release_recursive>
 800e30a:	bf00      	nop
 800e30c:	20001c66 	.word	0x20001c66

0800e310 <__sinit>:
 800e310:	b510      	push	{r4, lr}
 800e312:	4604      	mov	r4, r0
 800e314:	f7ff fff0 	bl	800e2f8 <__sinit_lock_acquire>
 800e318:	69a3      	ldr	r3, [r4, #24]
 800e31a:	b11b      	cbz	r3, 800e324 <__sinit+0x14>
 800e31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e320:	f7ff bff0 	b.w	800e304 <__sinit_lock_release>
 800e324:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e328:	6523      	str	r3, [r4, #80]	; 0x50
 800e32a:	4b13      	ldr	r3, [pc, #76]	; (800e378 <__sinit+0x68>)
 800e32c:	4a13      	ldr	r2, [pc, #76]	; (800e37c <__sinit+0x6c>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	62a2      	str	r2, [r4, #40]	; 0x28
 800e332:	42a3      	cmp	r3, r4
 800e334:	bf08      	it	eq
 800e336:	2301      	moveq	r3, #1
 800e338:	4620      	mov	r0, r4
 800e33a:	bf08      	it	eq
 800e33c:	61a3      	streq	r3, [r4, #24]
 800e33e:	f000 f81f 	bl	800e380 <__sfp>
 800e342:	6060      	str	r0, [r4, #4]
 800e344:	4620      	mov	r0, r4
 800e346:	f000 f81b 	bl	800e380 <__sfp>
 800e34a:	60a0      	str	r0, [r4, #8]
 800e34c:	4620      	mov	r0, r4
 800e34e:	f000 f817 	bl	800e380 <__sfp>
 800e352:	2200      	movs	r2, #0
 800e354:	2104      	movs	r1, #4
 800e356:	60e0      	str	r0, [r4, #12]
 800e358:	6860      	ldr	r0, [r4, #4]
 800e35a:	f7ff ff81 	bl	800e260 <std>
 800e35e:	2201      	movs	r2, #1
 800e360:	2109      	movs	r1, #9
 800e362:	68a0      	ldr	r0, [r4, #8]
 800e364:	f7ff ff7c 	bl	800e260 <std>
 800e368:	2202      	movs	r2, #2
 800e36a:	2112      	movs	r1, #18
 800e36c:	68e0      	ldr	r0, [r4, #12]
 800e36e:	f7ff ff77 	bl	800e260 <std>
 800e372:	2301      	movs	r3, #1
 800e374:	61a3      	str	r3, [r4, #24]
 800e376:	e7d1      	b.n	800e31c <__sinit+0xc>
 800e378:	080114a0 	.word	0x080114a0
 800e37c:	0800e2a9 	.word	0x0800e2a9

0800e380 <__sfp>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	4607      	mov	r7, r0
 800e384:	f7ff ffac 	bl	800e2e0 <__sfp_lock_acquire>
 800e388:	4b1e      	ldr	r3, [pc, #120]	; (800e404 <__sfp+0x84>)
 800e38a:	681e      	ldr	r6, [r3, #0]
 800e38c:	69b3      	ldr	r3, [r6, #24]
 800e38e:	b913      	cbnz	r3, 800e396 <__sfp+0x16>
 800e390:	4630      	mov	r0, r6
 800e392:	f7ff ffbd 	bl	800e310 <__sinit>
 800e396:	3648      	adds	r6, #72	; 0x48
 800e398:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e39c:	3b01      	subs	r3, #1
 800e39e:	d503      	bpl.n	800e3a8 <__sfp+0x28>
 800e3a0:	6833      	ldr	r3, [r6, #0]
 800e3a2:	b30b      	cbz	r3, 800e3e8 <__sfp+0x68>
 800e3a4:	6836      	ldr	r6, [r6, #0]
 800e3a6:	e7f7      	b.n	800e398 <__sfp+0x18>
 800e3a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3ac:	b9d5      	cbnz	r5, 800e3e4 <__sfp+0x64>
 800e3ae:	4b16      	ldr	r3, [pc, #88]	; (800e408 <__sfp+0x88>)
 800e3b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3b4:	60e3      	str	r3, [r4, #12]
 800e3b6:	6665      	str	r5, [r4, #100]	; 0x64
 800e3b8:	f000 f86c 	bl	800e494 <__retarget_lock_init_recursive>
 800e3bc:	f7ff ff96 	bl	800e2ec <__sfp_lock_release>
 800e3c0:	2208      	movs	r2, #8
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e3c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e3cc:	6025      	str	r5, [r4, #0]
 800e3ce:	61a5      	str	r5, [r4, #24]
 800e3d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3d4:	f000 f86f 	bl	800e4b6 <memset>
 800e3d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e3dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3e4:	3468      	adds	r4, #104	; 0x68
 800e3e6:	e7d9      	b.n	800e39c <__sfp+0x1c>
 800e3e8:	2104      	movs	r1, #4
 800e3ea:	4638      	mov	r0, r7
 800e3ec:	f7ff ff62 	bl	800e2b4 <__sfmoreglue>
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	6030      	str	r0, [r6, #0]
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d1d5      	bne.n	800e3a4 <__sfp+0x24>
 800e3f8:	f7ff ff78 	bl	800e2ec <__sfp_lock_release>
 800e3fc:	230c      	movs	r3, #12
 800e3fe:	603b      	str	r3, [r7, #0]
 800e400:	e7ee      	b.n	800e3e0 <__sfp+0x60>
 800e402:	bf00      	nop
 800e404:	080114a0 	.word	0x080114a0
 800e408:	ffff0001 	.word	0xffff0001

0800e40c <_fwalk_reent>:
 800e40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e410:	4606      	mov	r6, r0
 800e412:	4688      	mov	r8, r1
 800e414:	2700      	movs	r7, #0
 800e416:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e41a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e41e:	f1b9 0901 	subs.w	r9, r9, #1
 800e422:	d505      	bpl.n	800e430 <_fwalk_reent+0x24>
 800e424:	6824      	ldr	r4, [r4, #0]
 800e426:	2c00      	cmp	r4, #0
 800e428:	d1f7      	bne.n	800e41a <_fwalk_reent+0xe>
 800e42a:	4638      	mov	r0, r7
 800e42c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e430:	89ab      	ldrh	r3, [r5, #12]
 800e432:	2b01      	cmp	r3, #1
 800e434:	d907      	bls.n	800e446 <_fwalk_reent+0x3a>
 800e436:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e43a:	3301      	adds	r3, #1
 800e43c:	d003      	beq.n	800e446 <_fwalk_reent+0x3a>
 800e43e:	4629      	mov	r1, r5
 800e440:	4630      	mov	r0, r6
 800e442:	47c0      	blx	r8
 800e444:	4307      	orrs	r7, r0
 800e446:	3568      	adds	r5, #104	; 0x68
 800e448:	e7e9      	b.n	800e41e <_fwalk_reent+0x12>
	...

0800e44c <__libc_init_array>:
 800e44c:	b570      	push	{r4, r5, r6, lr}
 800e44e:	2600      	movs	r6, #0
 800e450:	4d0c      	ldr	r5, [pc, #48]	; (800e484 <__libc_init_array+0x38>)
 800e452:	4c0d      	ldr	r4, [pc, #52]	; (800e488 <__libc_init_array+0x3c>)
 800e454:	1b64      	subs	r4, r4, r5
 800e456:	10a4      	asrs	r4, r4, #2
 800e458:	42a6      	cmp	r6, r4
 800e45a:	d109      	bne.n	800e470 <__libc_init_array+0x24>
 800e45c:	f002 fe7e 	bl	801115c <_init>
 800e460:	2600      	movs	r6, #0
 800e462:	4d0a      	ldr	r5, [pc, #40]	; (800e48c <__libc_init_array+0x40>)
 800e464:	4c0a      	ldr	r4, [pc, #40]	; (800e490 <__libc_init_array+0x44>)
 800e466:	1b64      	subs	r4, r4, r5
 800e468:	10a4      	asrs	r4, r4, #2
 800e46a:	42a6      	cmp	r6, r4
 800e46c:	d105      	bne.n	800e47a <__libc_init_array+0x2e>
 800e46e:	bd70      	pop	{r4, r5, r6, pc}
 800e470:	f855 3b04 	ldr.w	r3, [r5], #4
 800e474:	4798      	blx	r3
 800e476:	3601      	adds	r6, #1
 800e478:	e7ee      	b.n	800e458 <__libc_init_array+0xc>
 800e47a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e47e:	4798      	blx	r3
 800e480:	3601      	adds	r6, #1
 800e482:	e7f2      	b.n	800e46a <__libc_init_array+0x1e>
 800e484:	08011824 	.word	0x08011824
 800e488:	08011824 	.word	0x08011824
 800e48c:	08011824 	.word	0x08011824
 800e490:	08011828 	.word	0x08011828

0800e494 <__retarget_lock_init_recursive>:
 800e494:	4770      	bx	lr

0800e496 <__retarget_lock_acquire_recursive>:
 800e496:	4770      	bx	lr

0800e498 <__retarget_lock_release_recursive>:
 800e498:	4770      	bx	lr

0800e49a <memcpy>:
 800e49a:	440a      	add	r2, r1
 800e49c:	4291      	cmp	r1, r2
 800e49e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e4a2:	d100      	bne.n	800e4a6 <memcpy+0xc>
 800e4a4:	4770      	bx	lr
 800e4a6:	b510      	push	{r4, lr}
 800e4a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4ac:	4291      	cmp	r1, r2
 800e4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4b2:	d1f9      	bne.n	800e4a8 <memcpy+0xe>
 800e4b4:	bd10      	pop	{r4, pc}

0800e4b6 <memset>:
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	4402      	add	r2, r0
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d100      	bne.n	800e4c0 <memset+0xa>
 800e4be:	4770      	bx	lr
 800e4c0:	f803 1b01 	strb.w	r1, [r3], #1
 800e4c4:	e7f9      	b.n	800e4ba <memset+0x4>
	...

0800e4c8 <sbrk_aligned>:
 800e4c8:	b570      	push	{r4, r5, r6, lr}
 800e4ca:	4e0e      	ldr	r6, [pc, #56]	; (800e504 <sbrk_aligned+0x3c>)
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	6831      	ldr	r1, [r6, #0]
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	b911      	cbnz	r1, 800e4da <sbrk_aligned+0x12>
 800e4d4:	f000 fd56 	bl	800ef84 <_sbrk_r>
 800e4d8:	6030      	str	r0, [r6, #0]
 800e4da:	4621      	mov	r1, r4
 800e4dc:	4628      	mov	r0, r5
 800e4de:	f000 fd51 	bl	800ef84 <_sbrk_r>
 800e4e2:	1c43      	adds	r3, r0, #1
 800e4e4:	d00a      	beq.n	800e4fc <sbrk_aligned+0x34>
 800e4e6:	1cc4      	adds	r4, r0, #3
 800e4e8:	f024 0403 	bic.w	r4, r4, #3
 800e4ec:	42a0      	cmp	r0, r4
 800e4ee:	d007      	beq.n	800e500 <sbrk_aligned+0x38>
 800e4f0:	1a21      	subs	r1, r4, r0
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f000 fd46 	bl	800ef84 <_sbrk_r>
 800e4f8:	3001      	adds	r0, #1
 800e4fa:	d101      	bne.n	800e500 <sbrk_aligned+0x38>
 800e4fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e500:	4620      	mov	r0, r4
 800e502:	bd70      	pop	{r4, r5, r6, pc}
 800e504:	20001c6c 	.word	0x20001c6c

0800e508 <_malloc_r>:
 800e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50c:	1ccd      	adds	r5, r1, #3
 800e50e:	f025 0503 	bic.w	r5, r5, #3
 800e512:	3508      	adds	r5, #8
 800e514:	2d0c      	cmp	r5, #12
 800e516:	bf38      	it	cc
 800e518:	250c      	movcc	r5, #12
 800e51a:	2d00      	cmp	r5, #0
 800e51c:	4607      	mov	r7, r0
 800e51e:	db01      	blt.n	800e524 <_malloc_r+0x1c>
 800e520:	42a9      	cmp	r1, r5
 800e522:	d905      	bls.n	800e530 <_malloc_r+0x28>
 800e524:	230c      	movs	r3, #12
 800e526:	2600      	movs	r6, #0
 800e528:	603b      	str	r3, [r7, #0]
 800e52a:	4630      	mov	r0, r6
 800e52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e530:	4e2e      	ldr	r6, [pc, #184]	; (800e5ec <_malloc_r+0xe4>)
 800e532:	f001 fd31 	bl	800ff98 <__malloc_lock>
 800e536:	6833      	ldr	r3, [r6, #0]
 800e538:	461c      	mov	r4, r3
 800e53a:	bb34      	cbnz	r4, 800e58a <_malloc_r+0x82>
 800e53c:	4629      	mov	r1, r5
 800e53e:	4638      	mov	r0, r7
 800e540:	f7ff ffc2 	bl	800e4c8 <sbrk_aligned>
 800e544:	1c43      	adds	r3, r0, #1
 800e546:	4604      	mov	r4, r0
 800e548:	d14d      	bne.n	800e5e6 <_malloc_r+0xde>
 800e54a:	6834      	ldr	r4, [r6, #0]
 800e54c:	4626      	mov	r6, r4
 800e54e:	2e00      	cmp	r6, #0
 800e550:	d140      	bne.n	800e5d4 <_malloc_r+0xcc>
 800e552:	6823      	ldr	r3, [r4, #0]
 800e554:	4631      	mov	r1, r6
 800e556:	4638      	mov	r0, r7
 800e558:	eb04 0803 	add.w	r8, r4, r3
 800e55c:	f000 fd12 	bl	800ef84 <_sbrk_r>
 800e560:	4580      	cmp	r8, r0
 800e562:	d13a      	bne.n	800e5da <_malloc_r+0xd2>
 800e564:	6821      	ldr	r1, [r4, #0]
 800e566:	3503      	adds	r5, #3
 800e568:	1a6d      	subs	r5, r5, r1
 800e56a:	f025 0503 	bic.w	r5, r5, #3
 800e56e:	3508      	adds	r5, #8
 800e570:	2d0c      	cmp	r5, #12
 800e572:	bf38      	it	cc
 800e574:	250c      	movcc	r5, #12
 800e576:	4638      	mov	r0, r7
 800e578:	4629      	mov	r1, r5
 800e57a:	f7ff ffa5 	bl	800e4c8 <sbrk_aligned>
 800e57e:	3001      	adds	r0, #1
 800e580:	d02b      	beq.n	800e5da <_malloc_r+0xd2>
 800e582:	6823      	ldr	r3, [r4, #0]
 800e584:	442b      	add	r3, r5
 800e586:	6023      	str	r3, [r4, #0]
 800e588:	e00e      	b.n	800e5a8 <_malloc_r+0xa0>
 800e58a:	6822      	ldr	r2, [r4, #0]
 800e58c:	1b52      	subs	r2, r2, r5
 800e58e:	d41e      	bmi.n	800e5ce <_malloc_r+0xc6>
 800e590:	2a0b      	cmp	r2, #11
 800e592:	d916      	bls.n	800e5c2 <_malloc_r+0xba>
 800e594:	1961      	adds	r1, r4, r5
 800e596:	42a3      	cmp	r3, r4
 800e598:	6025      	str	r5, [r4, #0]
 800e59a:	bf18      	it	ne
 800e59c:	6059      	strne	r1, [r3, #4]
 800e59e:	6863      	ldr	r3, [r4, #4]
 800e5a0:	bf08      	it	eq
 800e5a2:	6031      	streq	r1, [r6, #0]
 800e5a4:	5162      	str	r2, [r4, r5]
 800e5a6:	604b      	str	r3, [r1, #4]
 800e5a8:	4638      	mov	r0, r7
 800e5aa:	f104 060b 	add.w	r6, r4, #11
 800e5ae:	f001 fcf9 	bl	800ffa4 <__malloc_unlock>
 800e5b2:	f026 0607 	bic.w	r6, r6, #7
 800e5b6:	1d23      	adds	r3, r4, #4
 800e5b8:	1af2      	subs	r2, r6, r3
 800e5ba:	d0b6      	beq.n	800e52a <_malloc_r+0x22>
 800e5bc:	1b9b      	subs	r3, r3, r6
 800e5be:	50a3      	str	r3, [r4, r2]
 800e5c0:	e7b3      	b.n	800e52a <_malloc_r+0x22>
 800e5c2:	6862      	ldr	r2, [r4, #4]
 800e5c4:	42a3      	cmp	r3, r4
 800e5c6:	bf0c      	ite	eq
 800e5c8:	6032      	streq	r2, [r6, #0]
 800e5ca:	605a      	strne	r2, [r3, #4]
 800e5cc:	e7ec      	b.n	800e5a8 <_malloc_r+0xa0>
 800e5ce:	4623      	mov	r3, r4
 800e5d0:	6864      	ldr	r4, [r4, #4]
 800e5d2:	e7b2      	b.n	800e53a <_malloc_r+0x32>
 800e5d4:	4634      	mov	r4, r6
 800e5d6:	6876      	ldr	r6, [r6, #4]
 800e5d8:	e7b9      	b.n	800e54e <_malloc_r+0x46>
 800e5da:	230c      	movs	r3, #12
 800e5dc:	4638      	mov	r0, r7
 800e5de:	603b      	str	r3, [r7, #0]
 800e5e0:	f001 fce0 	bl	800ffa4 <__malloc_unlock>
 800e5e4:	e7a1      	b.n	800e52a <_malloc_r+0x22>
 800e5e6:	6025      	str	r5, [r4, #0]
 800e5e8:	e7de      	b.n	800e5a8 <_malloc_r+0xa0>
 800e5ea:	bf00      	nop
 800e5ec:	20001c68 	.word	0x20001c68

0800e5f0 <__cvt>:
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5f6:	461f      	mov	r7, r3
 800e5f8:	bfbb      	ittet	lt
 800e5fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e5fe:	461f      	movlt	r7, r3
 800e600:	2300      	movge	r3, #0
 800e602:	232d      	movlt	r3, #45	; 0x2d
 800e604:	b088      	sub	sp, #32
 800e606:	4614      	mov	r4, r2
 800e608:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e60a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e60c:	7013      	strb	r3, [r2, #0]
 800e60e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e610:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e614:	f023 0820 	bic.w	r8, r3, #32
 800e618:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e61c:	d005      	beq.n	800e62a <__cvt+0x3a>
 800e61e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e622:	d100      	bne.n	800e626 <__cvt+0x36>
 800e624:	3501      	adds	r5, #1
 800e626:	2302      	movs	r3, #2
 800e628:	e000      	b.n	800e62c <__cvt+0x3c>
 800e62a:	2303      	movs	r3, #3
 800e62c:	aa07      	add	r2, sp, #28
 800e62e:	9204      	str	r2, [sp, #16]
 800e630:	aa06      	add	r2, sp, #24
 800e632:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e636:	e9cd 3500 	strd	r3, r5, [sp]
 800e63a:	4622      	mov	r2, r4
 800e63c:	463b      	mov	r3, r7
 800e63e:	f000 fdd3 	bl	800f1e8 <_dtoa_r>
 800e642:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e646:	4606      	mov	r6, r0
 800e648:	d102      	bne.n	800e650 <__cvt+0x60>
 800e64a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e64c:	07db      	lsls	r3, r3, #31
 800e64e:	d522      	bpl.n	800e696 <__cvt+0xa6>
 800e650:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e654:	eb06 0905 	add.w	r9, r6, r5
 800e658:	d110      	bne.n	800e67c <__cvt+0x8c>
 800e65a:	7833      	ldrb	r3, [r6, #0]
 800e65c:	2b30      	cmp	r3, #48	; 0x30
 800e65e:	d10a      	bne.n	800e676 <__cvt+0x86>
 800e660:	2200      	movs	r2, #0
 800e662:	2300      	movs	r3, #0
 800e664:	4620      	mov	r0, r4
 800e666:	4639      	mov	r1, r7
 800e668:	f7f2 f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800e66c:	b918      	cbnz	r0, 800e676 <__cvt+0x86>
 800e66e:	f1c5 0501 	rsb	r5, r5, #1
 800e672:	f8ca 5000 	str.w	r5, [sl]
 800e676:	f8da 3000 	ldr.w	r3, [sl]
 800e67a:	4499      	add	r9, r3
 800e67c:	2200      	movs	r2, #0
 800e67e:	2300      	movs	r3, #0
 800e680:	4620      	mov	r0, r4
 800e682:	4639      	mov	r1, r7
 800e684:	f7f2 f990 	bl	80009a8 <__aeabi_dcmpeq>
 800e688:	b108      	cbz	r0, 800e68e <__cvt+0x9e>
 800e68a:	f8cd 901c 	str.w	r9, [sp, #28]
 800e68e:	2230      	movs	r2, #48	; 0x30
 800e690:	9b07      	ldr	r3, [sp, #28]
 800e692:	454b      	cmp	r3, r9
 800e694:	d307      	bcc.n	800e6a6 <__cvt+0xb6>
 800e696:	4630      	mov	r0, r6
 800e698:	9b07      	ldr	r3, [sp, #28]
 800e69a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e69c:	1b9b      	subs	r3, r3, r6
 800e69e:	6013      	str	r3, [r2, #0]
 800e6a0:	b008      	add	sp, #32
 800e6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6a6:	1c59      	adds	r1, r3, #1
 800e6a8:	9107      	str	r1, [sp, #28]
 800e6aa:	701a      	strb	r2, [r3, #0]
 800e6ac:	e7f0      	b.n	800e690 <__cvt+0xa0>

0800e6ae <__exponent>:
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6b2:	2900      	cmp	r1, #0
 800e6b4:	f803 2b02 	strb.w	r2, [r3], #2
 800e6b8:	bfb6      	itet	lt
 800e6ba:	222d      	movlt	r2, #45	; 0x2d
 800e6bc:	222b      	movge	r2, #43	; 0x2b
 800e6be:	4249      	neglt	r1, r1
 800e6c0:	2909      	cmp	r1, #9
 800e6c2:	7042      	strb	r2, [r0, #1]
 800e6c4:	dd2b      	ble.n	800e71e <__exponent+0x70>
 800e6c6:	f10d 0407 	add.w	r4, sp, #7
 800e6ca:	46a4      	mov	ip, r4
 800e6cc:	270a      	movs	r7, #10
 800e6ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800e6d2:	460a      	mov	r2, r1
 800e6d4:	46a6      	mov	lr, r4
 800e6d6:	fb07 1516 	mls	r5, r7, r6, r1
 800e6da:	2a63      	cmp	r2, #99	; 0x63
 800e6dc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e6e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e6ea:	dcf0      	bgt.n	800e6ce <__exponent+0x20>
 800e6ec:	3130      	adds	r1, #48	; 0x30
 800e6ee:	f1ae 0502 	sub.w	r5, lr, #2
 800e6f2:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	1c44      	adds	r4, r0, #1
 800e6fa:	4561      	cmp	r1, ip
 800e6fc:	d30a      	bcc.n	800e714 <__exponent+0x66>
 800e6fe:	f10d 0209 	add.w	r2, sp, #9
 800e702:	eba2 020e 	sub.w	r2, r2, lr
 800e706:	4565      	cmp	r5, ip
 800e708:	bf88      	it	hi
 800e70a:	2200      	movhi	r2, #0
 800e70c:	4413      	add	r3, r2
 800e70e:	1a18      	subs	r0, r3, r0
 800e710:	b003      	add	sp, #12
 800e712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e714:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e718:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e71c:	e7ed      	b.n	800e6fa <__exponent+0x4c>
 800e71e:	2330      	movs	r3, #48	; 0x30
 800e720:	3130      	adds	r1, #48	; 0x30
 800e722:	7083      	strb	r3, [r0, #2]
 800e724:	70c1      	strb	r1, [r0, #3]
 800e726:	1d03      	adds	r3, r0, #4
 800e728:	e7f1      	b.n	800e70e <__exponent+0x60>
	...

0800e72c <_printf_float>:
 800e72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e730:	b091      	sub	sp, #68	; 0x44
 800e732:	460c      	mov	r4, r1
 800e734:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e738:	4616      	mov	r6, r2
 800e73a:	461f      	mov	r7, r3
 800e73c:	4605      	mov	r5, r0
 800e73e:	f001 fbff 	bl	800ff40 <_localeconv_r>
 800e742:	6803      	ldr	r3, [r0, #0]
 800e744:	4618      	mov	r0, r3
 800e746:	9309      	str	r3, [sp, #36]	; 0x24
 800e748:	f7f1 fd02 	bl	8000150 <strlen>
 800e74c:	2300      	movs	r3, #0
 800e74e:	930e      	str	r3, [sp, #56]	; 0x38
 800e750:	f8d8 3000 	ldr.w	r3, [r8]
 800e754:	900a      	str	r0, [sp, #40]	; 0x28
 800e756:	3307      	adds	r3, #7
 800e758:	f023 0307 	bic.w	r3, r3, #7
 800e75c:	f103 0208 	add.w	r2, r3, #8
 800e760:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e764:	f8d4 b000 	ldr.w	fp, [r4]
 800e768:	f8c8 2000 	str.w	r2, [r8]
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e774:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e778:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e77c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e77e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e782:	4640      	mov	r0, r8
 800e784:	4b9c      	ldr	r3, [pc, #624]	; (800e9f8 <_printf_float+0x2cc>)
 800e786:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e788:	f7f2 f940 	bl	8000a0c <__aeabi_dcmpun>
 800e78c:	bb70      	cbnz	r0, 800e7ec <_printf_float+0xc0>
 800e78e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e792:	4640      	mov	r0, r8
 800e794:	4b98      	ldr	r3, [pc, #608]	; (800e9f8 <_printf_float+0x2cc>)
 800e796:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e798:	f7f2 f91a 	bl	80009d0 <__aeabi_dcmple>
 800e79c:	bb30      	cbnz	r0, 800e7ec <_printf_float+0xc0>
 800e79e:	2200      	movs	r2, #0
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4640      	mov	r0, r8
 800e7a4:	4651      	mov	r1, sl
 800e7a6:	f7f2 f909 	bl	80009bc <__aeabi_dcmplt>
 800e7aa:	b110      	cbz	r0, 800e7b2 <_printf_float+0x86>
 800e7ac:	232d      	movs	r3, #45	; 0x2d
 800e7ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7b2:	4b92      	ldr	r3, [pc, #584]	; (800e9fc <_printf_float+0x2d0>)
 800e7b4:	4892      	ldr	r0, [pc, #584]	; (800ea00 <_printf_float+0x2d4>)
 800e7b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e7ba:	bf94      	ite	ls
 800e7bc:	4698      	movls	r8, r3
 800e7be:	4680      	movhi	r8, r0
 800e7c0:	2303      	movs	r3, #3
 800e7c2:	f04f 0a00 	mov.w	sl, #0
 800e7c6:	6123      	str	r3, [r4, #16]
 800e7c8:	f02b 0304 	bic.w	r3, fp, #4
 800e7cc:	6023      	str	r3, [r4, #0]
 800e7ce:	4633      	mov	r3, r6
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	9700      	str	r7, [sp, #0]
 800e7d6:	aa0f      	add	r2, sp, #60	; 0x3c
 800e7d8:	f000 f9d4 	bl	800eb84 <_printf_common>
 800e7dc:	3001      	adds	r0, #1
 800e7de:	f040 8090 	bne.w	800e902 <_printf_float+0x1d6>
 800e7e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7e6:	b011      	add	sp, #68	; 0x44
 800e7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ec:	4642      	mov	r2, r8
 800e7ee:	4653      	mov	r3, sl
 800e7f0:	4640      	mov	r0, r8
 800e7f2:	4651      	mov	r1, sl
 800e7f4:	f7f2 f90a 	bl	8000a0c <__aeabi_dcmpun>
 800e7f8:	b148      	cbz	r0, 800e80e <_printf_float+0xe2>
 800e7fa:	f1ba 0f00 	cmp.w	sl, #0
 800e7fe:	bfb8      	it	lt
 800e800:	232d      	movlt	r3, #45	; 0x2d
 800e802:	4880      	ldr	r0, [pc, #512]	; (800ea04 <_printf_float+0x2d8>)
 800e804:	bfb8      	it	lt
 800e806:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e80a:	4b7f      	ldr	r3, [pc, #508]	; (800ea08 <_printf_float+0x2dc>)
 800e80c:	e7d3      	b.n	800e7b6 <_printf_float+0x8a>
 800e80e:	6863      	ldr	r3, [r4, #4]
 800e810:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e814:	1c5a      	adds	r2, r3, #1
 800e816:	d142      	bne.n	800e89e <_printf_float+0x172>
 800e818:	2306      	movs	r3, #6
 800e81a:	6063      	str	r3, [r4, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	9206      	str	r2, [sp, #24]
 800e820:	aa0e      	add	r2, sp, #56	; 0x38
 800e822:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e826:	aa0d      	add	r2, sp, #52	; 0x34
 800e828:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e82c:	9203      	str	r2, [sp, #12]
 800e82e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e832:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e836:	6023      	str	r3, [r4, #0]
 800e838:	6863      	ldr	r3, [r4, #4]
 800e83a:	4642      	mov	r2, r8
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	4628      	mov	r0, r5
 800e840:	4653      	mov	r3, sl
 800e842:	910b      	str	r1, [sp, #44]	; 0x2c
 800e844:	f7ff fed4 	bl	800e5f0 <__cvt>
 800e848:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e84a:	4680      	mov	r8, r0
 800e84c:	2947      	cmp	r1, #71	; 0x47
 800e84e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e850:	d108      	bne.n	800e864 <_printf_float+0x138>
 800e852:	1cc8      	adds	r0, r1, #3
 800e854:	db02      	blt.n	800e85c <_printf_float+0x130>
 800e856:	6863      	ldr	r3, [r4, #4]
 800e858:	4299      	cmp	r1, r3
 800e85a:	dd40      	ble.n	800e8de <_printf_float+0x1b2>
 800e85c:	f1a9 0902 	sub.w	r9, r9, #2
 800e860:	fa5f f989 	uxtb.w	r9, r9
 800e864:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e868:	d81f      	bhi.n	800e8aa <_printf_float+0x17e>
 800e86a:	464a      	mov	r2, r9
 800e86c:	3901      	subs	r1, #1
 800e86e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e872:	910d      	str	r1, [sp, #52]	; 0x34
 800e874:	f7ff ff1b 	bl	800e6ae <__exponent>
 800e878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e87a:	4682      	mov	sl, r0
 800e87c:	1813      	adds	r3, r2, r0
 800e87e:	2a01      	cmp	r2, #1
 800e880:	6123      	str	r3, [r4, #16]
 800e882:	dc02      	bgt.n	800e88a <_printf_float+0x15e>
 800e884:	6822      	ldr	r2, [r4, #0]
 800e886:	07d2      	lsls	r2, r2, #31
 800e888:	d501      	bpl.n	800e88e <_printf_float+0x162>
 800e88a:	3301      	adds	r3, #1
 800e88c:	6123      	str	r3, [r4, #16]
 800e88e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e892:	2b00      	cmp	r3, #0
 800e894:	d09b      	beq.n	800e7ce <_printf_float+0xa2>
 800e896:	232d      	movs	r3, #45	; 0x2d
 800e898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e89c:	e797      	b.n	800e7ce <_printf_float+0xa2>
 800e89e:	2947      	cmp	r1, #71	; 0x47
 800e8a0:	d1bc      	bne.n	800e81c <_printf_float+0xf0>
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d1ba      	bne.n	800e81c <_printf_float+0xf0>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	e7b7      	b.n	800e81a <_printf_float+0xee>
 800e8aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e8ae:	d118      	bne.n	800e8e2 <_printf_float+0x1b6>
 800e8b0:	2900      	cmp	r1, #0
 800e8b2:	6863      	ldr	r3, [r4, #4]
 800e8b4:	dd0b      	ble.n	800e8ce <_printf_float+0x1a2>
 800e8b6:	6121      	str	r1, [r4, #16]
 800e8b8:	b913      	cbnz	r3, 800e8c0 <_printf_float+0x194>
 800e8ba:	6822      	ldr	r2, [r4, #0]
 800e8bc:	07d0      	lsls	r0, r2, #31
 800e8be:	d502      	bpl.n	800e8c6 <_printf_float+0x19a>
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	440b      	add	r3, r1
 800e8c4:	6123      	str	r3, [r4, #16]
 800e8c6:	f04f 0a00 	mov.w	sl, #0
 800e8ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800e8cc:	e7df      	b.n	800e88e <_printf_float+0x162>
 800e8ce:	b913      	cbnz	r3, 800e8d6 <_printf_float+0x1aa>
 800e8d0:	6822      	ldr	r2, [r4, #0]
 800e8d2:	07d2      	lsls	r2, r2, #31
 800e8d4:	d501      	bpl.n	800e8da <_printf_float+0x1ae>
 800e8d6:	3302      	adds	r3, #2
 800e8d8:	e7f4      	b.n	800e8c4 <_printf_float+0x198>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e7f2      	b.n	800e8c4 <_printf_float+0x198>
 800e8de:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e8e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8e4:	4299      	cmp	r1, r3
 800e8e6:	db05      	blt.n	800e8f4 <_printf_float+0x1c8>
 800e8e8:	6823      	ldr	r3, [r4, #0]
 800e8ea:	6121      	str	r1, [r4, #16]
 800e8ec:	07d8      	lsls	r0, r3, #31
 800e8ee:	d5ea      	bpl.n	800e8c6 <_printf_float+0x19a>
 800e8f0:	1c4b      	adds	r3, r1, #1
 800e8f2:	e7e7      	b.n	800e8c4 <_printf_float+0x198>
 800e8f4:	2900      	cmp	r1, #0
 800e8f6:	bfcc      	ite	gt
 800e8f8:	2201      	movgt	r2, #1
 800e8fa:	f1c1 0202 	rsble	r2, r1, #2
 800e8fe:	4413      	add	r3, r2
 800e900:	e7e0      	b.n	800e8c4 <_printf_float+0x198>
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	055a      	lsls	r2, r3, #21
 800e906:	d407      	bmi.n	800e918 <_printf_float+0x1ec>
 800e908:	6923      	ldr	r3, [r4, #16]
 800e90a:	4642      	mov	r2, r8
 800e90c:	4631      	mov	r1, r6
 800e90e:	4628      	mov	r0, r5
 800e910:	47b8      	blx	r7
 800e912:	3001      	adds	r0, #1
 800e914:	d12b      	bne.n	800e96e <_printf_float+0x242>
 800e916:	e764      	b.n	800e7e2 <_printf_float+0xb6>
 800e918:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e91c:	f240 80dd 	bls.w	800eada <_printf_float+0x3ae>
 800e920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e924:	2200      	movs	r2, #0
 800e926:	2300      	movs	r3, #0
 800e928:	f7f2 f83e 	bl	80009a8 <__aeabi_dcmpeq>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d033      	beq.n	800e998 <_printf_float+0x26c>
 800e930:	2301      	movs	r3, #1
 800e932:	4631      	mov	r1, r6
 800e934:	4628      	mov	r0, r5
 800e936:	4a35      	ldr	r2, [pc, #212]	; (800ea0c <_printf_float+0x2e0>)
 800e938:	47b8      	blx	r7
 800e93a:	3001      	adds	r0, #1
 800e93c:	f43f af51 	beq.w	800e7e2 <_printf_float+0xb6>
 800e940:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e944:	429a      	cmp	r2, r3
 800e946:	db02      	blt.n	800e94e <_printf_float+0x222>
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	07d8      	lsls	r0, r3, #31
 800e94c:	d50f      	bpl.n	800e96e <_printf_float+0x242>
 800e94e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e952:	4631      	mov	r1, r6
 800e954:	4628      	mov	r0, r5
 800e956:	47b8      	blx	r7
 800e958:	3001      	adds	r0, #1
 800e95a:	f43f af42 	beq.w	800e7e2 <_printf_float+0xb6>
 800e95e:	f04f 0800 	mov.w	r8, #0
 800e962:	f104 091a 	add.w	r9, r4, #26
 800e966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e968:	3b01      	subs	r3, #1
 800e96a:	4543      	cmp	r3, r8
 800e96c:	dc09      	bgt.n	800e982 <_printf_float+0x256>
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	079b      	lsls	r3, r3, #30
 800e972:	f100 8102 	bmi.w	800eb7a <_printf_float+0x44e>
 800e976:	68e0      	ldr	r0, [r4, #12]
 800e978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e97a:	4298      	cmp	r0, r3
 800e97c:	bfb8      	it	lt
 800e97e:	4618      	movlt	r0, r3
 800e980:	e731      	b.n	800e7e6 <_printf_float+0xba>
 800e982:	2301      	movs	r3, #1
 800e984:	464a      	mov	r2, r9
 800e986:	4631      	mov	r1, r6
 800e988:	4628      	mov	r0, r5
 800e98a:	47b8      	blx	r7
 800e98c:	3001      	adds	r0, #1
 800e98e:	f43f af28 	beq.w	800e7e2 <_printf_float+0xb6>
 800e992:	f108 0801 	add.w	r8, r8, #1
 800e996:	e7e6      	b.n	800e966 <_printf_float+0x23a>
 800e998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	dc38      	bgt.n	800ea10 <_printf_float+0x2e4>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	4631      	mov	r1, r6
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	4a19      	ldr	r2, [pc, #100]	; (800ea0c <_printf_float+0x2e0>)
 800e9a6:	47b8      	blx	r7
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	f43f af1a 	beq.w	800e7e2 <_printf_float+0xb6>
 800e9ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	d102      	bne.n	800e9bc <_printf_float+0x290>
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	07d9      	lsls	r1, r3, #31
 800e9ba:	d5d8      	bpl.n	800e96e <_printf_float+0x242>
 800e9bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	47b8      	blx	r7
 800e9c6:	3001      	adds	r0, #1
 800e9c8:	f43f af0b 	beq.w	800e7e2 <_printf_float+0xb6>
 800e9cc:	f04f 0900 	mov.w	r9, #0
 800e9d0:	f104 0a1a 	add.w	sl, r4, #26
 800e9d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9d6:	425b      	negs	r3, r3
 800e9d8:	454b      	cmp	r3, r9
 800e9da:	dc01      	bgt.n	800e9e0 <_printf_float+0x2b4>
 800e9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9de:	e794      	b.n	800e90a <_printf_float+0x1de>
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	4652      	mov	r2, sl
 800e9e4:	4631      	mov	r1, r6
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	47b8      	blx	r7
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	f43f aef9 	beq.w	800e7e2 <_printf_float+0xb6>
 800e9f0:	f109 0901 	add.w	r9, r9, #1
 800e9f4:	e7ee      	b.n	800e9d4 <_printf_float+0x2a8>
 800e9f6:	bf00      	nop
 800e9f8:	7fefffff 	.word	0x7fefffff
 800e9fc:	080114a4 	.word	0x080114a4
 800ea00:	080114a8 	.word	0x080114a8
 800ea04:	080114b0 	.word	0x080114b0
 800ea08:	080114ac 	.word	0x080114ac
 800ea0c:	080114b4 	.word	0x080114b4
 800ea10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea14:	429a      	cmp	r2, r3
 800ea16:	bfa8      	it	ge
 800ea18:	461a      	movge	r2, r3
 800ea1a:	2a00      	cmp	r2, #0
 800ea1c:	4691      	mov	r9, r2
 800ea1e:	dc37      	bgt.n	800ea90 <_printf_float+0x364>
 800ea20:	f04f 0b00 	mov.w	fp, #0
 800ea24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea28:	f104 021a 	add.w	r2, r4, #26
 800ea2c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ea30:	ebaa 0309 	sub.w	r3, sl, r9
 800ea34:	455b      	cmp	r3, fp
 800ea36:	dc33      	bgt.n	800eaa0 <_printf_float+0x374>
 800ea38:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	db3b      	blt.n	800eab8 <_printf_float+0x38c>
 800ea40:	6823      	ldr	r3, [r4, #0]
 800ea42:	07da      	lsls	r2, r3, #31
 800ea44:	d438      	bmi.n	800eab8 <_printf_float+0x38c>
 800ea46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea48:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ea4a:	eba3 020a 	sub.w	r2, r3, sl
 800ea4e:	eba3 0901 	sub.w	r9, r3, r1
 800ea52:	4591      	cmp	r9, r2
 800ea54:	bfa8      	it	ge
 800ea56:	4691      	movge	r9, r2
 800ea58:	f1b9 0f00 	cmp.w	r9, #0
 800ea5c:	dc34      	bgt.n	800eac8 <_printf_float+0x39c>
 800ea5e:	f04f 0800 	mov.w	r8, #0
 800ea62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea66:	f104 0a1a 	add.w	sl, r4, #26
 800ea6a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea6e:	1a9b      	subs	r3, r3, r2
 800ea70:	eba3 0309 	sub.w	r3, r3, r9
 800ea74:	4543      	cmp	r3, r8
 800ea76:	f77f af7a 	ble.w	800e96e <_printf_float+0x242>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	4652      	mov	r2, sl
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4628      	mov	r0, r5
 800ea82:	47b8      	blx	r7
 800ea84:	3001      	adds	r0, #1
 800ea86:	f43f aeac 	beq.w	800e7e2 <_printf_float+0xb6>
 800ea8a:	f108 0801 	add.w	r8, r8, #1
 800ea8e:	e7ec      	b.n	800ea6a <_printf_float+0x33e>
 800ea90:	4613      	mov	r3, r2
 800ea92:	4631      	mov	r1, r6
 800ea94:	4642      	mov	r2, r8
 800ea96:	4628      	mov	r0, r5
 800ea98:	47b8      	blx	r7
 800ea9a:	3001      	adds	r0, #1
 800ea9c:	d1c0      	bne.n	800ea20 <_printf_float+0x2f4>
 800ea9e:	e6a0      	b.n	800e7e2 <_printf_float+0xb6>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	920b      	str	r2, [sp, #44]	; 0x2c
 800eaa8:	47b8      	blx	r7
 800eaaa:	3001      	adds	r0, #1
 800eaac:	f43f ae99 	beq.w	800e7e2 <_printf_float+0xb6>
 800eab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eab2:	f10b 0b01 	add.w	fp, fp, #1
 800eab6:	e7b9      	b.n	800ea2c <_printf_float+0x300>
 800eab8:	4631      	mov	r1, r6
 800eaba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eabe:	4628      	mov	r0, r5
 800eac0:	47b8      	blx	r7
 800eac2:	3001      	adds	r0, #1
 800eac4:	d1bf      	bne.n	800ea46 <_printf_float+0x31a>
 800eac6:	e68c      	b.n	800e7e2 <_printf_float+0xb6>
 800eac8:	464b      	mov	r3, r9
 800eaca:	4631      	mov	r1, r6
 800eacc:	4628      	mov	r0, r5
 800eace:	eb08 020a 	add.w	r2, r8, sl
 800ead2:	47b8      	blx	r7
 800ead4:	3001      	adds	r0, #1
 800ead6:	d1c2      	bne.n	800ea5e <_printf_float+0x332>
 800ead8:	e683      	b.n	800e7e2 <_printf_float+0xb6>
 800eada:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eadc:	2a01      	cmp	r2, #1
 800eade:	dc01      	bgt.n	800eae4 <_printf_float+0x3b8>
 800eae0:	07db      	lsls	r3, r3, #31
 800eae2:	d537      	bpl.n	800eb54 <_printf_float+0x428>
 800eae4:	2301      	movs	r3, #1
 800eae6:	4642      	mov	r2, r8
 800eae8:	4631      	mov	r1, r6
 800eaea:	4628      	mov	r0, r5
 800eaec:	47b8      	blx	r7
 800eaee:	3001      	adds	r0, #1
 800eaf0:	f43f ae77 	beq.w	800e7e2 <_printf_float+0xb6>
 800eaf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eaf8:	4631      	mov	r1, r6
 800eafa:	4628      	mov	r0, r5
 800eafc:	47b8      	blx	r7
 800eafe:	3001      	adds	r0, #1
 800eb00:	f43f ae6f 	beq.w	800e7e2 <_printf_float+0xb6>
 800eb04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb08:	2200      	movs	r2, #0
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	f7f1 ff4c 	bl	80009a8 <__aeabi_dcmpeq>
 800eb10:	b9d8      	cbnz	r0, 800eb4a <_printf_float+0x41e>
 800eb12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb14:	f108 0201 	add.w	r2, r8, #1
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	4631      	mov	r1, r6
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	47b8      	blx	r7
 800eb20:	3001      	adds	r0, #1
 800eb22:	d10e      	bne.n	800eb42 <_printf_float+0x416>
 800eb24:	e65d      	b.n	800e7e2 <_printf_float+0xb6>
 800eb26:	2301      	movs	r3, #1
 800eb28:	464a      	mov	r2, r9
 800eb2a:	4631      	mov	r1, r6
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	47b8      	blx	r7
 800eb30:	3001      	adds	r0, #1
 800eb32:	f43f ae56 	beq.w	800e7e2 <_printf_float+0xb6>
 800eb36:	f108 0801 	add.w	r8, r8, #1
 800eb3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	4543      	cmp	r3, r8
 800eb40:	dcf1      	bgt.n	800eb26 <_printf_float+0x3fa>
 800eb42:	4653      	mov	r3, sl
 800eb44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb48:	e6e0      	b.n	800e90c <_printf_float+0x1e0>
 800eb4a:	f04f 0800 	mov.w	r8, #0
 800eb4e:	f104 091a 	add.w	r9, r4, #26
 800eb52:	e7f2      	b.n	800eb3a <_printf_float+0x40e>
 800eb54:	2301      	movs	r3, #1
 800eb56:	4642      	mov	r2, r8
 800eb58:	e7df      	b.n	800eb1a <_printf_float+0x3ee>
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	464a      	mov	r2, r9
 800eb5e:	4631      	mov	r1, r6
 800eb60:	4628      	mov	r0, r5
 800eb62:	47b8      	blx	r7
 800eb64:	3001      	adds	r0, #1
 800eb66:	f43f ae3c 	beq.w	800e7e2 <_printf_float+0xb6>
 800eb6a:	f108 0801 	add.w	r8, r8, #1
 800eb6e:	68e3      	ldr	r3, [r4, #12]
 800eb70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eb72:	1a5b      	subs	r3, r3, r1
 800eb74:	4543      	cmp	r3, r8
 800eb76:	dcf0      	bgt.n	800eb5a <_printf_float+0x42e>
 800eb78:	e6fd      	b.n	800e976 <_printf_float+0x24a>
 800eb7a:	f04f 0800 	mov.w	r8, #0
 800eb7e:	f104 0919 	add.w	r9, r4, #25
 800eb82:	e7f4      	b.n	800eb6e <_printf_float+0x442>

0800eb84 <_printf_common>:
 800eb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb88:	4616      	mov	r6, r2
 800eb8a:	4699      	mov	r9, r3
 800eb8c:	688a      	ldr	r2, [r1, #8]
 800eb8e:	690b      	ldr	r3, [r1, #16]
 800eb90:	4607      	mov	r7, r0
 800eb92:	4293      	cmp	r3, r2
 800eb94:	bfb8      	it	lt
 800eb96:	4613      	movlt	r3, r2
 800eb98:	6033      	str	r3, [r6, #0]
 800eb9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb9e:	460c      	mov	r4, r1
 800eba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eba4:	b10a      	cbz	r2, 800ebaa <_printf_common+0x26>
 800eba6:	3301      	adds	r3, #1
 800eba8:	6033      	str	r3, [r6, #0]
 800ebaa:	6823      	ldr	r3, [r4, #0]
 800ebac:	0699      	lsls	r1, r3, #26
 800ebae:	bf42      	ittt	mi
 800ebb0:	6833      	ldrmi	r3, [r6, #0]
 800ebb2:	3302      	addmi	r3, #2
 800ebb4:	6033      	strmi	r3, [r6, #0]
 800ebb6:	6825      	ldr	r5, [r4, #0]
 800ebb8:	f015 0506 	ands.w	r5, r5, #6
 800ebbc:	d106      	bne.n	800ebcc <_printf_common+0x48>
 800ebbe:	f104 0a19 	add.w	sl, r4, #25
 800ebc2:	68e3      	ldr	r3, [r4, #12]
 800ebc4:	6832      	ldr	r2, [r6, #0]
 800ebc6:	1a9b      	subs	r3, r3, r2
 800ebc8:	42ab      	cmp	r3, r5
 800ebca:	dc28      	bgt.n	800ec1e <_printf_common+0x9a>
 800ebcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebd0:	1e13      	subs	r3, r2, #0
 800ebd2:	6822      	ldr	r2, [r4, #0]
 800ebd4:	bf18      	it	ne
 800ebd6:	2301      	movne	r3, #1
 800ebd8:	0692      	lsls	r2, r2, #26
 800ebda:	d42d      	bmi.n	800ec38 <_printf_common+0xb4>
 800ebdc:	4649      	mov	r1, r9
 800ebde:	4638      	mov	r0, r7
 800ebe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebe4:	47c0      	blx	r8
 800ebe6:	3001      	adds	r0, #1
 800ebe8:	d020      	beq.n	800ec2c <_printf_common+0xa8>
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	68e5      	ldr	r5, [r4, #12]
 800ebee:	f003 0306 	and.w	r3, r3, #6
 800ebf2:	2b04      	cmp	r3, #4
 800ebf4:	bf18      	it	ne
 800ebf6:	2500      	movne	r5, #0
 800ebf8:	6832      	ldr	r2, [r6, #0]
 800ebfa:	f04f 0600 	mov.w	r6, #0
 800ebfe:	68a3      	ldr	r3, [r4, #8]
 800ec00:	bf08      	it	eq
 800ec02:	1aad      	subeq	r5, r5, r2
 800ec04:	6922      	ldr	r2, [r4, #16]
 800ec06:	bf08      	it	eq
 800ec08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	bfc4      	itt	gt
 800ec10:	1a9b      	subgt	r3, r3, r2
 800ec12:	18ed      	addgt	r5, r5, r3
 800ec14:	341a      	adds	r4, #26
 800ec16:	42b5      	cmp	r5, r6
 800ec18:	d11a      	bne.n	800ec50 <_printf_common+0xcc>
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	e008      	b.n	800ec30 <_printf_common+0xac>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	4652      	mov	r2, sl
 800ec22:	4649      	mov	r1, r9
 800ec24:	4638      	mov	r0, r7
 800ec26:	47c0      	blx	r8
 800ec28:	3001      	adds	r0, #1
 800ec2a:	d103      	bne.n	800ec34 <_printf_common+0xb0>
 800ec2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec34:	3501      	adds	r5, #1
 800ec36:	e7c4      	b.n	800ebc2 <_printf_common+0x3e>
 800ec38:	2030      	movs	r0, #48	; 0x30
 800ec3a:	18e1      	adds	r1, r4, r3
 800ec3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec40:	1c5a      	adds	r2, r3, #1
 800ec42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec46:	4422      	add	r2, r4
 800ec48:	3302      	adds	r3, #2
 800ec4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec4e:	e7c5      	b.n	800ebdc <_printf_common+0x58>
 800ec50:	2301      	movs	r3, #1
 800ec52:	4622      	mov	r2, r4
 800ec54:	4649      	mov	r1, r9
 800ec56:	4638      	mov	r0, r7
 800ec58:	47c0      	blx	r8
 800ec5a:	3001      	adds	r0, #1
 800ec5c:	d0e6      	beq.n	800ec2c <_printf_common+0xa8>
 800ec5e:	3601      	adds	r6, #1
 800ec60:	e7d9      	b.n	800ec16 <_printf_common+0x92>
	...

0800ec64 <_printf_i>:
 800ec64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec68:	7e0f      	ldrb	r7, [r1, #24]
 800ec6a:	4691      	mov	r9, r2
 800ec6c:	2f78      	cmp	r7, #120	; 0x78
 800ec6e:	4680      	mov	r8, r0
 800ec70:	460c      	mov	r4, r1
 800ec72:	469a      	mov	sl, r3
 800ec74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec7a:	d807      	bhi.n	800ec8c <_printf_i+0x28>
 800ec7c:	2f62      	cmp	r7, #98	; 0x62
 800ec7e:	d80a      	bhi.n	800ec96 <_printf_i+0x32>
 800ec80:	2f00      	cmp	r7, #0
 800ec82:	f000 80d9 	beq.w	800ee38 <_printf_i+0x1d4>
 800ec86:	2f58      	cmp	r7, #88	; 0x58
 800ec88:	f000 80a4 	beq.w	800edd4 <_printf_i+0x170>
 800ec8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec94:	e03a      	b.n	800ed0c <_printf_i+0xa8>
 800ec96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec9a:	2b15      	cmp	r3, #21
 800ec9c:	d8f6      	bhi.n	800ec8c <_printf_i+0x28>
 800ec9e:	a101      	add	r1, pc, #4	; (adr r1, 800eca4 <_printf_i+0x40>)
 800eca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eca4:	0800ecfd 	.word	0x0800ecfd
 800eca8:	0800ed11 	.word	0x0800ed11
 800ecac:	0800ec8d 	.word	0x0800ec8d
 800ecb0:	0800ec8d 	.word	0x0800ec8d
 800ecb4:	0800ec8d 	.word	0x0800ec8d
 800ecb8:	0800ec8d 	.word	0x0800ec8d
 800ecbc:	0800ed11 	.word	0x0800ed11
 800ecc0:	0800ec8d 	.word	0x0800ec8d
 800ecc4:	0800ec8d 	.word	0x0800ec8d
 800ecc8:	0800ec8d 	.word	0x0800ec8d
 800eccc:	0800ec8d 	.word	0x0800ec8d
 800ecd0:	0800ee1f 	.word	0x0800ee1f
 800ecd4:	0800ed41 	.word	0x0800ed41
 800ecd8:	0800ee01 	.word	0x0800ee01
 800ecdc:	0800ec8d 	.word	0x0800ec8d
 800ece0:	0800ec8d 	.word	0x0800ec8d
 800ece4:	0800ee41 	.word	0x0800ee41
 800ece8:	0800ec8d 	.word	0x0800ec8d
 800ecec:	0800ed41 	.word	0x0800ed41
 800ecf0:	0800ec8d 	.word	0x0800ec8d
 800ecf4:	0800ec8d 	.word	0x0800ec8d
 800ecf8:	0800ee09 	.word	0x0800ee09
 800ecfc:	682b      	ldr	r3, [r5, #0]
 800ecfe:	1d1a      	adds	r2, r3, #4
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	602a      	str	r2, [r5, #0]
 800ed04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e0a4      	b.n	800ee5a <_printf_i+0x1f6>
 800ed10:	6820      	ldr	r0, [r4, #0]
 800ed12:	6829      	ldr	r1, [r5, #0]
 800ed14:	0606      	lsls	r6, r0, #24
 800ed16:	f101 0304 	add.w	r3, r1, #4
 800ed1a:	d50a      	bpl.n	800ed32 <_printf_i+0xce>
 800ed1c:	680e      	ldr	r6, [r1, #0]
 800ed1e:	602b      	str	r3, [r5, #0]
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	da03      	bge.n	800ed2c <_printf_i+0xc8>
 800ed24:	232d      	movs	r3, #45	; 0x2d
 800ed26:	4276      	negs	r6, r6
 800ed28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed2c:	230a      	movs	r3, #10
 800ed2e:	485e      	ldr	r0, [pc, #376]	; (800eea8 <_printf_i+0x244>)
 800ed30:	e019      	b.n	800ed66 <_printf_i+0x102>
 800ed32:	680e      	ldr	r6, [r1, #0]
 800ed34:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed38:	602b      	str	r3, [r5, #0]
 800ed3a:	bf18      	it	ne
 800ed3c:	b236      	sxthne	r6, r6
 800ed3e:	e7ef      	b.n	800ed20 <_printf_i+0xbc>
 800ed40:	682b      	ldr	r3, [r5, #0]
 800ed42:	6820      	ldr	r0, [r4, #0]
 800ed44:	1d19      	adds	r1, r3, #4
 800ed46:	6029      	str	r1, [r5, #0]
 800ed48:	0601      	lsls	r1, r0, #24
 800ed4a:	d501      	bpl.n	800ed50 <_printf_i+0xec>
 800ed4c:	681e      	ldr	r6, [r3, #0]
 800ed4e:	e002      	b.n	800ed56 <_printf_i+0xf2>
 800ed50:	0646      	lsls	r6, r0, #25
 800ed52:	d5fb      	bpl.n	800ed4c <_printf_i+0xe8>
 800ed54:	881e      	ldrh	r6, [r3, #0]
 800ed56:	2f6f      	cmp	r7, #111	; 0x6f
 800ed58:	bf0c      	ite	eq
 800ed5a:	2308      	moveq	r3, #8
 800ed5c:	230a      	movne	r3, #10
 800ed5e:	4852      	ldr	r0, [pc, #328]	; (800eea8 <_printf_i+0x244>)
 800ed60:	2100      	movs	r1, #0
 800ed62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed66:	6865      	ldr	r5, [r4, #4]
 800ed68:	2d00      	cmp	r5, #0
 800ed6a:	bfa8      	it	ge
 800ed6c:	6821      	ldrge	r1, [r4, #0]
 800ed6e:	60a5      	str	r5, [r4, #8]
 800ed70:	bfa4      	itt	ge
 800ed72:	f021 0104 	bicge.w	r1, r1, #4
 800ed76:	6021      	strge	r1, [r4, #0]
 800ed78:	b90e      	cbnz	r6, 800ed7e <_printf_i+0x11a>
 800ed7a:	2d00      	cmp	r5, #0
 800ed7c:	d04d      	beq.n	800ee1a <_printf_i+0x1b6>
 800ed7e:	4615      	mov	r5, r2
 800ed80:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed84:	fb03 6711 	mls	r7, r3, r1, r6
 800ed88:	5dc7      	ldrb	r7, [r0, r7]
 800ed8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed8e:	4637      	mov	r7, r6
 800ed90:	42bb      	cmp	r3, r7
 800ed92:	460e      	mov	r6, r1
 800ed94:	d9f4      	bls.n	800ed80 <_printf_i+0x11c>
 800ed96:	2b08      	cmp	r3, #8
 800ed98:	d10b      	bne.n	800edb2 <_printf_i+0x14e>
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	07de      	lsls	r6, r3, #31
 800ed9e:	d508      	bpl.n	800edb2 <_printf_i+0x14e>
 800eda0:	6923      	ldr	r3, [r4, #16]
 800eda2:	6861      	ldr	r1, [r4, #4]
 800eda4:	4299      	cmp	r1, r3
 800eda6:	bfde      	ittt	le
 800eda8:	2330      	movle	r3, #48	; 0x30
 800edaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800edae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800edb2:	1b52      	subs	r2, r2, r5
 800edb4:	6122      	str	r2, [r4, #16]
 800edb6:	464b      	mov	r3, r9
 800edb8:	4621      	mov	r1, r4
 800edba:	4640      	mov	r0, r8
 800edbc:	f8cd a000 	str.w	sl, [sp]
 800edc0:	aa03      	add	r2, sp, #12
 800edc2:	f7ff fedf 	bl	800eb84 <_printf_common>
 800edc6:	3001      	adds	r0, #1
 800edc8:	d14c      	bne.n	800ee64 <_printf_i+0x200>
 800edca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edce:	b004      	add	sp, #16
 800edd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edd4:	4834      	ldr	r0, [pc, #208]	; (800eea8 <_printf_i+0x244>)
 800edd6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800edda:	6829      	ldr	r1, [r5, #0]
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	f851 6b04 	ldr.w	r6, [r1], #4
 800ede2:	6029      	str	r1, [r5, #0]
 800ede4:	061d      	lsls	r5, r3, #24
 800ede6:	d514      	bpl.n	800ee12 <_printf_i+0x1ae>
 800ede8:	07df      	lsls	r7, r3, #31
 800edea:	bf44      	itt	mi
 800edec:	f043 0320 	orrmi.w	r3, r3, #32
 800edf0:	6023      	strmi	r3, [r4, #0]
 800edf2:	b91e      	cbnz	r6, 800edfc <_printf_i+0x198>
 800edf4:	6823      	ldr	r3, [r4, #0]
 800edf6:	f023 0320 	bic.w	r3, r3, #32
 800edfa:	6023      	str	r3, [r4, #0]
 800edfc:	2310      	movs	r3, #16
 800edfe:	e7af      	b.n	800ed60 <_printf_i+0xfc>
 800ee00:	6823      	ldr	r3, [r4, #0]
 800ee02:	f043 0320 	orr.w	r3, r3, #32
 800ee06:	6023      	str	r3, [r4, #0]
 800ee08:	2378      	movs	r3, #120	; 0x78
 800ee0a:	4828      	ldr	r0, [pc, #160]	; (800eeac <_printf_i+0x248>)
 800ee0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee10:	e7e3      	b.n	800edda <_printf_i+0x176>
 800ee12:	0659      	lsls	r1, r3, #25
 800ee14:	bf48      	it	mi
 800ee16:	b2b6      	uxthmi	r6, r6
 800ee18:	e7e6      	b.n	800ede8 <_printf_i+0x184>
 800ee1a:	4615      	mov	r5, r2
 800ee1c:	e7bb      	b.n	800ed96 <_printf_i+0x132>
 800ee1e:	682b      	ldr	r3, [r5, #0]
 800ee20:	6826      	ldr	r6, [r4, #0]
 800ee22:	1d18      	adds	r0, r3, #4
 800ee24:	6961      	ldr	r1, [r4, #20]
 800ee26:	6028      	str	r0, [r5, #0]
 800ee28:	0635      	lsls	r5, r6, #24
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	d501      	bpl.n	800ee32 <_printf_i+0x1ce>
 800ee2e:	6019      	str	r1, [r3, #0]
 800ee30:	e002      	b.n	800ee38 <_printf_i+0x1d4>
 800ee32:	0670      	lsls	r0, r6, #25
 800ee34:	d5fb      	bpl.n	800ee2e <_printf_i+0x1ca>
 800ee36:	8019      	strh	r1, [r3, #0]
 800ee38:	2300      	movs	r3, #0
 800ee3a:	4615      	mov	r5, r2
 800ee3c:	6123      	str	r3, [r4, #16]
 800ee3e:	e7ba      	b.n	800edb6 <_printf_i+0x152>
 800ee40:	682b      	ldr	r3, [r5, #0]
 800ee42:	2100      	movs	r1, #0
 800ee44:	1d1a      	adds	r2, r3, #4
 800ee46:	602a      	str	r2, [r5, #0]
 800ee48:	681d      	ldr	r5, [r3, #0]
 800ee4a:	6862      	ldr	r2, [r4, #4]
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	f001 f895 	bl	800ff7c <memchr>
 800ee52:	b108      	cbz	r0, 800ee58 <_printf_i+0x1f4>
 800ee54:	1b40      	subs	r0, r0, r5
 800ee56:	6060      	str	r0, [r4, #4]
 800ee58:	6863      	ldr	r3, [r4, #4]
 800ee5a:	6123      	str	r3, [r4, #16]
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee62:	e7a8      	b.n	800edb6 <_printf_i+0x152>
 800ee64:	462a      	mov	r2, r5
 800ee66:	4649      	mov	r1, r9
 800ee68:	4640      	mov	r0, r8
 800ee6a:	6923      	ldr	r3, [r4, #16]
 800ee6c:	47d0      	blx	sl
 800ee6e:	3001      	adds	r0, #1
 800ee70:	d0ab      	beq.n	800edca <_printf_i+0x166>
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	079b      	lsls	r3, r3, #30
 800ee76:	d413      	bmi.n	800eea0 <_printf_i+0x23c>
 800ee78:	68e0      	ldr	r0, [r4, #12]
 800ee7a:	9b03      	ldr	r3, [sp, #12]
 800ee7c:	4298      	cmp	r0, r3
 800ee7e:	bfb8      	it	lt
 800ee80:	4618      	movlt	r0, r3
 800ee82:	e7a4      	b.n	800edce <_printf_i+0x16a>
 800ee84:	2301      	movs	r3, #1
 800ee86:	4632      	mov	r2, r6
 800ee88:	4649      	mov	r1, r9
 800ee8a:	4640      	mov	r0, r8
 800ee8c:	47d0      	blx	sl
 800ee8e:	3001      	adds	r0, #1
 800ee90:	d09b      	beq.n	800edca <_printf_i+0x166>
 800ee92:	3501      	adds	r5, #1
 800ee94:	68e3      	ldr	r3, [r4, #12]
 800ee96:	9903      	ldr	r1, [sp, #12]
 800ee98:	1a5b      	subs	r3, r3, r1
 800ee9a:	42ab      	cmp	r3, r5
 800ee9c:	dcf2      	bgt.n	800ee84 <_printf_i+0x220>
 800ee9e:	e7eb      	b.n	800ee78 <_printf_i+0x214>
 800eea0:	2500      	movs	r5, #0
 800eea2:	f104 0619 	add.w	r6, r4, #25
 800eea6:	e7f5      	b.n	800ee94 <_printf_i+0x230>
 800eea8:	080114b6 	.word	0x080114b6
 800eeac:	080114c7 	.word	0x080114c7

0800eeb0 <cleanup_glue>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	6809      	ldr	r1, [r1, #0]
 800eeb6:	4605      	mov	r5, r0
 800eeb8:	b109      	cbz	r1, 800eebe <cleanup_glue+0xe>
 800eeba:	f7ff fff9 	bl	800eeb0 <cleanup_glue>
 800eebe:	4621      	mov	r1, r4
 800eec0:	4628      	mov	r0, r5
 800eec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eec6:	f001 bc09 	b.w	80106dc <_free_r>
	...

0800eecc <_reclaim_reent>:
 800eecc:	4b2c      	ldr	r3, [pc, #176]	; (800ef80 <_reclaim_reent+0xb4>)
 800eece:	b570      	push	{r4, r5, r6, lr}
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4604      	mov	r4, r0
 800eed4:	4283      	cmp	r3, r0
 800eed6:	d051      	beq.n	800ef7c <_reclaim_reent+0xb0>
 800eed8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eeda:	b143      	cbz	r3, 800eeee <_reclaim_reent+0x22>
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d14a      	bne.n	800ef78 <_reclaim_reent+0xac>
 800eee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eee4:	6819      	ldr	r1, [r3, #0]
 800eee6:	b111      	cbz	r1, 800eeee <_reclaim_reent+0x22>
 800eee8:	4620      	mov	r0, r4
 800eeea:	f001 fbf7 	bl	80106dc <_free_r>
 800eeee:	6961      	ldr	r1, [r4, #20]
 800eef0:	b111      	cbz	r1, 800eef8 <_reclaim_reent+0x2c>
 800eef2:	4620      	mov	r0, r4
 800eef4:	f001 fbf2 	bl	80106dc <_free_r>
 800eef8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eefa:	b111      	cbz	r1, 800ef02 <_reclaim_reent+0x36>
 800eefc:	4620      	mov	r0, r4
 800eefe:	f001 fbed 	bl	80106dc <_free_r>
 800ef02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef04:	b111      	cbz	r1, 800ef0c <_reclaim_reent+0x40>
 800ef06:	4620      	mov	r0, r4
 800ef08:	f001 fbe8 	bl	80106dc <_free_r>
 800ef0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ef0e:	b111      	cbz	r1, 800ef16 <_reclaim_reent+0x4a>
 800ef10:	4620      	mov	r0, r4
 800ef12:	f001 fbe3 	bl	80106dc <_free_r>
 800ef16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef18:	b111      	cbz	r1, 800ef20 <_reclaim_reent+0x54>
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f001 fbde 	bl	80106dc <_free_r>
 800ef20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ef22:	b111      	cbz	r1, 800ef2a <_reclaim_reent+0x5e>
 800ef24:	4620      	mov	r0, r4
 800ef26:	f001 fbd9 	bl	80106dc <_free_r>
 800ef2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ef2c:	b111      	cbz	r1, 800ef34 <_reclaim_reent+0x68>
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f001 fbd4 	bl	80106dc <_free_r>
 800ef34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef36:	b111      	cbz	r1, 800ef3e <_reclaim_reent+0x72>
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f001 fbcf 	bl	80106dc <_free_r>
 800ef3e:	69a3      	ldr	r3, [r4, #24]
 800ef40:	b1e3      	cbz	r3, 800ef7c <_reclaim_reent+0xb0>
 800ef42:	4620      	mov	r0, r4
 800ef44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef46:	4798      	blx	r3
 800ef48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ef4a:	b1b9      	cbz	r1, 800ef7c <_reclaim_reent+0xb0>
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef52:	f7ff bfad 	b.w	800eeb0 <cleanup_glue>
 800ef56:	5949      	ldr	r1, [r1, r5]
 800ef58:	b941      	cbnz	r1, 800ef6c <_reclaim_reent+0xa0>
 800ef5a:	3504      	adds	r5, #4
 800ef5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef5e:	2d80      	cmp	r5, #128	; 0x80
 800ef60:	68d9      	ldr	r1, [r3, #12]
 800ef62:	d1f8      	bne.n	800ef56 <_reclaim_reent+0x8a>
 800ef64:	4620      	mov	r0, r4
 800ef66:	f001 fbb9 	bl	80106dc <_free_r>
 800ef6a:	e7ba      	b.n	800eee2 <_reclaim_reent+0x16>
 800ef6c:	680e      	ldr	r6, [r1, #0]
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f001 fbb4 	bl	80106dc <_free_r>
 800ef74:	4631      	mov	r1, r6
 800ef76:	e7ef      	b.n	800ef58 <_reclaim_reent+0x8c>
 800ef78:	2500      	movs	r5, #0
 800ef7a:	e7ef      	b.n	800ef5c <_reclaim_reent+0x90>
 800ef7c:	bd70      	pop	{r4, r5, r6, pc}
 800ef7e:	bf00      	nop
 800ef80:	200000d8 	.word	0x200000d8

0800ef84 <_sbrk_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	2300      	movs	r3, #0
 800ef88:	4d05      	ldr	r5, [pc, #20]	; (800efa0 <_sbrk_r+0x1c>)
 800ef8a:	4604      	mov	r4, r0
 800ef8c:	4608      	mov	r0, r1
 800ef8e:	602b      	str	r3, [r5, #0]
 800ef90:	f7f3 fa06 	bl	80023a0 <_sbrk>
 800ef94:	1c43      	adds	r3, r0, #1
 800ef96:	d102      	bne.n	800ef9e <_sbrk_r+0x1a>
 800ef98:	682b      	ldr	r3, [r5, #0]
 800ef9a:	b103      	cbz	r3, 800ef9e <_sbrk_r+0x1a>
 800ef9c:	6023      	str	r3, [r4, #0]
 800ef9e:	bd38      	pop	{r3, r4, r5, pc}
 800efa0:	20001c70 	.word	0x20001c70

0800efa4 <siprintf>:
 800efa4:	b40e      	push	{r1, r2, r3}
 800efa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efaa:	b500      	push	{lr}
 800efac:	b09c      	sub	sp, #112	; 0x70
 800efae:	ab1d      	add	r3, sp, #116	; 0x74
 800efb0:	9002      	str	r0, [sp, #8]
 800efb2:	9006      	str	r0, [sp, #24]
 800efb4:	9107      	str	r1, [sp, #28]
 800efb6:	9104      	str	r1, [sp, #16]
 800efb8:	4808      	ldr	r0, [pc, #32]	; (800efdc <siprintf+0x38>)
 800efba:	4909      	ldr	r1, [pc, #36]	; (800efe0 <siprintf+0x3c>)
 800efbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc0:	9105      	str	r1, [sp, #20]
 800efc2:	6800      	ldr	r0, [r0, #0]
 800efc4:	a902      	add	r1, sp, #8
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	f001 fc2c 	bl	8010824 <_svfiprintf_r>
 800efcc:	2200      	movs	r2, #0
 800efce:	9b02      	ldr	r3, [sp, #8]
 800efd0:	701a      	strb	r2, [r3, #0]
 800efd2:	b01c      	add	sp, #112	; 0x70
 800efd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800efd8:	b003      	add	sp, #12
 800efda:	4770      	bx	lr
 800efdc:	200000d8 	.word	0x200000d8
 800efe0:	ffff0208 	.word	0xffff0208

0800efe4 <__sread>:
 800efe4:	b510      	push	{r4, lr}
 800efe6:	460c      	mov	r4, r1
 800efe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efec:	f001 fd1a 	bl	8010a24 <_read_r>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	bfab      	itete	ge
 800eff4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eff6:	89a3      	ldrhlt	r3, [r4, #12]
 800eff8:	181b      	addge	r3, r3, r0
 800effa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800effe:	bfac      	ite	ge
 800f000:	6563      	strge	r3, [r4, #84]	; 0x54
 800f002:	81a3      	strhlt	r3, [r4, #12]
 800f004:	bd10      	pop	{r4, pc}

0800f006 <__swrite>:
 800f006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f00a:	461f      	mov	r7, r3
 800f00c:	898b      	ldrh	r3, [r1, #12]
 800f00e:	4605      	mov	r5, r0
 800f010:	05db      	lsls	r3, r3, #23
 800f012:	460c      	mov	r4, r1
 800f014:	4616      	mov	r6, r2
 800f016:	d505      	bpl.n	800f024 <__swrite+0x1e>
 800f018:	2302      	movs	r3, #2
 800f01a:	2200      	movs	r2, #0
 800f01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f020:	f000 ff92 	bl	800ff48 <_lseek_r>
 800f024:	89a3      	ldrh	r3, [r4, #12]
 800f026:	4632      	mov	r2, r6
 800f028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	4628      	mov	r0, r5
 800f030:	463b      	mov	r3, r7
 800f032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f03a:	f000 b825 	b.w	800f088 <_write_r>

0800f03e <__sseek>:
 800f03e:	b510      	push	{r4, lr}
 800f040:	460c      	mov	r4, r1
 800f042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f046:	f000 ff7f 	bl	800ff48 <_lseek_r>
 800f04a:	1c43      	adds	r3, r0, #1
 800f04c:	89a3      	ldrh	r3, [r4, #12]
 800f04e:	bf15      	itete	ne
 800f050:	6560      	strne	r0, [r4, #84]	; 0x54
 800f052:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f056:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f05a:	81a3      	strheq	r3, [r4, #12]
 800f05c:	bf18      	it	ne
 800f05e:	81a3      	strhne	r3, [r4, #12]
 800f060:	bd10      	pop	{r4, pc}

0800f062 <__sclose>:
 800f062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f066:	f000 b821 	b.w	800f0ac <_close_r>

0800f06a <strcat>:
 800f06a:	4602      	mov	r2, r0
 800f06c:	b510      	push	{r4, lr}
 800f06e:	7814      	ldrb	r4, [r2, #0]
 800f070:	4613      	mov	r3, r2
 800f072:	3201      	adds	r2, #1
 800f074:	2c00      	cmp	r4, #0
 800f076:	d1fa      	bne.n	800f06e <strcat+0x4>
 800f078:	3b01      	subs	r3, #1
 800f07a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f07e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f082:	2a00      	cmp	r2, #0
 800f084:	d1f9      	bne.n	800f07a <strcat+0x10>
 800f086:	bd10      	pop	{r4, pc}

0800f088 <_write_r>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4604      	mov	r4, r0
 800f08c:	4608      	mov	r0, r1
 800f08e:	4611      	mov	r1, r2
 800f090:	2200      	movs	r2, #0
 800f092:	4d05      	ldr	r5, [pc, #20]	; (800f0a8 <_write_r+0x20>)
 800f094:	602a      	str	r2, [r5, #0]
 800f096:	461a      	mov	r2, r3
 800f098:	f7f3 f936 	bl	8002308 <_write>
 800f09c:	1c43      	adds	r3, r0, #1
 800f09e:	d102      	bne.n	800f0a6 <_write_r+0x1e>
 800f0a0:	682b      	ldr	r3, [r5, #0]
 800f0a2:	b103      	cbz	r3, 800f0a6 <_write_r+0x1e>
 800f0a4:	6023      	str	r3, [r4, #0]
 800f0a6:	bd38      	pop	{r3, r4, r5, pc}
 800f0a8:	20001c70 	.word	0x20001c70

0800f0ac <_close_r>:
 800f0ac:	b538      	push	{r3, r4, r5, lr}
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	4d05      	ldr	r5, [pc, #20]	; (800f0c8 <_close_r+0x1c>)
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	4608      	mov	r0, r1
 800f0b6:	602b      	str	r3, [r5, #0]
 800f0b8:	f7f3 f942 	bl	8002340 <_close>
 800f0bc:	1c43      	adds	r3, r0, #1
 800f0be:	d102      	bne.n	800f0c6 <_close_r+0x1a>
 800f0c0:	682b      	ldr	r3, [r5, #0]
 800f0c2:	b103      	cbz	r3, 800f0c6 <_close_r+0x1a>
 800f0c4:	6023      	str	r3, [r4, #0]
 800f0c6:	bd38      	pop	{r3, r4, r5, pc}
 800f0c8:	20001c70 	.word	0x20001c70

0800f0cc <quorem>:
 800f0cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d0:	6903      	ldr	r3, [r0, #16]
 800f0d2:	690c      	ldr	r4, [r1, #16]
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	42a3      	cmp	r3, r4
 800f0d8:	f2c0 8082 	blt.w	800f1e0 <quorem+0x114>
 800f0dc:	3c01      	subs	r4, #1
 800f0de:	f100 0514 	add.w	r5, r0, #20
 800f0e2:	f101 0814 	add.w	r8, r1, #20
 800f0e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0ea:	9301      	str	r3, [sp, #4]
 800f0ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f0f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800f0fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f100:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f104:	d331      	bcc.n	800f16a <quorem+0x9e>
 800f106:	f04f 0e00 	mov.w	lr, #0
 800f10a:	4640      	mov	r0, r8
 800f10c:	46ac      	mov	ip, r5
 800f10e:	46f2      	mov	sl, lr
 800f110:	f850 2b04 	ldr.w	r2, [r0], #4
 800f114:	b293      	uxth	r3, r2
 800f116:	fb06 e303 	mla	r3, r6, r3, lr
 800f11a:	0c12      	lsrs	r2, r2, #16
 800f11c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f120:	b29b      	uxth	r3, r3
 800f122:	fb06 e202 	mla	r2, r6, r2, lr
 800f126:	ebaa 0303 	sub.w	r3, sl, r3
 800f12a:	f8dc a000 	ldr.w	sl, [ip]
 800f12e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f132:	fa1f fa8a 	uxth.w	sl, sl
 800f136:	4453      	add	r3, sl
 800f138:	f8dc a000 	ldr.w	sl, [ip]
 800f13c:	b292      	uxth	r2, r2
 800f13e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f142:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f146:	b29b      	uxth	r3, r3
 800f148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f14c:	4581      	cmp	r9, r0
 800f14e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f152:	f84c 3b04 	str.w	r3, [ip], #4
 800f156:	d2db      	bcs.n	800f110 <quorem+0x44>
 800f158:	f855 300b 	ldr.w	r3, [r5, fp]
 800f15c:	b92b      	cbnz	r3, 800f16a <quorem+0x9e>
 800f15e:	9b01      	ldr	r3, [sp, #4]
 800f160:	3b04      	subs	r3, #4
 800f162:	429d      	cmp	r5, r3
 800f164:	461a      	mov	r2, r3
 800f166:	d32f      	bcc.n	800f1c8 <quorem+0xfc>
 800f168:	613c      	str	r4, [r7, #16]
 800f16a:	4638      	mov	r0, r7
 800f16c:	f001 f99e 	bl	80104ac <__mcmp>
 800f170:	2800      	cmp	r0, #0
 800f172:	db25      	blt.n	800f1c0 <quorem+0xf4>
 800f174:	4628      	mov	r0, r5
 800f176:	f04f 0c00 	mov.w	ip, #0
 800f17a:	3601      	adds	r6, #1
 800f17c:	f858 1b04 	ldr.w	r1, [r8], #4
 800f180:	f8d0 e000 	ldr.w	lr, [r0]
 800f184:	b28b      	uxth	r3, r1
 800f186:	ebac 0303 	sub.w	r3, ip, r3
 800f18a:	fa1f f28e 	uxth.w	r2, lr
 800f18e:	4413      	add	r3, r2
 800f190:	0c0a      	lsrs	r2, r1, #16
 800f192:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f196:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1a0:	45c1      	cmp	r9, r8
 800f1a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f1a6:	f840 3b04 	str.w	r3, [r0], #4
 800f1aa:	d2e7      	bcs.n	800f17c <quorem+0xb0>
 800f1ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1b4:	b922      	cbnz	r2, 800f1c0 <quorem+0xf4>
 800f1b6:	3b04      	subs	r3, #4
 800f1b8:	429d      	cmp	r5, r3
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	d30a      	bcc.n	800f1d4 <quorem+0x108>
 800f1be:	613c      	str	r4, [r7, #16]
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	b003      	add	sp, #12
 800f1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c8:	6812      	ldr	r2, [r2, #0]
 800f1ca:	3b04      	subs	r3, #4
 800f1cc:	2a00      	cmp	r2, #0
 800f1ce:	d1cb      	bne.n	800f168 <quorem+0x9c>
 800f1d0:	3c01      	subs	r4, #1
 800f1d2:	e7c6      	b.n	800f162 <quorem+0x96>
 800f1d4:	6812      	ldr	r2, [r2, #0]
 800f1d6:	3b04      	subs	r3, #4
 800f1d8:	2a00      	cmp	r2, #0
 800f1da:	d1f0      	bne.n	800f1be <quorem+0xf2>
 800f1dc:	3c01      	subs	r4, #1
 800f1de:	e7eb      	b.n	800f1b8 <quorem+0xec>
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	e7ee      	b.n	800f1c2 <quorem+0xf6>
 800f1e4:	0000      	movs	r0, r0
	...

0800f1e8 <_dtoa_r>:
 800f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	4616      	mov	r6, r2
 800f1ee:	461f      	mov	r7, r3
 800f1f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f1f2:	b099      	sub	sp, #100	; 0x64
 800f1f4:	4605      	mov	r5, r0
 800f1f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f1fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800f1fe:	b974      	cbnz	r4, 800f21e <_dtoa_r+0x36>
 800f200:	2010      	movs	r0, #16
 800f202:	f000 feb3 	bl	800ff6c <malloc>
 800f206:	4602      	mov	r2, r0
 800f208:	6268      	str	r0, [r5, #36]	; 0x24
 800f20a:	b920      	cbnz	r0, 800f216 <_dtoa_r+0x2e>
 800f20c:	21ea      	movs	r1, #234	; 0xea
 800f20e:	4ba8      	ldr	r3, [pc, #672]	; (800f4b0 <_dtoa_r+0x2c8>)
 800f210:	48a8      	ldr	r0, [pc, #672]	; (800f4b4 <_dtoa_r+0x2cc>)
 800f212:	f001 fc19 	bl	8010a48 <__assert_func>
 800f216:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f21a:	6004      	str	r4, [r0, #0]
 800f21c:	60c4      	str	r4, [r0, #12]
 800f21e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f220:	6819      	ldr	r1, [r3, #0]
 800f222:	b151      	cbz	r1, 800f23a <_dtoa_r+0x52>
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	2301      	movs	r3, #1
 800f228:	4093      	lsls	r3, r2
 800f22a:	604a      	str	r2, [r1, #4]
 800f22c:	608b      	str	r3, [r1, #8]
 800f22e:	4628      	mov	r0, r5
 800f230:	f000 fefe 	bl	8010030 <_Bfree>
 800f234:	2200      	movs	r2, #0
 800f236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f238:	601a      	str	r2, [r3, #0]
 800f23a:	1e3b      	subs	r3, r7, #0
 800f23c:	bfaf      	iteee	ge
 800f23e:	2300      	movge	r3, #0
 800f240:	2201      	movlt	r2, #1
 800f242:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f246:	9305      	strlt	r3, [sp, #20]
 800f248:	bfa8      	it	ge
 800f24a:	f8c8 3000 	strge.w	r3, [r8]
 800f24e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f252:	4b99      	ldr	r3, [pc, #612]	; (800f4b8 <_dtoa_r+0x2d0>)
 800f254:	bfb8      	it	lt
 800f256:	f8c8 2000 	strlt.w	r2, [r8]
 800f25a:	ea33 0309 	bics.w	r3, r3, r9
 800f25e:	d119      	bne.n	800f294 <_dtoa_r+0xac>
 800f260:	f242 730f 	movw	r3, #9999	; 0x270f
 800f264:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f266:	6013      	str	r3, [r2, #0]
 800f268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f26c:	4333      	orrs	r3, r6
 800f26e:	f000 857f 	beq.w	800fd70 <_dtoa_r+0xb88>
 800f272:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f274:	b953      	cbnz	r3, 800f28c <_dtoa_r+0xa4>
 800f276:	4b91      	ldr	r3, [pc, #580]	; (800f4bc <_dtoa_r+0x2d4>)
 800f278:	e022      	b.n	800f2c0 <_dtoa_r+0xd8>
 800f27a:	4b91      	ldr	r3, [pc, #580]	; (800f4c0 <_dtoa_r+0x2d8>)
 800f27c:	9303      	str	r3, [sp, #12]
 800f27e:	3308      	adds	r3, #8
 800f280:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f282:	6013      	str	r3, [r2, #0]
 800f284:	9803      	ldr	r0, [sp, #12]
 800f286:	b019      	add	sp, #100	; 0x64
 800f288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f28c:	4b8b      	ldr	r3, [pc, #556]	; (800f4bc <_dtoa_r+0x2d4>)
 800f28e:	9303      	str	r3, [sp, #12]
 800f290:	3303      	adds	r3, #3
 800f292:	e7f5      	b.n	800f280 <_dtoa_r+0x98>
 800f294:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f298:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800f29c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	f7f1 fb80 	bl	80009a8 <__aeabi_dcmpeq>
 800f2a8:	4680      	mov	r8, r0
 800f2aa:	b158      	cbz	r0, 800f2c4 <_dtoa_r+0xdc>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f2b0:	6013      	str	r3, [r2, #0]
 800f2b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f000 8558 	beq.w	800fd6a <_dtoa_r+0xb82>
 800f2ba:	4882      	ldr	r0, [pc, #520]	; (800f4c4 <_dtoa_r+0x2dc>)
 800f2bc:	6018      	str	r0, [r3, #0]
 800f2be:	1e43      	subs	r3, r0, #1
 800f2c0:	9303      	str	r3, [sp, #12]
 800f2c2:	e7df      	b.n	800f284 <_dtoa_r+0x9c>
 800f2c4:	ab16      	add	r3, sp, #88	; 0x58
 800f2c6:	9301      	str	r3, [sp, #4]
 800f2c8:	ab17      	add	r3, sp, #92	; 0x5c
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f2d2:	f001 f993 	bl	80105fc <__d2b>
 800f2d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f2da:	4683      	mov	fp, r0
 800f2dc:	2c00      	cmp	r4, #0
 800f2de:	d07f      	beq.n	800f3e0 <_dtoa_r+0x1f8>
 800f2e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f2e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f2ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f2f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f2f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	4b72      	ldr	r3, [pc, #456]	; (800f4c8 <_dtoa_r+0x2e0>)
 800f2fe:	f7f0 ff33 	bl	8000168 <__aeabi_dsub>
 800f302:	a365      	add	r3, pc, #404	; (adr r3, 800f498 <_dtoa_r+0x2b0>)
 800f304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f308:	f7f1 f8e6 	bl	80004d8 <__aeabi_dmul>
 800f30c:	a364      	add	r3, pc, #400	; (adr r3, 800f4a0 <_dtoa_r+0x2b8>)
 800f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f312:	f7f0 ff2b 	bl	800016c <__adddf3>
 800f316:	4606      	mov	r6, r0
 800f318:	4620      	mov	r0, r4
 800f31a:	460f      	mov	r7, r1
 800f31c:	f7f1 f872 	bl	8000404 <__aeabi_i2d>
 800f320:	a361      	add	r3, pc, #388	; (adr r3, 800f4a8 <_dtoa_r+0x2c0>)
 800f322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f326:	f7f1 f8d7 	bl	80004d8 <__aeabi_dmul>
 800f32a:	4602      	mov	r2, r0
 800f32c:	460b      	mov	r3, r1
 800f32e:	4630      	mov	r0, r6
 800f330:	4639      	mov	r1, r7
 800f332:	f7f0 ff1b 	bl	800016c <__adddf3>
 800f336:	4606      	mov	r6, r0
 800f338:	460f      	mov	r7, r1
 800f33a:	f7f1 fb7d 	bl	8000a38 <__aeabi_d2iz>
 800f33e:	2200      	movs	r2, #0
 800f340:	4682      	mov	sl, r0
 800f342:	2300      	movs	r3, #0
 800f344:	4630      	mov	r0, r6
 800f346:	4639      	mov	r1, r7
 800f348:	f7f1 fb38 	bl	80009bc <__aeabi_dcmplt>
 800f34c:	b148      	cbz	r0, 800f362 <_dtoa_r+0x17a>
 800f34e:	4650      	mov	r0, sl
 800f350:	f7f1 f858 	bl	8000404 <__aeabi_i2d>
 800f354:	4632      	mov	r2, r6
 800f356:	463b      	mov	r3, r7
 800f358:	f7f1 fb26 	bl	80009a8 <__aeabi_dcmpeq>
 800f35c:	b908      	cbnz	r0, 800f362 <_dtoa_r+0x17a>
 800f35e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f362:	f1ba 0f16 	cmp.w	sl, #22
 800f366:	d858      	bhi.n	800f41a <_dtoa_r+0x232>
 800f368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f36c:	4b57      	ldr	r3, [pc, #348]	; (800f4cc <_dtoa_r+0x2e4>)
 800f36e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f376:	f7f1 fb21 	bl	80009bc <__aeabi_dcmplt>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d04f      	beq.n	800f41e <_dtoa_r+0x236>
 800f37e:	2300      	movs	r3, #0
 800f380:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f384:	930f      	str	r3, [sp, #60]	; 0x3c
 800f386:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f388:	1b1c      	subs	r4, r3, r4
 800f38a:	1e63      	subs	r3, r4, #1
 800f38c:	9309      	str	r3, [sp, #36]	; 0x24
 800f38e:	bf49      	itett	mi
 800f390:	f1c4 0301 	rsbmi	r3, r4, #1
 800f394:	2300      	movpl	r3, #0
 800f396:	9306      	strmi	r3, [sp, #24]
 800f398:	2300      	movmi	r3, #0
 800f39a:	bf54      	ite	pl
 800f39c:	9306      	strpl	r3, [sp, #24]
 800f39e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f3a0:	f1ba 0f00 	cmp.w	sl, #0
 800f3a4:	db3d      	blt.n	800f422 <_dtoa_r+0x23a>
 800f3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f3ac:	4453      	add	r3, sl
 800f3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	930a      	str	r3, [sp, #40]	; 0x28
 800f3b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3b6:	2b09      	cmp	r3, #9
 800f3b8:	f200 808c 	bhi.w	800f4d4 <_dtoa_r+0x2ec>
 800f3bc:	2b05      	cmp	r3, #5
 800f3be:	bfc4      	itt	gt
 800f3c0:	3b04      	subgt	r3, #4
 800f3c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800f3c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3c6:	bfc8      	it	gt
 800f3c8:	2400      	movgt	r4, #0
 800f3ca:	f1a3 0302 	sub.w	r3, r3, #2
 800f3ce:	bfd8      	it	le
 800f3d0:	2401      	movle	r4, #1
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	f200 808a 	bhi.w	800f4ec <_dtoa_r+0x304>
 800f3d8:	e8df f003 	tbb	[pc, r3]
 800f3dc:	5b4d4f2d 	.word	0x5b4d4f2d
 800f3e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800f3e4:	441c      	add	r4, r3
 800f3e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800f3ea:	2b20      	cmp	r3, #32
 800f3ec:	bfc3      	ittte	gt
 800f3ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f3f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800f3f6:	fa09 f303 	lslgt.w	r3, r9, r3
 800f3fa:	f1c3 0320 	rsble	r3, r3, #32
 800f3fe:	bfc6      	itte	gt
 800f400:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f404:	4318      	orrgt	r0, r3
 800f406:	fa06 f003 	lslle.w	r0, r6, r3
 800f40a:	f7f0 ffeb 	bl	80003e4 <__aeabi_ui2d>
 800f40e:	2301      	movs	r3, #1
 800f410:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f414:	3c01      	subs	r4, #1
 800f416:	9313      	str	r3, [sp, #76]	; 0x4c
 800f418:	e76f      	b.n	800f2fa <_dtoa_r+0x112>
 800f41a:	2301      	movs	r3, #1
 800f41c:	e7b2      	b.n	800f384 <_dtoa_r+0x19c>
 800f41e:	900f      	str	r0, [sp, #60]	; 0x3c
 800f420:	e7b1      	b.n	800f386 <_dtoa_r+0x19e>
 800f422:	9b06      	ldr	r3, [sp, #24]
 800f424:	eba3 030a 	sub.w	r3, r3, sl
 800f428:	9306      	str	r3, [sp, #24]
 800f42a:	f1ca 0300 	rsb	r3, sl, #0
 800f42e:	930a      	str	r3, [sp, #40]	; 0x28
 800f430:	2300      	movs	r3, #0
 800f432:	930e      	str	r3, [sp, #56]	; 0x38
 800f434:	e7be      	b.n	800f3b4 <_dtoa_r+0x1cc>
 800f436:	2300      	movs	r3, #0
 800f438:	930b      	str	r3, [sp, #44]	; 0x2c
 800f43a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	dc58      	bgt.n	800f4f2 <_dtoa_r+0x30a>
 800f440:	f04f 0901 	mov.w	r9, #1
 800f444:	464b      	mov	r3, r9
 800f446:	f8cd 9020 	str.w	r9, [sp, #32]
 800f44a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800f44e:	2200      	movs	r2, #0
 800f450:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f452:	6042      	str	r2, [r0, #4]
 800f454:	2204      	movs	r2, #4
 800f456:	f102 0614 	add.w	r6, r2, #20
 800f45a:	429e      	cmp	r6, r3
 800f45c:	6841      	ldr	r1, [r0, #4]
 800f45e:	d94e      	bls.n	800f4fe <_dtoa_r+0x316>
 800f460:	4628      	mov	r0, r5
 800f462:	f000 fda5 	bl	800ffb0 <_Balloc>
 800f466:	9003      	str	r0, [sp, #12]
 800f468:	2800      	cmp	r0, #0
 800f46a:	d14c      	bne.n	800f506 <_dtoa_r+0x31e>
 800f46c:	4602      	mov	r2, r0
 800f46e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f472:	4b17      	ldr	r3, [pc, #92]	; (800f4d0 <_dtoa_r+0x2e8>)
 800f474:	e6cc      	b.n	800f210 <_dtoa_r+0x28>
 800f476:	2301      	movs	r3, #1
 800f478:	e7de      	b.n	800f438 <_dtoa_r+0x250>
 800f47a:	2300      	movs	r3, #0
 800f47c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f47e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f480:	eb0a 0903 	add.w	r9, sl, r3
 800f484:	f109 0301 	add.w	r3, r9, #1
 800f488:	2b01      	cmp	r3, #1
 800f48a:	9308      	str	r3, [sp, #32]
 800f48c:	bfb8      	it	lt
 800f48e:	2301      	movlt	r3, #1
 800f490:	e7dd      	b.n	800f44e <_dtoa_r+0x266>
 800f492:	2301      	movs	r3, #1
 800f494:	e7f2      	b.n	800f47c <_dtoa_r+0x294>
 800f496:	bf00      	nop
 800f498:	636f4361 	.word	0x636f4361
 800f49c:	3fd287a7 	.word	0x3fd287a7
 800f4a0:	8b60c8b3 	.word	0x8b60c8b3
 800f4a4:	3fc68a28 	.word	0x3fc68a28
 800f4a8:	509f79fb 	.word	0x509f79fb
 800f4ac:	3fd34413 	.word	0x3fd34413
 800f4b0:	080114e5 	.word	0x080114e5
 800f4b4:	080114fc 	.word	0x080114fc
 800f4b8:	7ff00000 	.word	0x7ff00000
 800f4bc:	080114e1 	.word	0x080114e1
 800f4c0:	080114d8 	.word	0x080114d8
 800f4c4:	080114b5 	.word	0x080114b5
 800f4c8:	3ff80000 	.word	0x3ff80000
 800f4cc:	080115f0 	.word	0x080115f0
 800f4d0:	08011557 	.word	0x08011557
 800f4d4:	2401      	movs	r4, #1
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800f4da:	9322      	str	r3, [sp, #136]	; 0x88
 800f4dc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	2312      	movs	r3, #18
 800f4e4:	f8cd 9020 	str.w	r9, [sp, #32]
 800f4e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800f4ea:	e7b0      	b.n	800f44e <_dtoa_r+0x266>
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4f0:	e7f4      	b.n	800f4dc <_dtoa_r+0x2f4>
 800f4f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800f4f6:	464b      	mov	r3, r9
 800f4f8:	f8cd 9020 	str.w	r9, [sp, #32]
 800f4fc:	e7a7      	b.n	800f44e <_dtoa_r+0x266>
 800f4fe:	3101      	adds	r1, #1
 800f500:	6041      	str	r1, [r0, #4]
 800f502:	0052      	lsls	r2, r2, #1
 800f504:	e7a7      	b.n	800f456 <_dtoa_r+0x26e>
 800f506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f508:	9a03      	ldr	r2, [sp, #12]
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	9b08      	ldr	r3, [sp, #32]
 800f50e:	2b0e      	cmp	r3, #14
 800f510:	f200 80a8 	bhi.w	800f664 <_dtoa_r+0x47c>
 800f514:	2c00      	cmp	r4, #0
 800f516:	f000 80a5 	beq.w	800f664 <_dtoa_r+0x47c>
 800f51a:	f1ba 0f00 	cmp.w	sl, #0
 800f51e:	dd34      	ble.n	800f58a <_dtoa_r+0x3a2>
 800f520:	4a9a      	ldr	r2, [pc, #616]	; (800f78c <_dtoa_r+0x5a4>)
 800f522:	f00a 030f 	and.w	r3, sl, #15
 800f526:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f52a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f52e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f532:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f536:	ea4f 142a 	mov.w	r4, sl, asr #4
 800f53a:	d016      	beq.n	800f56a <_dtoa_r+0x382>
 800f53c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f540:	4b93      	ldr	r3, [pc, #588]	; (800f790 <_dtoa_r+0x5a8>)
 800f542:	2703      	movs	r7, #3
 800f544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f548:	f7f1 f8f0 	bl	800072c <__aeabi_ddiv>
 800f54c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f550:	f004 040f 	and.w	r4, r4, #15
 800f554:	4e8e      	ldr	r6, [pc, #568]	; (800f790 <_dtoa_r+0x5a8>)
 800f556:	b954      	cbnz	r4, 800f56e <_dtoa_r+0x386>
 800f558:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f55c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f560:	f7f1 f8e4 	bl	800072c <__aeabi_ddiv>
 800f564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f568:	e029      	b.n	800f5be <_dtoa_r+0x3d6>
 800f56a:	2702      	movs	r7, #2
 800f56c:	e7f2      	b.n	800f554 <_dtoa_r+0x36c>
 800f56e:	07e1      	lsls	r1, r4, #31
 800f570:	d508      	bpl.n	800f584 <_dtoa_r+0x39c>
 800f572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f576:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f57a:	f7f0 ffad 	bl	80004d8 <__aeabi_dmul>
 800f57e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f582:	3701      	adds	r7, #1
 800f584:	1064      	asrs	r4, r4, #1
 800f586:	3608      	adds	r6, #8
 800f588:	e7e5      	b.n	800f556 <_dtoa_r+0x36e>
 800f58a:	f000 80a5 	beq.w	800f6d8 <_dtoa_r+0x4f0>
 800f58e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f592:	f1ca 0400 	rsb	r4, sl, #0
 800f596:	4b7d      	ldr	r3, [pc, #500]	; (800f78c <_dtoa_r+0x5a4>)
 800f598:	f004 020f 	and.w	r2, r4, #15
 800f59c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a4:	f7f0 ff98 	bl	80004d8 <__aeabi_dmul>
 800f5a8:	2702      	movs	r7, #2
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5b0:	4e77      	ldr	r6, [pc, #476]	; (800f790 <_dtoa_r+0x5a8>)
 800f5b2:	1124      	asrs	r4, r4, #4
 800f5b4:	2c00      	cmp	r4, #0
 800f5b6:	f040 8084 	bne.w	800f6c2 <_dtoa_r+0x4da>
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1d2      	bne.n	800f564 <_dtoa_r+0x37c>
 800f5be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f000 808b 	beq.w	800f6dc <_dtoa_r+0x4f4>
 800f5c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f5ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f5ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	4b6f      	ldr	r3, [pc, #444]	; (800f794 <_dtoa_r+0x5ac>)
 800f5d6:	f7f1 f9f1 	bl	80009bc <__aeabi_dcmplt>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	d07e      	beq.n	800f6dc <_dtoa_r+0x4f4>
 800f5de:	9b08      	ldr	r3, [sp, #32]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d07b      	beq.n	800f6dc <_dtoa_r+0x4f4>
 800f5e4:	f1b9 0f00 	cmp.w	r9, #0
 800f5e8:	dd38      	ble.n	800f65c <_dtoa_r+0x474>
 800f5ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	4b69      	ldr	r3, [pc, #420]	; (800f798 <_dtoa_r+0x5b0>)
 800f5f2:	f7f0 ff71 	bl	80004d8 <__aeabi_dmul>
 800f5f6:	464c      	mov	r4, r9
 800f5f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5fc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800f600:	3701      	adds	r7, #1
 800f602:	4638      	mov	r0, r7
 800f604:	f7f0 fefe 	bl	8000404 <__aeabi_i2d>
 800f608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f60c:	f7f0 ff64 	bl	80004d8 <__aeabi_dmul>
 800f610:	2200      	movs	r2, #0
 800f612:	4b62      	ldr	r3, [pc, #392]	; (800f79c <_dtoa_r+0x5b4>)
 800f614:	f7f0 fdaa 	bl	800016c <__adddf3>
 800f618:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f61c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f620:	9611      	str	r6, [sp, #68]	; 0x44
 800f622:	2c00      	cmp	r4, #0
 800f624:	d15d      	bne.n	800f6e2 <_dtoa_r+0x4fa>
 800f626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f62a:	2200      	movs	r2, #0
 800f62c:	4b5c      	ldr	r3, [pc, #368]	; (800f7a0 <_dtoa_r+0x5b8>)
 800f62e:	f7f0 fd9b 	bl	8000168 <__aeabi_dsub>
 800f632:	4602      	mov	r2, r0
 800f634:	460b      	mov	r3, r1
 800f636:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f63a:	4633      	mov	r3, r6
 800f63c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f63e:	f7f1 f9db 	bl	80009f8 <__aeabi_dcmpgt>
 800f642:	2800      	cmp	r0, #0
 800f644:	f040 829c 	bne.w	800fb80 <_dtoa_r+0x998>
 800f648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f64c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f64e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f652:	f7f1 f9b3 	bl	80009bc <__aeabi_dcmplt>
 800f656:	2800      	cmp	r0, #0
 800f658:	f040 8290 	bne.w	800fb7c <_dtoa_r+0x994>
 800f65c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800f660:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f666:	2b00      	cmp	r3, #0
 800f668:	f2c0 8152 	blt.w	800f910 <_dtoa_r+0x728>
 800f66c:	f1ba 0f0e 	cmp.w	sl, #14
 800f670:	f300 814e 	bgt.w	800f910 <_dtoa_r+0x728>
 800f674:	4b45      	ldr	r3, [pc, #276]	; (800f78c <_dtoa_r+0x5a4>)
 800f676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f67a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f67e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800f682:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f684:	2b00      	cmp	r3, #0
 800f686:	f280 80db 	bge.w	800f840 <_dtoa_r+0x658>
 800f68a:	9b08      	ldr	r3, [sp, #32]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f300 80d7 	bgt.w	800f840 <_dtoa_r+0x658>
 800f692:	f040 8272 	bne.w	800fb7a <_dtoa_r+0x992>
 800f696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f69a:	2200      	movs	r2, #0
 800f69c:	4b40      	ldr	r3, [pc, #256]	; (800f7a0 <_dtoa_r+0x5b8>)
 800f69e:	f7f0 ff1b 	bl	80004d8 <__aeabi_dmul>
 800f6a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6a6:	f7f1 f99d 	bl	80009e4 <__aeabi_dcmpge>
 800f6aa:	9c08      	ldr	r4, [sp, #32]
 800f6ac:	4626      	mov	r6, r4
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	f040 8248 	bne.w	800fb44 <_dtoa_r+0x95c>
 800f6b4:	2331      	movs	r3, #49	; 0x31
 800f6b6:	9f03      	ldr	r7, [sp, #12]
 800f6b8:	f10a 0a01 	add.w	sl, sl, #1
 800f6bc:	f807 3b01 	strb.w	r3, [r7], #1
 800f6c0:	e244      	b.n	800fb4c <_dtoa_r+0x964>
 800f6c2:	07e2      	lsls	r2, r4, #31
 800f6c4:	d505      	bpl.n	800f6d2 <_dtoa_r+0x4ea>
 800f6c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f6ca:	f7f0 ff05 	bl	80004d8 <__aeabi_dmul>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	3701      	adds	r7, #1
 800f6d2:	1064      	asrs	r4, r4, #1
 800f6d4:	3608      	adds	r6, #8
 800f6d6:	e76d      	b.n	800f5b4 <_dtoa_r+0x3cc>
 800f6d8:	2702      	movs	r7, #2
 800f6da:	e770      	b.n	800f5be <_dtoa_r+0x3d6>
 800f6dc:	46d0      	mov	r8, sl
 800f6de:	9c08      	ldr	r4, [sp, #32]
 800f6e0:	e78f      	b.n	800f602 <_dtoa_r+0x41a>
 800f6e2:	9903      	ldr	r1, [sp, #12]
 800f6e4:	4b29      	ldr	r3, [pc, #164]	; (800f78c <_dtoa_r+0x5a4>)
 800f6e6:	4421      	add	r1, r4
 800f6e8:	9112      	str	r1, [sp, #72]	; 0x48
 800f6ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f6f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f6f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f6f8:	2900      	cmp	r1, #0
 800f6fa:	d055      	beq.n	800f7a8 <_dtoa_r+0x5c0>
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	4929      	ldr	r1, [pc, #164]	; (800f7a4 <_dtoa_r+0x5bc>)
 800f700:	f7f1 f814 	bl	800072c <__aeabi_ddiv>
 800f704:	463b      	mov	r3, r7
 800f706:	4632      	mov	r2, r6
 800f708:	f7f0 fd2e 	bl	8000168 <__aeabi_dsub>
 800f70c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f710:	9f03      	ldr	r7, [sp, #12]
 800f712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f716:	f7f1 f98f 	bl	8000a38 <__aeabi_d2iz>
 800f71a:	4604      	mov	r4, r0
 800f71c:	f7f0 fe72 	bl	8000404 <__aeabi_i2d>
 800f720:	4602      	mov	r2, r0
 800f722:	460b      	mov	r3, r1
 800f724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f728:	f7f0 fd1e 	bl	8000168 <__aeabi_dsub>
 800f72c:	4602      	mov	r2, r0
 800f72e:	460b      	mov	r3, r1
 800f730:	3430      	adds	r4, #48	; 0x30
 800f732:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f73a:	f807 4b01 	strb.w	r4, [r7], #1
 800f73e:	f7f1 f93d 	bl	80009bc <__aeabi_dcmplt>
 800f742:	2800      	cmp	r0, #0
 800f744:	d174      	bne.n	800f830 <_dtoa_r+0x648>
 800f746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f74a:	2000      	movs	r0, #0
 800f74c:	4911      	ldr	r1, [pc, #68]	; (800f794 <_dtoa_r+0x5ac>)
 800f74e:	f7f0 fd0b 	bl	8000168 <__aeabi_dsub>
 800f752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f756:	f7f1 f931 	bl	80009bc <__aeabi_dcmplt>
 800f75a:	2800      	cmp	r0, #0
 800f75c:	f040 80b7 	bne.w	800f8ce <_dtoa_r+0x6e6>
 800f760:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f762:	429f      	cmp	r7, r3
 800f764:	f43f af7a 	beq.w	800f65c <_dtoa_r+0x474>
 800f768:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f76c:	2200      	movs	r2, #0
 800f76e:	4b0a      	ldr	r3, [pc, #40]	; (800f798 <_dtoa_r+0x5b0>)
 800f770:	f7f0 feb2 	bl	80004d8 <__aeabi_dmul>
 800f774:	2200      	movs	r2, #0
 800f776:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f77a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f77e:	4b06      	ldr	r3, [pc, #24]	; (800f798 <_dtoa_r+0x5b0>)
 800f780:	f7f0 feaa 	bl	80004d8 <__aeabi_dmul>
 800f784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f788:	e7c3      	b.n	800f712 <_dtoa_r+0x52a>
 800f78a:	bf00      	nop
 800f78c:	080115f0 	.word	0x080115f0
 800f790:	080115c8 	.word	0x080115c8
 800f794:	3ff00000 	.word	0x3ff00000
 800f798:	40240000 	.word	0x40240000
 800f79c:	401c0000 	.word	0x401c0000
 800f7a0:	40140000 	.word	0x40140000
 800f7a4:	3fe00000 	.word	0x3fe00000
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	4639      	mov	r1, r7
 800f7ac:	f7f0 fe94 	bl	80004d8 <__aeabi_dmul>
 800f7b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f7b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f7b6:	9c03      	ldr	r4, [sp, #12]
 800f7b8:	9314      	str	r3, [sp, #80]	; 0x50
 800f7ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7be:	f7f1 f93b 	bl	8000a38 <__aeabi_d2iz>
 800f7c2:	9015      	str	r0, [sp, #84]	; 0x54
 800f7c4:	f7f0 fe1e 	bl	8000404 <__aeabi_i2d>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7d0:	f7f0 fcca 	bl	8000168 <__aeabi_dsub>
 800f7d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	3330      	adds	r3, #48	; 0x30
 800f7da:	f804 3b01 	strb.w	r3, [r4], #1
 800f7de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f7e0:	460f      	mov	r7, r1
 800f7e2:	429c      	cmp	r4, r3
 800f7e4:	f04f 0200 	mov.w	r2, #0
 800f7e8:	d124      	bne.n	800f834 <_dtoa_r+0x64c>
 800f7ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f7ee:	4bb0      	ldr	r3, [pc, #704]	; (800fab0 <_dtoa_r+0x8c8>)
 800f7f0:	f7f0 fcbc 	bl	800016c <__adddf3>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	f7f1 f8fc 	bl	80009f8 <__aeabi_dcmpgt>
 800f800:	2800      	cmp	r0, #0
 800f802:	d163      	bne.n	800f8cc <_dtoa_r+0x6e4>
 800f804:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f808:	2000      	movs	r0, #0
 800f80a:	49a9      	ldr	r1, [pc, #676]	; (800fab0 <_dtoa_r+0x8c8>)
 800f80c:	f7f0 fcac 	bl	8000168 <__aeabi_dsub>
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	4630      	mov	r0, r6
 800f816:	4639      	mov	r1, r7
 800f818:	f7f1 f8d0 	bl	80009bc <__aeabi_dcmplt>
 800f81c:	2800      	cmp	r0, #0
 800f81e:	f43f af1d 	beq.w	800f65c <_dtoa_r+0x474>
 800f822:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f824:	1e7b      	subs	r3, r7, #1
 800f826:	9314      	str	r3, [sp, #80]	; 0x50
 800f828:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f82c:	2b30      	cmp	r3, #48	; 0x30
 800f82e:	d0f8      	beq.n	800f822 <_dtoa_r+0x63a>
 800f830:	46c2      	mov	sl, r8
 800f832:	e03b      	b.n	800f8ac <_dtoa_r+0x6c4>
 800f834:	4b9f      	ldr	r3, [pc, #636]	; (800fab4 <_dtoa_r+0x8cc>)
 800f836:	f7f0 fe4f 	bl	80004d8 <__aeabi_dmul>
 800f83a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f83e:	e7bc      	b.n	800f7ba <_dtoa_r+0x5d2>
 800f840:	9f03      	ldr	r7, [sp, #12]
 800f842:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f84a:	4640      	mov	r0, r8
 800f84c:	4649      	mov	r1, r9
 800f84e:	f7f0 ff6d 	bl	800072c <__aeabi_ddiv>
 800f852:	f7f1 f8f1 	bl	8000a38 <__aeabi_d2iz>
 800f856:	4604      	mov	r4, r0
 800f858:	f7f0 fdd4 	bl	8000404 <__aeabi_i2d>
 800f85c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f860:	f7f0 fe3a 	bl	80004d8 <__aeabi_dmul>
 800f864:	4602      	mov	r2, r0
 800f866:	460b      	mov	r3, r1
 800f868:	4640      	mov	r0, r8
 800f86a:	4649      	mov	r1, r9
 800f86c:	f7f0 fc7c 	bl	8000168 <__aeabi_dsub>
 800f870:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f874:	f807 6b01 	strb.w	r6, [r7], #1
 800f878:	9e03      	ldr	r6, [sp, #12]
 800f87a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f87e:	1bbe      	subs	r6, r7, r6
 800f880:	45b4      	cmp	ip, r6
 800f882:	4602      	mov	r2, r0
 800f884:	460b      	mov	r3, r1
 800f886:	d136      	bne.n	800f8f6 <_dtoa_r+0x70e>
 800f888:	f7f0 fc70 	bl	800016c <__adddf3>
 800f88c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f890:	4680      	mov	r8, r0
 800f892:	4689      	mov	r9, r1
 800f894:	f7f1 f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 800f898:	bb58      	cbnz	r0, 800f8f2 <_dtoa_r+0x70a>
 800f89a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f89e:	4640      	mov	r0, r8
 800f8a0:	4649      	mov	r1, r9
 800f8a2:	f7f1 f881 	bl	80009a8 <__aeabi_dcmpeq>
 800f8a6:	b108      	cbz	r0, 800f8ac <_dtoa_r+0x6c4>
 800f8a8:	07e1      	lsls	r1, r4, #31
 800f8aa:	d422      	bmi.n	800f8f2 <_dtoa_r+0x70a>
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	4659      	mov	r1, fp
 800f8b0:	f000 fbbe 	bl	8010030 <_Bfree>
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	703b      	strb	r3, [r7, #0]
 800f8b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f8ba:	f10a 0001 	add.w	r0, sl, #1
 800f8be:	6018      	str	r0, [r3, #0]
 800f8c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f43f acde 	beq.w	800f284 <_dtoa_r+0x9c>
 800f8c8:	601f      	str	r7, [r3, #0]
 800f8ca:	e4db      	b.n	800f284 <_dtoa_r+0x9c>
 800f8cc:	4627      	mov	r7, r4
 800f8ce:	463b      	mov	r3, r7
 800f8d0:	461f      	mov	r7, r3
 800f8d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8d6:	2a39      	cmp	r2, #57	; 0x39
 800f8d8:	d107      	bne.n	800f8ea <_dtoa_r+0x702>
 800f8da:	9a03      	ldr	r2, [sp, #12]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d1f7      	bne.n	800f8d0 <_dtoa_r+0x6e8>
 800f8e0:	2230      	movs	r2, #48	; 0x30
 800f8e2:	9903      	ldr	r1, [sp, #12]
 800f8e4:	f108 0801 	add.w	r8, r8, #1
 800f8e8:	700a      	strb	r2, [r1, #0]
 800f8ea:	781a      	ldrb	r2, [r3, #0]
 800f8ec:	3201      	adds	r2, #1
 800f8ee:	701a      	strb	r2, [r3, #0]
 800f8f0:	e79e      	b.n	800f830 <_dtoa_r+0x648>
 800f8f2:	46d0      	mov	r8, sl
 800f8f4:	e7eb      	b.n	800f8ce <_dtoa_r+0x6e6>
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	4b6e      	ldr	r3, [pc, #440]	; (800fab4 <_dtoa_r+0x8cc>)
 800f8fa:	f7f0 fded 	bl	80004d8 <__aeabi_dmul>
 800f8fe:	2200      	movs	r2, #0
 800f900:	2300      	movs	r3, #0
 800f902:	4680      	mov	r8, r0
 800f904:	4689      	mov	r9, r1
 800f906:	f7f1 f84f 	bl	80009a8 <__aeabi_dcmpeq>
 800f90a:	2800      	cmp	r0, #0
 800f90c:	d09b      	beq.n	800f846 <_dtoa_r+0x65e>
 800f90e:	e7cd      	b.n	800f8ac <_dtoa_r+0x6c4>
 800f910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f912:	2a00      	cmp	r2, #0
 800f914:	f000 80d0 	beq.w	800fab8 <_dtoa_r+0x8d0>
 800f918:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f91a:	2a01      	cmp	r2, #1
 800f91c:	f300 80ae 	bgt.w	800fa7c <_dtoa_r+0x894>
 800f920:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f922:	2a00      	cmp	r2, #0
 800f924:	f000 80a6 	beq.w	800fa74 <_dtoa_r+0x88c>
 800f928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f92c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f92e:	9f06      	ldr	r7, [sp, #24]
 800f930:	9a06      	ldr	r2, [sp, #24]
 800f932:	2101      	movs	r1, #1
 800f934:	441a      	add	r2, r3
 800f936:	9206      	str	r2, [sp, #24]
 800f938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f93a:	4628      	mov	r0, r5
 800f93c:	441a      	add	r2, r3
 800f93e:	9209      	str	r2, [sp, #36]	; 0x24
 800f940:	f000 fc2c 	bl	801019c <__i2b>
 800f944:	4606      	mov	r6, r0
 800f946:	2f00      	cmp	r7, #0
 800f948:	dd0c      	ble.n	800f964 <_dtoa_r+0x77c>
 800f94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	dd09      	ble.n	800f964 <_dtoa_r+0x77c>
 800f950:	42bb      	cmp	r3, r7
 800f952:	bfa8      	it	ge
 800f954:	463b      	movge	r3, r7
 800f956:	9a06      	ldr	r2, [sp, #24]
 800f958:	1aff      	subs	r7, r7, r3
 800f95a:	1ad2      	subs	r2, r2, r3
 800f95c:	9206      	str	r2, [sp, #24]
 800f95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f960:	1ad3      	subs	r3, r2, r3
 800f962:	9309      	str	r3, [sp, #36]	; 0x24
 800f964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f966:	b1f3      	cbz	r3, 800f9a6 <_dtoa_r+0x7be>
 800f968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f000 80a8 	beq.w	800fac0 <_dtoa_r+0x8d8>
 800f970:	2c00      	cmp	r4, #0
 800f972:	dd10      	ble.n	800f996 <_dtoa_r+0x7ae>
 800f974:	4631      	mov	r1, r6
 800f976:	4622      	mov	r2, r4
 800f978:	4628      	mov	r0, r5
 800f97a:	f000 fccd 	bl	8010318 <__pow5mult>
 800f97e:	465a      	mov	r2, fp
 800f980:	4601      	mov	r1, r0
 800f982:	4606      	mov	r6, r0
 800f984:	4628      	mov	r0, r5
 800f986:	f000 fc1f 	bl	80101c8 <__multiply>
 800f98a:	4680      	mov	r8, r0
 800f98c:	4659      	mov	r1, fp
 800f98e:	4628      	mov	r0, r5
 800f990:	f000 fb4e 	bl	8010030 <_Bfree>
 800f994:	46c3      	mov	fp, r8
 800f996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f998:	1b1a      	subs	r2, r3, r4
 800f99a:	d004      	beq.n	800f9a6 <_dtoa_r+0x7be>
 800f99c:	4659      	mov	r1, fp
 800f99e:	4628      	mov	r0, r5
 800f9a0:	f000 fcba 	bl	8010318 <__pow5mult>
 800f9a4:	4683      	mov	fp, r0
 800f9a6:	2101      	movs	r1, #1
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	f000 fbf7 	bl	801019c <__i2b>
 800f9ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	f340 8086 	ble.w	800fac4 <_dtoa_r+0x8dc>
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	4601      	mov	r1, r0
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f000 fcab 	bl	8010318 <__pow5mult>
 800f9c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	dd7f      	ble.n	800faca <_dtoa_r+0x8e2>
 800f9ca:	f04f 0800 	mov.w	r8, #0
 800f9ce:	6923      	ldr	r3, [r4, #16]
 800f9d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f9d4:	6918      	ldr	r0, [r3, #16]
 800f9d6:	f000 fb93 	bl	8010100 <__hi0bits>
 800f9da:	f1c0 0020 	rsb	r0, r0, #32
 800f9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9e0:	4418      	add	r0, r3
 800f9e2:	f010 001f 	ands.w	r0, r0, #31
 800f9e6:	f000 8092 	beq.w	800fb0e <_dtoa_r+0x926>
 800f9ea:	f1c0 0320 	rsb	r3, r0, #32
 800f9ee:	2b04      	cmp	r3, #4
 800f9f0:	f340 808a 	ble.w	800fb08 <_dtoa_r+0x920>
 800f9f4:	f1c0 001c 	rsb	r0, r0, #28
 800f9f8:	9b06      	ldr	r3, [sp, #24]
 800f9fa:	4407      	add	r7, r0
 800f9fc:	4403      	add	r3, r0
 800f9fe:	9306      	str	r3, [sp, #24]
 800fa00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa02:	4403      	add	r3, r0
 800fa04:	9309      	str	r3, [sp, #36]	; 0x24
 800fa06:	9b06      	ldr	r3, [sp, #24]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	dd05      	ble.n	800fa18 <_dtoa_r+0x830>
 800fa0c:	4659      	mov	r1, fp
 800fa0e:	461a      	mov	r2, r3
 800fa10:	4628      	mov	r0, r5
 800fa12:	f000 fcdb 	bl	80103cc <__lshift>
 800fa16:	4683      	mov	fp, r0
 800fa18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	dd05      	ble.n	800fa2a <_dtoa_r+0x842>
 800fa1e:	4621      	mov	r1, r4
 800fa20:	461a      	mov	r2, r3
 800fa22:	4628      	mov	r0, r5
 800fa24:	f000 fcd2 	bl	80103cc <__lshift>
 800fa28:	4604      	mov	r4, r0
 800fa2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d070      	beq.n	800fb12 <_dtoa_r+0x92a>
 800fa30:	4621      	mov	r1, r4
 800fa32:	4658      	mov	r0, fp
 800fa34:	f000 fd3a 	bl	80104ac <__mcmp>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	da6a      	bge.n	800fb12 <_dtoa_r+0x92a>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	4659      	mov	r1, fp
 800fa40:	220a      	movs	r2, #10
 800fa42:	4628      	mov	r0, r5
 800fa44:	f000 fb16 	bl	8010074 <__multadd>
 800fa48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa4a:	4683      	mov	fp, r0
 800fa4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f000 8194 	beq.w	800fd7e <_dtoa_r+0xb96>
 800fa56:	4631      	mov	r1, r6
 800fa58:	2300      	movs	r3, #0
 800fa5a:	220a      	movs	r2, #10
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	f000 fb09 	bl	8010074 <__multadd>
 800fa62:	f1b9 0f00 	cmp.w	r9, #0
 800fa66:	4606      	mov	r6, r0
 800fa68:	f300 8093 	bgt.w	800fb92 <_dtoa_r+0x9aa>
 800fa6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fa6e:	2b02      	cmp	r3, #2
 800fa70:	dc57      	bgt.n	800fb22 <_dtoa_r+0x93a>
 800fa72:	e08e      	b.n	800fb92 <_dtoa_r+0x9aa>
 800fa74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fa76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fa7a:	e757      	b.n	800f92c <_dtoa_r+0x744>
 800fa7c:	9b08      	ldr	r3, [sp, #32]
 800fa7e:	1e5c      	subs	r4, r3, #1
 800fa80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa82:	42a3      	cmp	r3, r4
 800fa84:	bfb7      	itett	lt
 800fa86:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fa88:	1b1c      	subge	r4, r3, r4
 800fa8a:	1ae2      	sublt	r2, r4, r3
 800fa8c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fa8e:	bfbe      	ittt	lt
 800fa90:	940a      	strlt	r4, [sp, #40]	; 0x28
 800fa92:	189b      	addlt	r3, r3, r2
 800fa94:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fa96:	9b08      	ldr	r3, [sp, #32]
 800fa98:	bfb8      	it	lt
 800fa9a:	2400      	movlt	r4, #0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	bfbb      	ittet	lt
 800faa0:	9b06      	ldrlt	r3, [sp, #24]
 800faa2:	9a08      	ldrlt	r2, [sp, #32]
 800faa4:	9f06      	ldrge	r7, [sp, #24]
 800faa6:	1a9f      	sublt	r7, r3, r2
 800faa8:	bfac      	ite	ge
 800faaa:	9b08      	ldrge	r3, [sp, #32]
 800faac:	2300      	movlt	r3, #0
 800faae:	e73f      	b.n	800f930 <_dtoa_r+0x748>
 800fab0:	3fe00000 	.word	0x3fe00000
 800fab4:	40240000 	.word	0x40240000
 800fab8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800faba:	9f06      	ldr	r7, [sp, #24]
 800fabc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fabe:	e742      	b.n	800f946 <_dtoa_r+0x75e>
 800fac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fac2:	e76b      	b.n	800f99c <_dtoa_r+0x7b4>
 800fac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	dc19      	bgt.n	800fafe <_dtoa_r+0x916>
 800faca:	9b04      	ldr	r3, [sp, #16]
 800facc:	b9bb      	cbnz	r3, 800fafe <_dtoa_r+0x916>
 800face:	9b05      	ldr	r3, [sp, #20]
 800fad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fad4:	b99b      	cbnz	r3, 800fafe <_dtoa_r+0x916>
 800fad6:	9b05      	ldr	r3, [sp, #20]
 800fad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fadc:	0d1b      	lsrs	r3, r3, #20
 800fade:	051b      	lsls	r3, r3, #20
 800fae0:	b183      	cbz	r3, 800fb04 <_dtoa_r+0x91c>
 800fae2:	f04f 0801 	mov.w	r8, #1
 800fae6:	9b06      	ldr	r3, [sp, #24]
 800fae8:	3301      	adds	r3, #1
 800faea:	9306      	str	r3, [sp, #24]
 800faec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faee:	3301      	adds	r3, #1
 800faf0:	9309      	str	r3, [sp, #36]	; 0x24
 800faf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f47f af6a 	bne.w	800f9ce <_dtoa_r+0x7e6>
 800fafa:	2001      	movs	r0, #1
 800fafc:	e76f      	b.n	800f9de <_dtoa_r+0x7f6>
 800fafe:	f04f 0800 	mov.w	r8, #0
 800fb02:	e7f6      	b.n	800faf2 <_dtoa_r+0x90a>
 800fb04:	4698      	mov	r8, r3
 800fb06:	e7f4      	b.n	800faf2 <_dtoa_r+0x90a>
 800fb08:	f43f af7d 	beq.w	800fa06 <_dtoa_r+0x81e>
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	301c      	adds	r0, #28
 800fb10:	e772      	b.n	800f9f8 <_dtoa_r+0x810>
 800fb12:	9b08      	ldr	r3, [sp, #32]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	dc36      	bgt.n	800fb86 <_dtoa_r+0x99e>
 800fb18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb1a:	2b02      	cmp	r3, #2
 800fb1c:	dd33      	ble.n	800fb86 <_dtoa_r+0x99e>
 800fb1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb22:	f1b9 0f00 	cmp.w	r9, #0
 800fb26:	d10d      	bne.n	800fb44 <_dtoa_r+0x95c>
 800fb28:	4621      	mov	r1, r4
 800fb2a:	464b      	mov	r3, r9
 800fb2c:	2205      	movs	r2, #5
 800fb2e:	4628      	mov	r0, r5
 800fb30:	f000 faa0 	bl	8010074 <__multadd>
 800fb34:	4601      	mov	r1, r0
 800fb36:	4604      	mov	r4, r0
 800fb38:	4658      	mov	r0, fp
 800fb3a:	f000 fcb7 	bl	80104ac <__mcmp>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	f73f adb8 	bgt.w	800f6b4 <_dtoa_r+0x4cc>
 800fb44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fb46:	9f03      	ldr	r7, [sp, #12]
 800fb48:	ea6f 0a03 	mvn.w	sl, r3
 800fb4c:	f04f 0800 	mov.w	r8, #0
 800fb50:	4621      	mov	r1, r4
 800fb52:	4628      	mov	r0, r5
 800fb54:	f000 fa6c 	bl	8010030 <_Bfree>
 800fb58:	2e00      	cmp	r6, #0
 800fb5a:	f43f aea7 	beq.w	800f8ac <_dtoa_r+0x6c4>
 800fb5e:	f1b8 0f00 	cmp.w	r8, #0
 800fb62:	d005      	beq.n	800fb70 <_dtoa_r+0x988>
 800fb64:	45b0      	cmp	r8, r6
 800fb66:	d003      	beq.n	800fb70 <_dtoa_r+0x988>
 800fb68:	4641      	mov	r1, r8
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f000 fa60 	bl	8010030 <_Bfree>
 800fb70:	4631      	mov	r1, r6
 800fb72:	4628      	mov	r0, r5
 800fb74:	f000 fa5c 	bl	8010030 <_Bfree>
 800fb78:	e698      	b.n	800f8ac <_dtoa_r+0x6c4>
 800fb7a:	2400      	movs	r4, #0
 800fb7c:	4626      	mov	r6, r4
 800fb7e:	e7e1      	b.n	800fb44 <_dtoa_r+0x95c>
 800fb80:	46c2      	mov	sl, r8
 800fb82:	4626      	mov	r6, r4
 800fb84:	e596      	b.n	800f6b4 <_dtoa_r+0x4cc>
 800fb86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f000 80fd 	beq.w	800fd8c <_dtoa_r+0xba4>
 800fb92:	2f00      	cmp	r7, #0
 800fb94:	dd05      	ble.n	800fba2 <_dtoa_r+0x9ba>
 800fb96:	4631      	mov	r1, r6
 800fb98:	463a      	mov	r2, r7
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	f000 fc16 	bl	80103cc <__lshift>
 800fba0:	4606      	mov	r6, r0
 800fba2:	f1b8 0f00 	cmp.w	r8, #0
 800fba6:	d05c      	beq.n	800fc62 <_dtoa_r+0xa7a>
 800fba8:	4628      	mov	r0, r5
 800fbaa:	6871      	ldr	r1, [r6, #4]
 800fbac:	f000 fa00 	bl	800ffb0 <_Balloc>
 800fbb0:	4607      	mov	r7, r0
 800fbb2:	b928      	cbnz	r0, 800fbc0 <_dtoa_r+0x9d8>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fbba:	4b7f      	ldr	r3, [pc, #508]	; (800fdb8 <_dtoa_r+0xbd0>)
 800fbbc:	f7ff bb28 	b.w	800f210 <_dtoa_r+0x28>
 800fbc0:	6932      	ldr	r2, [r6, #16]
 800fbc2:	f106 010c 	add.w	r1, r6, #12
 800fbc6:	3202      	adds	r2, #2
 800fbc8:	0092      	lsls	r2, r2, #2
 800fbca:	300c      	adds	r0, #12
 800fbcc:	f7fe fc65 	bl	800e49a <memcpy>
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	4639      	mov	r1, r7
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	f000 fbf9 	bl	80103cc <__lshift>
 800fbda:	46b0      	mov	r8, r6
 800fbdc:	4606      	mov	r6, r0
 800fbde:	9b03      	ldr	r3, [sp, #12]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	9308      	str	r3, [sp, #32]
 800fbe4:	9b03      	ldr	r3, [sp, #12]
 800fbe6:	444b      	add	r3, r9
 800fbe8:	930a      	str	r3, [sp, #40]	; 0x28
 800fbea:	9b04      	ldr	r3, [sp, #16]
 800fbec:	f003 0301 	and.w	r3, r3, #1
 800fbf0:	9309      	str	r3, [sp, #36]	; 0x24
 800fbf2:	9b08      	ldr	r3, [sp, #32]
 800fbf4:	4621      	mov	r1, r4
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	4658      	mov	r0, fp
 800fbfa:	9304      	str	r3, [sp, #16]
 800fbfc:	f7ff fa66 	bl	800f0cc <quorem>
 800fc00:	4603      	mov	r3, r0
 800fc02:	4641      	mov	r1, r8
 800fc04:	3330      	adds	r3, #48	; 0x30
 800fc06:	9006      	str	r0, [sp, #24]
 800fc08:	4658      	mov	r0, fp
 800fc0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc0c:	f000 fc4e 	bl	80104ac <__mcmp>
 800fc10:	4632      	mov	r2, r6
 800fc12:	4681      	mov	r9, r0
 800fc14:	4621      	mov	r1, r4
 800fc16:	4628      	mov	r0, r5
 800fc18:	f000 fc64 	bl	80104e4 <__mdiff>
 800fc1c:	68c2      	ldr	r2, [r0, #12]
 800fc1e:	4607      	mov	r7, r0
 800fc20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc22:	bb02      	cbnz	r2, 800fc66 <_dtoa_r+0xa7e>
 800fc24:	4601      	mov	r1, r0
 800fc26:	4658      	mov	r0, fp
 800fc28:	f000 fc40 	bl	80104ac <__mcmp>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc30:	4639      	mov	r1, r7
 800fc32:	4628      	mov	r0, r5
 800fc34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800fc38:	f000 f9fa 	bl	8010030 <_Bfree>
 800fc3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc40:	9f08      	ldr	r7, [sp, #32]
 800fc42:	ea43 0102 	orr.w	r1, r3, r2
 800fc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc48:	430b      	orrs	r3, r1
 800fc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc4c:	d10d      	bne.n	800fc6a <_dtoa_r+0xa82>
 800fc4e:	2b39      	cmp	r3, #57	; 0x39
 800fc50:	d029      	beq.n	800fca6 <_dtoa_r+0xabe>
 800fc52:	f1b9 0f00 	cmp.w	r9, #0
 800fc56:	dd01      	ble.n	800fc5c <_dtoa_r+0xa74>
 800fc58:	9b06      	ldr	r3, [sp, #24]
 800fc5a:	3331      	adds	r3, #49	; 0x31
 800fc5c:	9a04      	ldr	r2, [sp, #16]
 800fc5e:	7013      	strb	r3, [r2, #0]
 800fc60:	e776      	b.n	800fb50 <_dtoa_r+0x968>
 800fc62:	4630      	mov	r0, r6
 800fc64:	e7b9      	b.n	800fbda <_dtoa_r+0x9f2>
 800fc66:	2201      	movs	r2, #1
 800fc68:	e7e2      	b.n	800fc30 <_dtoa_r+0xa48>
 800fc6a:	f1b9 0f00 	cmp.w	r9, #0
 800fc6e:	db06      	blt.n	800fc7e <_dtoa_r+0xa96>
 800fc70:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fc72:	ea41 0909 	orr.w	r9, r1, r9
 800fc76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc78:	ea59 0101 	orrs.w	r1, r9, r1
 800fc7c:	d120      	bne.n	800fcc0 <_dtoa_r+0xad8>
 800fc7e:	2a00      	cmp	r2, #0
 800fc80:	ddec      	ble.n	800fc5c <_dtoa_r+0xa74>
 800fc82:	4659      	mov	r1, fp
 800fc84:	2201      	movs	r2, #1
 800fc86:	4628      	mov	r0, r5
 800fc88:	9308      	str	r3, [sp, #32]
 800fc8a:	f000 fb9f 	bl	80103cc <__lshift>
 800fc8e:	4621      	mov	r1, r4
 800fc90:	4683      	mov	fp, r0
 800fc92:	f000 fc0b 	bl	80104ac <__mcmp>
 800fc96:	2800      	cmp	r0, #0
 800fc98:	9b08      	ldr	r3, [sp, #32]
 800fc9a:	dc02      	bgt.n	800fca2 <_dtoa_r+0xaba>
 800fc9c:	d1de      	bne.n	800fc5c <_dtoa_r+0xa74>
 800fc9e:	07da      	lsls	r2, r3, #31
 800fca0:	d5dc      	bpl.n	800fc5c <_dtoa_r+0xa74>
 800fca2:	2b39      	cmp	r3, #57	; 0x39
 800fca4:	d1d8      	bne.n	800fc58 <_dtoa_r+0xa70>
 800fca6:	2339      	movs	r3, #57	; 0x39
 800fca8:	9a04      	ldr	r2, [sp, #16]
 800fcaa:	7013      	strb	r3, [r2, #0]
 800fcac:	463b      	mov	r3, r7
 800fcae:	461f      	mov	r7, r3
 800fcb0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800fcb4:	3b01      	subs	r3, #1
 800fcb6:	2a39      	cmp	r2, #57	; 0x39
 800fcb8:	d050      	beq.n	800fd5c <_dtoa_r+0xb74>
 800fcba:	3201      	adds	r2, #1
 800fcbc:	701a      	strb	r2, [r3, #0]
 800fcbe:	e747      	b.n	800fb50 <_dtoa_r+0x968>
 800fcc0:	2a00      	cmp	r2, #0
 800fcc2:	dd03      	ble.n	800fccc <_dtoa_r+0xae4>
 800fcc4:	2b39      	cmp	r3, #57	; 0x39
 800fcc6:	d0ee      	beq.n	800fca6 <_dtoa_r+0xabe>
 800fcc8:	3301      	adds	r3, #1
 800fcca:	e7c7      	b.n	800fc5c <_dtoa_r+0xa74>
 800fccc:	9a08      	ldr	r2, [sp, #32]
 800fcce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fcd0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fcd4:	428a      	cmp	r2, r1
 800fcd6:	d02a      	beq.n	800fd2e <_dtoa_r+0xb46>
 800fcd8:	4659      	mov	r1, fp
 800fcda:	2300      	movs	r3, #0
 800fcdc:	220a      	movs	r2, #10
 800fcde:	4628      	mov	r0, r5
 800fce0:	f000 f9c8 	bl	8010074 <__multadd>
 800fce4:	45b0      	cmp	r8, r6
 800fce6:	4683      	mov	fp, r0
 800fce8:	f04f 0300 	mov.w	r3, #0
 800fcec:	f04f 020a 	mov.w	r2, #10
 800fcf0:	4641      	mov	r1, r8
 800fcf2:	4628      	mov	r0, r5
 800fcf4:	d107      	bne.n	800fd06 <_dtoa_r+0xb1e>
 800fcf6:	f000 f9bd 	bl	8010074 <__multadd>
 800fcfa:	4680      	mov	r8, r0
 800fcfc:	4606      	mov	r6, r0
 800fcfe:	9b08      	ldr	r3, [sp, #32]
 800fd00:	3301      	adds	r3, #1
 800fd02:	9308      	str	r3, [sp, #32]
 800fd04:	e775      	b.n	800fbf2 <_dtoa_r+0xa0a>
 800fd06:	f000 f9b5 	bl	8010074 <__multadd>
 800fd0a:	4631      	mov	r1, r6
 800fd0c:	4680      	mov	r8, r0
 800fd0e:	2300      	movs	r3, #0
 800fd10:	220a      	movs	r2, #10
 800fd12:	4628      	mov	r0, r5
 800fd14:	f000 f9ae 	bl	8010074 <__multadd>
 800fd18:	4606      	mov	r6, r0
 800fd1a:	e7f0      	b.n	800fcfe <_dtoa_r+0xb16>
 800fd1c:	f1b9 0f00 	cmp.w	r9, #0
 800fd20:	bfcc      	ite	gt
 800fd22:	464f      	movgt	r7, r9
 800fd24:	2701      	movle	r7, #1
 800fd26:	f04f 0800 	mov.w	r8, #0
 800fd2a:	9a03      	ldr	r2, [sp, #12]
 800fd2c:	4417      	add	r7, r2
 800fd2e:	4659      	mov	r1, fp
 800fd30:	2201      	movs	r2, #1
 800fd32:	4628      	mov	r0, r5
 800fd34:	9308      	str	r3, [sp, #32]
 800fd36:	f000 fb49 	bl	80103cc <__lshift>
 800fd3a:	4621      	mov	r1, r4
 800fd3c:	4683      	mov	fp, r0
 800fd3e:	f000 fbb5 	bl	80104ac <__mcmp>
 800fd42:	2800      	cmp	r0, #0
 800fd44:	dcb2      	bgt.n	800fcac <_dtoa_r+0xac4>
 800fd46:	d102      	bne.n	800fd4e <_dtoa_r+0xb66>
 800fd48:	9b08      	ldr	r3, [sp, #32]
 800fd4a:	07db      	lsls	r3, r3, #31
 800fd4c:	d4ae      	bmi.n	800fcac <_dtoa_r+0xac4>
 800fd4e:	463b      	mov	r3, r7
 800fd50:	461f      	mov	r7, r3
 800fd52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd56:	2a30      	cmp	r2, #48	; 0x30
 800fd58:	d0fa      	beq.n	800fd50 <_dtoa_r+0xb68>
 800fd5a:	e6f9      	b.n	800fb50 <_dtoa_r+0x968>
 800fd5c:	9a03      	ldr	r2, [sp, #12]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d1a5      	bne.n	800fcae <_dtoa_r+0xac6>
 800fd62:	2331      	movs	r3, #49	; 0x31
 800fd64:	f10a 0a01 	add.w	sl, sl, #1
 800fd68:	e779      	b.n	800fc5e <_dtoa_r+0xa76>
 800fd6a:	4b14      	ldr	r3, [pc, #80]	; (800fdbc <_dtoa_r+0xbd4>)
 800fd6c:	f7ff baa8 	b.w	800f2c0 <_dtoa_r+0xd8>
 800fd70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	f47f aa81 	bne.w	800f27a <_dtoa_r+0x92>
 800fd78:	4b11      	ldr	r3, [pc, #68]	; (800fdc0 <_dtoa_r+0xbd8>)
 800fd7a:	f7ff baa1 	b.w	800f2c0 <_dtoa_r+0xd8>
 800fd7e:	f1b9 0f00 	cmp.w	r9, #0
 800fd82:	dc03      	bgt.n	800fd8c <_dtoa_r+0xba4>
 800fd84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd86:	2b02      	cmp	r3, #2
 800fd88:	f73f aecb 	bgt.w	800fb22 <_dtoa_r+0x93a>
 800fd8c:	9f03      	ldr	r7, [sp, #12]
 800fd8e:	4621      	mov	r1, r4
 800fd90:	4658      	mov	r0, fp
 800fd92:	f7ff f99b 	bl	800f0cc <quorem>
 800fd96:	9a03      	ldr	r2, [sp, #12]
 800fd98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fd9c:	f807 3b01 	strb.w	r3, [r7], #1
 800fda0:	1aba      	subs	r2, r7, r2
 800fda2:	4591      	cmp	r9, r2
 800fda4:	ddba      	ble.n	800fd1c <_dtoa_r+0xb34>
 800fda6:	4659      	mov	r1, fp
 800fda8:	2300      	movs	r3, #0
 800fdaa:	220a      	movs	r2, #10
 800fdac:	4628      	mov	r0, r5
 800fdae:	f000 f961 	bl	8010074 <__multadd>
 800fdb2:	4683      	mov	fp, r0
 800fdb4:	e7eb      	b.n	800fd8e <_dtoa_r+0xba6>
 800fdb6:	bf00      	nop
 800fdb8:	08011557 	.word	0x08011557
 800fdbc:	080114b4 	.word	0x080114b4
 800fdc0:	080114d8 	.word	0x080114d8

0800fdc4 <__sflush_r>:
 800fdc4:	898a      	ldrh	r2, [r1, #12]
 800fdc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc8:	4605      	mov	r5, r0
 800fdca:	0710      	lsls	r0, r2, #28
 800fdcc:	460c      	mov	r4, r1
 800fdce:	d457      	bmi.n	800fe80 <__sflush_r+0xbc>
 800fdd0:	684b      	ldr	r3, [r1, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	dc04      	bgt.n	800fde0 <__sflush_r+0x1c>
 800fdd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dc01      	bgt.n	800fde0 <__sflush_r+0x1c>
 800fddc:	2000      	movs	r0, #0
 800fdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fde0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fde2:	2e00      	cmp	r6, #0
 800fde4:	d0fa      	beq.n	800fddc <__sflush_r+0x18>
 800fde6:	2300      	movs	r3, #0
 800fde8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdec:	682f      	ldr	r7, [r5, #0]
 800fdee:	602b      	str	r3, [r5, #0]
 800fdf0:	d032      	beq.n	800fe58 <__sflush_r+0x94>
 800fdf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdf4:	89a3      	ldrh	r3, [r4, #12]
 800fdf6:	075a      	lsls	r2, r3, #29
 800fdf8:	d505      	bpl.n	800fe06 <__sflush_r+0x42>
 800fdfa:	6863      	ldr	r3, [r4, #4]
 800fdfc:	1ac0      	subs	r0, r0, r3
 800fdfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe00:	b10b      	cbz	r3, 800fe06 <__sflush_r+0x42>
 800fe02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe04:	1ac0      	subs	r0, r0, r3
 800fe06:	2300      	movs	r3, #0
 800fe08:	4602      	mov	r2, r0
 800fe0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe0c:	4628      	mov	r0, r5
 800fe0e:	6a21      	ldr	r1, [r4, #32]
 800fe10:	47b0      	blx	r6
 800fe12:	1c43      	adds	r3, r0, #1
 800fe14:	89a3      	ldrh	r3, [r4, #12]
 800fe16:	d106      	bne.n	800fe26 <__sflush_r+0x62>
 800fe18:	6829      	ldr	r1, [r5, #0]
 800fe1a:	291d      	cmp	r1, #29
 800fe1c:	d82c      	bhi.n	800fe78 <__sflush_r+0xb4>
 800fe1e:	4a29      	ldr	r2, [pc, #164]	; (800fec4 <__sflush_r+0x100>)
 800fe20:	40ca      	lsrs	r2, r1
 800fe22:	07d6      	lsls	r6, r2, #31
 800fe24:	d528      	bpl.n	800fe78 <__sflush_r+0xb4>
 800fe26:	2200      	movs	r2, #0
 800fe28:	6062      	str	r2, [r4, #4]
 800fe2a:	6922      	ldr	r2, [r4, #16]
 800fe2c:	04d9      	lsls	r1, r3, #19
 800fe2e:	6022      	str	r2, [r4, #0]
 800fe30:	d504      	bpl.n	800fe3c <__sflush_r+0x78>
 800fe32:	1c42      	adds	r2, r0, #1
 800fe34:	d101      	bne.n	800fe3a <__sflush_r+0x76>
 800fe36:	682b      	ldr	r3, [r5, #0]
 800fe38:	b903      	cbnz	r3, 800fe3c <__sflush_r+0x78>
 800fe3a:	6560      	str	r0, [r4, #84]	; 0x54
 800fe3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe3e:	602f      	str	r7, [r5, #0]
 800fe40:	2900      	cmp	r1, #0
 800fe42:	d0cb      	beq.n	800fddc <__sflush_r+0x18>
 800fe44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe48:	4299      	cmp	r1, r3
 800fe4a:	d002      	beq.n	800fe52 <__sflush_r+0x8e>
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	f000 fc45 	bl	80106dc <_free_r>
 800fe52:	2000      	movs	r0, #0
 800fe54:	6360      	str	r0, [r4, #52]	; 0x34
 800fe56:	e7c2      	b.n	800fdde <__sflush_r+0x1a>
 800fe58:	6a21      	ldr	r1, [r4, #32]
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	47b0      	blx	r6
 800fe60:	1c41      	adds	r1, r0, #1
 800fe62:	d1c7      	bne.n	800fdf4 <__sflush_r+0x30>
 800fe64:	682b      	ldr	r3, [r5, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d0c4      	beq.n	800fdf4 <__sflush_r+0x30>
 800fe6a:	2b1d      	cmp	r3, #29
 800fe6c:	d001      	beq.n	800fe72 <__sflush_r+0xae>
 800fe6e:	2b16      	cmp	r3, #22
 800fe70:	d101      	bne.n	800fe76 <__sflush_r+0xb2>
 800fe72:	602f      	str	r7, [r5, #0]
 800fe74:	e7b2      	b.n	800fddc <__sflush_r+0x18>
 800fe76:	89a3      	ldrh	r3, [r4, #12]
 800fe78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe7c:	81a3      	strh	r3, [r4, #12]
 800fe7e:	e7ae      	b.n	800fdde <__sflush_r+0x1a>
 800fe80:	690f      	ldr	r7, [r1, #16]
 800fe82:	2f00      	cmp	r7, #0
 800fe84:	d0aa      	beq.n	800fddc <__sflush_r+0x18>
 800fe86:	0793      	lsls	r3, r2, #30
 800fe88:	bf18      	it	ne
 800fe8a:	2300      	movne	r3, #0
 800fe8c:	680e      	ldr	r6, [r1, #0]
 800fe8e:	bf08      	it	eq
 800fe90:	694b      	ldreq	r3, [r1, #20]
 800fe92:	1bf6      	subs	r6, r6, r7
 800fe94:	600f      	str	r7, [r1, #0]
 800fe96:	608b      	str	r3, [r1, #8]
 800fe98:	2e00      	cmp	r6, #0
 800fe9a:	dd9f      	ble.n	800fddc <__sflush_r+0x18>
 800fe9c:	4633      	mov	r3, r6
 800fe9e:	463a      	mov	r2, r7
 800fea0:	4628      	mov	r0, r5
 800fea2:	6a21      	ldr	r1, [r4, #32]
 800fea4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800fea8:	47e0      	blx	ip
 800feaa:	2800      	cmp	r0, #0
 800feac:	dc06      	bgt.n	800febc <__sflush_r+0xf8>
 800feae:	89a3      	ldrh	r3, [r4, #12]
 800feb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800feb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feb8:	81a3      	strh	r3, [r4, #12]
 800feba:	e790      	b.n	800fdde <__sflush_r+0x1a>
 800febc:	4407      	add	r7, r0
 800febe:	1a36      	subs	r6, r6, r0
 800fec0:	e7ea      	b.n	800fe98 <__sflush_r+0xd4>
 800fec2:	bf00      	nop
 800fec4:	20400001 	.word	0x20400001

0800fec8 <_fflush_r>:
 800fec8:	b538      	push	{r3, r4, r5, lr}
 800feca:	690b      	ldr	r3, [r1, #16]
 800fecc:	4605      	mov	r5, r0
 800fece:	460c      	mov	r4, r1
 800fed0:	b913      	cbnz	r3, 800fed8 <_fflush_r+0x10>
 800fed2:	2500      	movs	r5, #0
 800fed4:	4628      	mov	r0, r5
 800fed6:	bd38      	pop	{r3, r4, r5, pc}
 800fed8:	b118      	cbz	r0, 800fee2 <_fflush_r+0x1a>
 800feda:	6983      	ldr	r3, [r0, #24]
 800fedc:	b90b      	cbnz	r3, 800fee2 <_fflush_r+0x1a>
 800fede:	f7fe fa17 	bl	800e310 <__sinit>
 800fee2:	4b14      	ldr	r3, [pc, #80]	; (800ff34 <_fflush_r+0x6c>)
 800fee4:	429c      	cmp	r4, r3
 800fee6:	d11b      	bne.n	800ff20 <_fflush_r+0x58>
 800fee8:	686c      	ldr	r4, [r5, #4]
 800feea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d0ef      	beq.n	800fed2 <_fflush_r+0xa>
 800fef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fef4:	07d0      	lsls	r0, r2, #31
 800fef6:	d404      	bmi.n	800ff02 <_fflush_r+0x3a>
 800fef8:	0599      	lsls	r1, r3, #22
 800fefa:	d402      	bmi.n	800ff02 <_fflush_r+0x3a>
 800fefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fefe:	f7fe faca 	bl	800e496 <__retarget_lock_acquire_recursive>
 800ff02:	4628      	mov	r0, r5
 800ff04:	4621      	mov	r1, r4
 800ff06:	f7ff ff5d 	bl	800fdc4 <__sflush_r>
 800ff0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff0c:	4605      	mov	r5, r0
 800ff0e:	07da      	lsls	r2, r3, #31
 800ff10:	d4e0      	bmi.n	800fed4 <_fflush_r+0xc>
 800ff12:	89a3      	ldrh	r3, [r4, #12]
 800ff14:	059b      	lsls	r3, r3, #22
 800ff16:	d4dd      	bmi.n	800fed4 <_fflush_r+0xc>
 800ff18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff1a:	f7fe fabd 	bl	800e498 <__retarget_lock_release_recursive>
 800ff1e:	e7d9      	b.n	800fed4 <_fflush_r+0xc>
 800ff20:	4b05      	ldr	r3, [pc, #20]	; (800ff38 <_fflush_r+0x70>)
 800ff22:	429c      	cmp	r4, r3
 800ff24:	d101      	bne.n	800ff2a <_fflush_r+0x62>
 800ff26:	68ac      	ldr	r4, [r5, #8]
 800ff28:	e7df      	b.n	800feea <_fflush_r+0x22>
 800ff2a:	4b04      	ldr	r3, [pc, #16]	; (800ff3c <_fflush_r+0x74>)
 800ff2c:	429c      	cmp	r4, r3
 800ff2e:	bf08      	it	eq
 800ff30:	68ec      	ldreq	r4, [r5, #12]
 800ff32:	e7da      	b.n	800feea <_fflush_r+0x22>
 800ff34:	08011460 	.word	0x08011460
 800ff38:	08011480 	.word	0x08011480
 800ff3c:	08011440 	.word	0x08011440

0800ff40 <_localeconv_r>:
 800ff40:	4800      	ldr	r0, [pc, #0]	; (800ff44 <_localeconv_r+0x4>)
 800ff42:	4770      	bx	lr
 800ff44:	2000022c 	.word	0x2000022c

0800ff48 <_lseek_r>:
 800ff48:	b538      	push	{r3, r4, r5, lr}
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	4608      	mov	r0, r1
 800ff4e:	4611      	mov	r1, r2
 800ff50:	2200      	movs	r2, #0
 800ff52:	4d05      	ldr	r5, [pc, #20]	; (800ff68 <_lseek_r+0x20>)
 800ff54:	602a      	str	r2, [r5, #0]
 800ff56:	461a      	mov	r2, r3
 800ff58:	f7f2 fa16 	bl	8002388 <_lseek>
 800ff5c:	1c43      	adds	r3, r0, #1
 800ff5e:	d102      	bne.n	800ff66 <_lseek_r+0x1e>
 800ff60:	682b      	ldr	r3, [r5, #0]
 800ff62:	b103      	cbz	r3, 800ff66 <_lseek_r+0x1e>
 800ff64:	6023      	str	r3, [r4, #0]
 800ff66:	bd38      	pop	{r3, r4, r5, pc}
 800ff68:	20001c70 	.word	0x20001c70

0800ff6c <malloc>:
 800ff6c:	4b02      	ldr	r3, [pc, #8]	; (800ff78 <malloc+0xc>)
 800ff6e:	4601      	mov	r1, r0
 800ff70:	6818      	ldr	r0, [r3, #0]
 800ff72:	f7fe bac9 	b.w	800e508 <_malloc_r>
 800ff76:	bf00      	nop
 800ff78:	200000d8 	.word	0x200000d8

0800ff7c <memchr>:
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	b510      	push	{r4, lr}
 800ff80:	b2c9      	uxtb	r1, r1
 800ff82:	4402      	add	r2, r0
 800ff84:	4293      	cmp	r3, r2
 800ff86:	4618      	mov	r0, r3
 800ff88:	d101      	bne.n	800ff8e <memchr+0x12>
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	e003      	b.n	800ff96 <memchr+0x1a>
 800ff8e:	7804      	ldrb	r4, [r0, #0]
 800ff90:	3301      	adds	r3, #1
 800ff92:	428c      	cmp	r4, r1
 800ff94:	d1f6      	bne.n	800ff84 <memchr+0x8>
 800ff96:	bd10      	pop	{r4, pc}

0800ff98 <__malloc_lock>:
 800ff98:	4801      	ldr	r0, [pc, #4]	; (800ffa0 <__malloc_lock+0x8>)
 800ff9a:	f7fe ba7c 	b.w	800e496 <__retarget_lock_acquire_recursive>
 800ff9e:	bf00      	nop
 800ffa0:	20001c64 	.word	0x20001c64

0800ffa4 <__malloc_unlock>:
 800ffa4:	4801      	ldr	r0, [pc, #4]	; (800ffac <__malloc_unlock+0x8>)
 800ffa6:	f7fe ba77 	b.w	800e498 <__retarget_lock_release_recursive>
 800ffaa:	bf00      	nop
 800ffac:	20001c64 	.word	0x20001c64

0800ffb0 <_Balloc>:
 800ffb0:	b570      	push	{r4, r5, r6, lr}
 800ffb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	460d      	mov	r5, r1
 800ffb8:	b976      	cbnz	r6, 800ffd8 <_Balloc+0x28>
 800ffba:	2010      	movs	r0, #16
 800ffbc:	f7ff ffd6 	bl	800ff6c <malloc>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	6260      	str	r0, [r4, #36]	; 0x24
 800ffc4:	b920      	cbnz	r0, 800ffd0 <_Balloc+0x20>
 800ffc6:	2166      	movs	r1, #102	; 0x66
 800ffc8:	4b17      	ldr	r3, [pc, #92]	; (8010028 <_Balloc+0x78>)
 800ffca:	4818      	ldr	r0, [pc, #96]	; (801002c <_Balloc+0x7c>)
 800ffcc:	f000 fd3c 	bl	8010a48 <__assert_func>
 800ffd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffd4:	6006      	str	r6, [r0, #0]
 800ffd6:	60c6      	str	r6, [r0, #12]
 800ffd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ffda:	68f3      	ldr	r3, [r6, #12]
 800ffdc:	b183      	cbz	r3, 8010000 <_Balloc+0x50>
 800ffde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ffe6:	b9b8      	cbnz	r0, 8010018 <_Balloc+0x68>
 800ffe8:	2101      	movs	r1, #1
 800ffea:	fa01 f605 	lsl.w	r6, r1, r5
 800ffee:	1d72      	adds	r2, r6, #5
 800fff0:	4620      	mov	r0, r4
 800fff2:	0092      	lsls	r2, r2, #2
 800fff4:	f000 fb5e 	bl	80106b4 <_calloc_r>
 800fff8:	b160      	cbz	r0, 8010014 <_Balloc+0x64>
 800fffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fffe:	e00e      	b.n	801001e <_Balloc+0x6e>
 8010000:	2221      	movs	r2, #33	; 0x21
 8010002:	2104      	movs	r1, #4
 8010004:	4620      	mov	r0, r4
 8010006:	f000 fb55 	bl	80106b4 <_calloc_r>
 801000a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801000c:	60f0      	str	r0, [r6, #12]
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1e4      	bne.n	800ffde <_Balloc+0x2e>
 8010014:	2000      	movs	r0, #0
 8010016:	bd70      	pop	{r4, r5, r6, pc}
 8010018:	6802      	ldr	r2, [r0, #0]
 801001a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801001e:	2300      	movs	r3, #0
 8010020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010024:	e7f7      	b.n	8010016 <_Balloc+0x66>
 8010026:	bf00      	nop
 8010028:	080114e5 	.word	0x080114e5
 801002c:	08011568 	.word	0x08011568

08010030 <_Bfree>:
 8010030:	b570      	push	{r4, r5, r6, lr}
 8010032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010034:	4605      	mov	r5, r0
 8010036:	460c      	mov	r4, r1
 8010038:	b976      	cbnz	r6, 8010058 <_Bfree+0x28>
 801003a:	2010      	movs	r0, #16
 801003c:	f7ff ff96 	bl	800ff6c <malloc>
 8010040:	4602      	mov	r2, r0
 8010042:	6268      	str	r0, [r5, #36]	; 0x24
 8010044:	b920      	cbnz	r0, 8010050 <_Bfree+0x20>
 8010046:	218a      	movs	r1, #138	; 0x8a
 8010048:	4b08      	ldr	r3, [pc, #32]	; (801006c <_Bfree+0x3c>)
 801004a:	4809      	ldr	r0, [pc, #36]	; (8010070 <_Bfree+0x40>)
 801004c:	f000 fcfc 	bl	8010a48 <__assert_func>
 8010050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010054:	6006      	str	r6, [r0, #0]
 8010056:	60c6      	str	r6, [r0, #12]
 8010058:	b13c      	cbz	r4, 801006a <_Bfree+0x3a>
 801005a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801005c:	6862      	ldr	r2, [r4, #4]
 801005e:	68db      	ldr	r3, [r3, #12]
 8010060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010064:	6021      	str	r1, [r4, #0]
 8010066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801006a:	bd70      	pop	{r4, r5, r6, pc}
 801006c:	080114e5 	.word	0x080114e5
 8010070:	08011568 	.word	0x08011568

08010074 <__multadd>:
 8010074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010078:	4607      	mov	r7, r0
 801007a:	460c      	mov	r4, r1
 801007c:	461e      	mov	r6, r3
 801007e:	2000      	movs	r0, #0
 8010080:	690d      	ldr	r5, [r1, #16]
 8010082:	f101 0c14 	add.w	ip, r1, #20
 8010086:	f8dc 3000 	ldr.w	r3, [ip]
 801008a:	3001      	adds	r0, #1
 801008c:	b299      	uxth	r1, r3
 801008e:	fb02 6101 	mla	r1, r2, r1, r6
 8010092:	0c1e      	lsrs	r6, r3, #16
 8010094:	0c0b      	lsrs	r3, r1, #16
 8010096:	fb02 3306 	mla	r3, r2, r6, r3
 801009a:	b289      	uxth	r1, r1
 801009c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100a0:	4285      	cmp	r5, r0
 80100a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100a6:	f84c 1b04 	str.w	r1, [ip], #4
 80100aa:	dcec      	bgt.n	8010086 <__multadd+0x12>
 80100ac:	b30e      	cbz	r6, 80100f2 <__multadd+0x7e>
 80100ae:	68a3      	ldr	r3, [r4, #8]
 80100b0:	42ab      	cmp	r3, r5
 80100b2:	dc19      	bgt.n	80100e8 <__multadd+0x74>
 80100b4:	6861      	ldr	r1, [r4, #4]
 80100b6:	4638      	mov	r0, r7
 80100b8:	3101      	adds	r1, #1
 80100ba:	f7ff ff79 	bl	800ffb0 <_Balloc>
 80100be:	4680      	mov	r8, r0
 80100c0:	b928      	cbnz	r0, 80100ce <__multadd+0x5a>
 80100c2:	4602      	mov	r2, r0
 80100c4:	21b5      	movs	r1, #181	; 0xb5
 80100c6:	4b0c      	ldr	r3, [pc, #48]	; (80100f8 <__multadd+0x84>)
 80100c8:	480c      	ldr	r0, [pc, #48]	; (80100fc <__multadd+0x88>)
 80100ca:	f000 fcbd 	bl	8010a48 <__assert_func>
 80100ce:	6922      	ldr	r2, [r4, #16]
 80100d0:	f104 010c 	add.w	r1, r4, #12
 80100d4:	3202      	adds	r2, #2
 80100d6:	0092      	lsls	r2, r2, #2
 80100d8:	300c      	adds	r0, #12
 80100da:	f7fe f9de 	bl	800e49a <memcpy>
 80100de:	4621      	mov	r1, r4
 80100e0:	4638      	mov	r0, r7
 80100e2:	f7ff ffa5 	bl	8010030 <_Bfree>
 80100e6:	4644      	mov	r4, r8
 80100e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80100ec:	3501      	adds	r5, #1
 80100ee:	615e      	str	r6, [r3, #20]
 80100f0:	6125      	str	r5, [r4, #16]
 80100f2:	4620      	mov	r0, r4
 80100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f8:	08011557 	.word	0x08011557
 80100fc:	08011568 	.word	0x08011568

08010100 <__hi0bits>:
 8010100:	0c02      	lsrs	r2, r0, #16
 8010102:	0412      	lsls	r2, r2, #16
 8010104:	4603      	mov	r3, r0
 8010106:	b9ca      	cbnz	r2, 801013c <__hi0bits+0x3c>
 8010108:	0403      	lsls	r3, r0, #16
 801010a:	2010      	movs	r0, #16
 801010c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010110:	bf04      	itt	eq
 8010112:	021b      	lsleq	r3, r3, #8
 8010114:	3008      	addeq	r0, #8
 8010116:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801011a:	bf04      	itt	eq
 801011c:	011b      	lsleq	r3, r3, #4
 801011e:	3004      	addeq	r0, #4
 8010120:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010124:	bf04      	itt	eq
 8010126:	009b      	lsleq	r3, r3, #2
 8010128:	3002      	addeq	r0, #2
 801012a:	2b00      	cmp	r3, #0
 801012c:	db05      	blt.n	801013a <__hi0bits+0x3a>
 801012e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8010132:	f100 0001 	add.w	r0, r0, #1
 8010136:	bf08      	it	eq
 8010138:	2020      	moveq	r0, #32
 801013a:	4770      	bx	lr
 801013c:	2000      	movs	r0, #0
 801013e:	e7e5      	b.n	801010c <__hi0bits+0xc>

08010140 <__lo0bits>:
 8010140:	6803      	ldr	r3, [r0, #0]
 8010142:	4602      	mov	r2, r0
 8010144:	f013 0007 	ands.w	r0, r3, #7
 8010148:	d00b      	beq.n	8010162 <__lo0bits+0x22>
 801014a:	07d9      	lsls	r1, r3, #31
 801014c:	d421      	bmi.n	8010192 <__lo0bits+0x52>
 801014e:	0798      	lsls	r0, r3, #30
 8010150:	bf49      	itett	mi
 8010152:	085b      	lsrmi	r3, r3, #1
 8010154:	089b      	lsrpl	r3, r3, #2
 8010156:	2001      	movmi	r0, #1
 8010158:	6013      	strmi	r3, [r2, #0]
 801015a:	bf5c      	itt	pl
 801015c:	2002      	movpl	r0, #2
 801015e:	6013      	strpl	r3, [r2, #0]
 8010160:	4770      	bx	lr
 8010162:	b299      	uxth	r1, r3
 8010164:	b909      	cbnz	r1, 801016a <__lo0bits+0x2a>
 8010166:	2010      	movs	r0, #16
 8010168:	0c1b      	lsrs	r3, r3, #16
 801016a:	b2d9      	uxtb	r1, r3
 801016c:	b909      	cbnz	r1, 8010172 <__lo0bits+0x32>
 801016e:	3008      	adds	r0, #8
 8010170:	0a1b      	lsrs	r3, r3, #8
 8010172:	0719      	lsls	r1, r3, #28
 8010174:	bf04      	itt	eq
 8010176:	091b      	lsreq	r3, r3, #4
 8010178:	3004      	addeq	r0, #4
 801017a:	0799      	lsls	r1, r3, #30
 801017c:	bf04      	itt	eq
 801017e:	089b      	lsreq	r3, r3, #2
 8010180:	3002      	addeq	r0, #2
 8010182:	07d9      	lsls	r1, r3, #31
 8010184:	d403      	bmi.n	801018e <__lo0bits+0x4e>
 8010186:	085b      	lsrs	r3, r3, #1
 8010188:	f100 0001 	add.w	r0, r0, #1
 801018c:	d003      	beq.n	8010196 <__lo0bits+0x56>
 801018e:	6013      	str	r3, [r2, #0]
 8010190:	4770      	bx	lr
 8010192:	2000      	movs	r0, #0
 8010194:	4770      	bx	lr
 8010196:	2020      	movs	r0, #32
 8010198:	4770      	bx	lr
	...

0801019c <__i2b>:
 801019c:	b510      	push	{r4, lr}
 801019e:	460c      	mov	r4, r1
 80101a0:	2101      	movs	r1, #1
 80101a2:	f7ff ff05 	bl	800ffb0 <_Balloc>
 80101a6:	4602      	mov	r2, r0
 80101a8:	b928      	cbnz	r0, 80101b6 <__i2b+0x1a>
 80101aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80101ae:	4b04      	ldr	r3, [pc, #16]	; (80101c0 <__i2b+0x24>)
 80101b0:	4804      	ldr	r0, [pc, #16]	; (80101c4 <__i2b+0x28>)
 80101b2:	f000 fc49 	bl	8010a48 <__assert_func>
 80101b6:	2301      	movs	r3, #1
 80101b8:	6144      	str	r4, [r0, #20]
 80101ba:	6103      	str	r3, [r0, #16]
 80101bc:	bd10      	pop	{r4, pc}
 80101be:	bf00      	nop
 80101c0:	08011557 	.word	0x08011557
 80101c4:	08011568 	.word	0x08011568

080101c8 <__multiply>:
 80101c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	4691      	mov	r9, r2
 80101ce:	690a      	ldr	r2, [r1, #16]
 80101d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80101d4:	460c      	mov	r4, r1
 80101d6:	429a      	cmp	r2, r3
 80101d8:	bfbe      	ittt	lt
 80101da:	460b      	movlt	r3, r1
 80101dc:	464c      	movlt	r4, r9
 80101de:	4699      	movlt	r9, r3
 80101e0:	6927      	ldr	r7, [r4, #16]
 80101e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80101e6:	68a3      	ldr	r3, [r4, #8]
 80101e8:	6861      	ldr	r1, [r4, #4]
 80101ea:	eb07 060a 	add.w	r6, r7, sl
 80101ee:	42b3      	cmp	r3, r6
 80101f0:	b085      	sub	sp, #20
 80101f2:	bfb8      	it	lt
 80101f4:	3101      	addlt	r1, #1
 80101f6:	f7ff fedb 	bl	800ffb0 <_Balloc>
 80101fa:	b930      	cbnz	r0, 801020a <__multiply+0x42>
 80101fc:	4602      	mov	r2, r0
 80101fe:	f240 115d 	movw	r1, #349	; 0x15d
 8010202:	4b43      	ldr	r3, [pc, #268]	; (8010310 <__multiply+0x148>)
 8010204:	4843      	ldr	r0, [pc, #268]	; (8010314 <__multiply+0x14c>)
 8010206:	f000 fc1f 	bl	8010a48 <__assert_func>
 801020a:	f100 0514 	add.w	r5, r0, #20
 801020e:	462b      	mov	r3, r5
 8010210:	2200      	movs	r2, #0
 8010212:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010216:	4543      	cmp	r3, r8
 8010218:	d321      	bcc.n	801025e <__multiply+0x96>
 801021a:	f104 0314 	add.w	r3, r4, #20
 801021e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010222:	f109 0314 	add.w	r3, r9, #20
 8010226:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801022a:	9202      	str	r2, [sp, #8]
 801022c:	1b3a      	subs	r2, r7, r4
 801022e:	3a15      	subs	r2, #21
 8010230:	f022 0203 	bic.w	r2, r2, #3
 8010234:	3204      	adds	r2, #4
 8010236:	f104 0115 	add.w	r1, r4, #21
 801023a:	428f      	cmp	r7, r1
 801023c:	bf38      	it	cc
 801023e:	2204      	movcc	r2, #4
 8010240:	9201      	str	r2, [sp, #4]
 8010242:	9a02      	ldr	r2, [sp, #8]
 8010244:	9303      	str	r3, [sp, #12]
 8010246:	429a      	cmp	r2, r3
 8010248:	d80c      	bhi.n	8010264 <__multiply+0x9c>
 801024a:	2e00      	cmp	r6, #0
 801024c:	dd03      	ble.n	8010256 <__multiply+0x8e>
 801024e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010252:	2b00      	cmp	r3, #0
 8010254:	d059      	beq.n	801030a <__multiply+0x142>
 8010256:	6106      	str	r6, [r0, #16]
 8010258:	b005      	add	sp, #20
 801025a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025e:	f843 2b04 	str.w	r2, [r3], #4
 8010262:	e7d8      	b.n	8010216 <__multiply+0x4e>
 8010264:	f8b3 a000 	ldrh.w	sl, [r3]
 8010268:	f1ba 0f00 	cmp.w	sl, #0
 801026c:	d023      	beq.n	80102b6 <__multiply+0xee>
 801026e:	46a9      	mov	r9, r5
 8010270:	f04f 0c00 	mov.w	ip, #0
 8010274:	f104 0e14 	add.w	lr, r4, #20
 8010278:	f85e 2b04 	ldr.w	r2, [lr], #4
 801027c:	f8d9 1000 	ldr.w	r1, [r9]
 8010280:	fa1f fb82 	uxth.w	fp, r2
 8010284:	b289      	uxth	r1, r1
 8010286:	fb0a 110b 	mla	r1, sl, fp, r1
 801028a:	4461      	add	r1, ip
 801028c:	f8d9 c000 	ldr.w	ip, [r9]
 8010290:	0c12      	lsrs	r2, r2, #16
 8010292:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010296:	fb0a c202 	mla	r2, sl, r2, ip
 801029a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801029e:	b289      	uxth	r1, r1
 80102a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80102a4:	4577      	cmp	r7, lr
 80102a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80102aa:	f849 1b04 	str.w	r1, [r9], #4
 80102ae:	d8e3      	bhi.n	8010278 <__multiply+0xb0>
 80102b0:	9a01      	ldr	r2, [sp, #4]
 80102b2:	f845 c002 	str.w	ip, [r5, r2]
 80102b6:	9a03      	ldr	r2, [sp, #12]
 80102b8:	3304      	adds	r3, #4
 80102ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80102be:	f1b9 0f00 	cmp.w	r9, #0
 80102c2:	d020      	beq.n	8010306 <__multiply+0x13e>
 80102c4:	46ae      	mov	lr, r5
 80102c6:	f04f 0a00 	mov.w	sl, #0
 80102ca:	6829      	ldr	r1, [r5, #0]
 80102cc:	f104 0c14 	add.w	ip, r4, #20
 80102d0:	f8bc b000 	ldrh.w	fp, [ip]
 80102d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80102d8:	b289      	uxth	r1, r1
 80102da:	fb09 220b 	mla	r2, r9, fp, r2
 80102de:	4492      	add	sl, r2
 80102e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80102e4:	f84e 1b04 	str.w	r1, [lr], #4
 80102e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80102ec:	f8be 1000 	ldrh.w	r1, [lr]
 80102f0:	0c12      	lsrs	r2, r2, #16
 80102f2:	fb09 1102 	mla	r1, r9, r2, r1
 80102f6:	4567      	cmp	r7, ip
 80102f8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80102fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010300:	d8e6      	bhi.n	80102d0 <__multiply+0x108>
 8010302:	9a01      	ldr	r2, [sp, #4]
 8010304:	50a9      	str	r1, [r5, r2]
 8010306:	3504      	adds	r5, #4
 8010308:	e79b      	b.n	8010242 <__multiply+0x7a>
 801030a:	3e01      	subs	r6, #1
 801030c:	e79d      	b.n	801024a <__multiply+0x82>
 801030e:	bf00      	nop
 8010310:	08011557 	.word	0x08011557
 8010314:	08011568 	.word	0x08011568

08010318 <__pow5mult>:
 8010318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801031c:	4615      	mov	r5, r2
 801031e:	f012 0203 	ands.w	r2, r2, #3
 8010322:	4606      	mov	r6, r0
 8010324:	460f      	mov	r7, r1
 8010326:	d007      	beq.n	8010338 <__pow5mult+0x20>
 8010328:	4c25      	ldr	r4, [pc, #148]	; (80103c0 <__pow5mult+0xa8>)
 801032a:	3a01      	subs	r2, #1
 801032c:	2300      	movs	r3, #0
 801032e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010332:	f7ff fe9f 	bl	8010074 <__multadd>
 8010336:	4607      	mov	r7, r0
 8010338:	10ad      	asrs	r5, r5, #2
 801033a:	d03d      	beq.n	80103b8 <__pow5mult+0xa0>
 801033c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801033e:	b97c      	cbnz	r4, 8010360 <__pow5mult+0x48>
 8010340:	2010      	movs	r0, #16
 8010342:	f7ff fe13 	bl	800ff6c <malloc>
 8010346:	4602      	mov	r2, r0
 8010348:	6270      	str	r0, [r6, #36]	; 0x24
 801034a:	b928      	cbnz	r0, 8010358 <__pow5mult+0x40>
 801034c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010350:	4b1c      	ldr	r3, [pc, #112]	; (80103c4 <__pow5mult+0xac>)
 8010352:	481d      	ldr	r0, [pc, #116]	; (80103c8 <__pow5mult+0xb0>)
 8010354:	f000 fb78 	bl	8010a48 <__assert_func>
 8010358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801035c:	6004      	str	r4, [r0, #0]
 801035e:	60c4      	str	r4, [r0, #12]
 8010360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010368:	b94c      	cbnz	r4, 801037e <__pow5mult+0x66>
 801036a:	f240 2171 	movw	r1, #625	; 0x271
 801036e:	4630      	mov	r0, r6
 8010370:	f7ff ff14 	bl	801019c <__i2b>
 8010374:	2300      	movs	r3, #0
 8010376:	4604      	mov	r4, r0
 8010378:	f8c8 0008 	str.w	r0, [r8, #8]
 801037c:	6003      	str	r3, [r0, #0]
 801037e:	f04f 0900 	mov.w	r9, #0
 8010382:	07eb      	lsls	r3, r5, #31
 8010384:	d50a      	bpl.n	801039c <__pow5mult+0x84>
 8010386:	4639      	mov	r1, r7
 8010388:	4622      	mov	r2, r4
 801038a:	4630      	mov	r0, r6
 801038c:	f7ff ff1c 	bl	80101c8 <__multiply>
 8010390:	4680      	mov	r8, r0
 8010392:	4639      	mov	r1, r7
 8010394:	4630      	mov	r0, r6
 8010396:	f7ff fe4b 	bl	8010030 <_Bfree>
 801039a:	4647      	mov	r7, r8
 801039c:	106d      	asrs	r5, r5, #1
 801039e:	d00b      	beq.n	80103b8 <__pow5mult+0xa0>
 80103a0:	6820      	ldr	r0, [r4, #0]
 80103a2:	b938      	cbnz	r0, 80103b4 <__pow5mult+0x9c>
 80103a4:	4622      	mov	r2, r4
 80103a6:	4621      	mov	r1, r4
 80103a8:	4630      	mov	r0, r6
 80103aa:	f7ff ff0d 	bl	80101c8 <__multiply>
 80103ae:	6020      	str	r0, [r4, #0]
 80103b0:	f8c0 9000 	str.w	r9, [r0]
 80103b4:	4604      	mov	r4, r0
 80103b6:	e7e4      	b.n	8010382 <__pow5mult+0x6a>
 80103b8:	4638      	mov	r0, r7
 80103ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103be:	bf00      	nop
 80103c0:	080116b8 	.word	0x080116b8
 80103c4:	080114e5 	.word	0x080114e5
 80103c8:	08011568 	.word	0x08011568

080103cc <__lshift>:
 80103cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103d0:	460c      	mov	r4, r1
 80103d2:	4607      	mov	r7, r0
 80103d4:	4691      	mov	r9, r2
 80103d6:	6923      	ldr	r3, [r4, #16]
 80103d8:	6849      	ldr	r1, [r1, #4]
 80103da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80103de:	68a3      	ldr	r3, [r4, #8]
 80103e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80103e4:	f108 0601 	add.w	r6, r8, #1
 80103e8:	42b3      	cmp	r3, r6
 80103ea:	db0b      	blt.n	8010404 <__lshift+0x38>
 80103ec:	4638      	mov	r0, r7
 80103ee:	f7ff fddf 	bl	800ffb0 <_Balloc>
 80103f2:	4605      	mov	r5, r0
 80103f4:	b948      	cbnz	r0, 801040a <__lshift+0x3e>
 80103f6:	4602      	mov	r2, r0
 80103f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80103fc:	4b29      	ldr	r3, [pc, #164]	; (80104a4 <__lshift+0xd8>)
 80103fe:	482a      	ldr	r0, [pc, #168]	; (80104a8 <__lshift+0xdc>)
 8010400:	f000 fb22 	bl	8010a48 <__assert_func>
 8010404:	3101      	adds	r1, #1
 8010406:	005b      	lsls	r3, r3, #1
 8010408:	e7ee      	b.n	80103e8 <__lshift+0x1c>
 801040a:	2300      	movs	r3, #0
 801040c:	f100 0114 	add.w	r1, r0, #20
 8010410:	f100 0210 	add.w	r2, r0, #16
 8010414:	4618      	mov	r0, r3
 8010416:	4553      	cmp	r3, sl
 8010418:	db37      	blt.n	801048a <__lshift+0xbe>
 801041a:	6920      	ldr	r0, [r4, #16]
 801041c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010420:	f104 0314 	add.w	r3, r4, #20
 8010424:	f019 091f 	ands.w	r9, r9, #31
 8010428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801042c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010430:	d02f      	beq.n	8010492 <__lshift+0xc6>
 8010432:	468a      	mov	sl, r1
 8010434:	f04f 0c00 	mov.w	ip, #0
 8010438:	f1c9 0e20 	rsb	lr, r9, #32
 801043c:	681a      	ldr	r2, [r3, #0]
 801043e:	fa02 f209 	lsl.w	r2, r2, r9
 8010442:	ea42 020c 	orr.w	r2, r2, ip
 8010446:	f84a 2b04 	str.w	r2, [sl], #4
 801044a:	f853 2b04 	ldr.w	r2, [r3], #4
 801044e:	4298      	cmp	r0, r3
 8010450:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010454:	d8f2      	bhi.n	801043c <__lshift+0x70>
 8010456:	1b03      	subs	r3, r0, r4
 8010458:	3b15      	subs	r3, #21
 801045a:	f023 0303 	bic.w	r3, r3, #3
 801045e:	3304      	adds	r3, #4
 8010460:	f104 0215 	add.w	r2, r4, #21
 8010464:	4290      	cmp	r0, r2
 8010466:	bf38      	it	cc
 8010468:	2304      	movcc	r3, #4
 801046a:	f841 c003 	str.w	ip, [r1, r3]
 801046e:	f1bc 0f00 	cmp.w	ip, #0
 8010472:	d001      	beq.n	8010478 <__lshift+0xac>
 8010474:	f108 0602 	add.w	r6, r8, #2
 8010478:	3e01      	subs	r6, #1
 801047a:	4638      	mov	r0, r7
 801047c:	4621      	mov	r1, r4
 801047e:	612e      	str	r6, [r5, #16]
 8010480:	f7ff fdd6 	bl	8010030 <_Bfree>
 8010484:	4628      	mov	r0, r5
 8010486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801048a:	f842 0f04 	str.w	r0, [r2, #4]!
 801048e:	3301      	adds	r3, #1
 8010490:	e7c1      	b.n	8010416 <__lshift+0x4a>
 8010492:	3904      	subs	r1, #4
 8010494:	f853 2b04 	ldr.w	r2, [r3], #4
 8010498:	4298      	cmp	r0, r3
 801049a:	f841 2f04 	str.w	r2, [r1, #4]!
 801049e:	d8f9      	bhi.n	8010494 <__lshift+0xc8>
 80104a0:	e7ea      	b.n	8010478 <__lshift+0xac>
 80104a2:	bf00      	nop
 80104a4:	08011557 	.word	0x08011557
 80104a8:	08011568 	.word	0x08011568

080104ac <__mcmp>:
 80104ac:	4603      	mov	r3, r0
 80104ae:	690a      	ldr	r2, [r1, #16]
 80104b0:	6900      	ldr	r0, [r0, #16]
 80104b2:	b530      	push	{r4, r5, lr}
 80104b4:	1a80      	subs	r0, r0, r2
 80104b6:	d10d      	bne.n	80104d4 <__mcmp+0x28>
 80104b8:	3314      	adds	r3, #20
 80104ba:	3114      	adds	r1, #20
 80104bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80104c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80104c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80104c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80104cc:	4295      	cmp	r5, r2
 80104ce:	d002      	beq.n	80104d6 <__mcmp+0x2a>
 80104d0:	d304      	bcc.n	80104dc <__mcmp+0x30>
 80104d2:	2001      	movs	r0, #1
 80104d4:	bd30      	pop	{r4, r5, pc}
 80104d6:	42a3      	cmp	r3, r4
 80104d8:	d3f4      	bcc.n	80104c4 <__mcmp+0x18>
 80104da:	e7fb      	b.n	80104d4 <__mcmp+0x28>
 80104dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104e0:	e7f8      	b.n	80104d4 <__mcmp+0x28>
	...

080104e4 <__mdiff>:
 80104e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e8:	460d      	mov	r5, r1
 80104ea:	4607      	mov	r7, r0
 80104ec:	4611      	mov	r1, r2
 80104ee:	4628      	mov	r0, r5
 80104f0:	4614      	mov	r4, r2
 80104f2:	f7ff ffdb 	bl	80104ac <__mcmp>
 80104f6:	1e06      	subs	r6, r0, #0
 80104f8:	d111      	bne.n	801051e <__mdiff+0x3a>
 80104fa:	4631      	mov	r1, r6
 80104fc:	4638      	mov	r0, r7
 80104fe:	f7ff fd57 	bl	800ffb0 <_Balloc>
 8010502:	4602      	mov	r2, r0
 8010504:	b928      	cbnz	r0, 8010512 <__mdiff+0x2e>
 8010506:	f240 2132 	movw	r1, #562	; 0x232
 801050a:	4b3a      	ldr	r3, [pc, #232]	; (80105f4 <__mdiff+0x110>)
 801050c:	483a      	ldr	r0, [pc, #232]	; (80105f8 <__mdiff+0x114>)
 801050e:	f000 fa9b 	bl	8010a48 <__assert_func>
 8010512:	2301      	movs	r3, #1
 8010514:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010518:	4610      	mov	r0, r2
 801051a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801051e:	bfa4      	itt	ge
 8010520:	4623      	movge	r3, r4
 8010522:	462c      	movge	r4, r5
 8010524:	4638      	mov	r0, r7
 8010526:	6861      	ldr	r1, [r4, #4]
 8010528:	bfa6      	itte	ge
 801052a:	461d      	movge	r5, r3
 801052c:	2600      	movge	r6, #0
 801052e:	2601      	movlt	r6, #1
 8010530:	f7ff fd3e 	bl	800ffb0 <_Balloc>
 8010534:	4602      	mov	r2, r0
 8010536:	b918      	cbnz	r0, 8010540 <__mdiff+0x5c>
 8010538:	f44f 7110 	mov.w	r1, #576	; 0x240
 801053c:	4b2d      	ldr	r3, [pc, #180]	; (80105f4 <__mdiff+0x110>)
 801053e:	e7e5      	b.n	801050c <__mdiff+0x28>
 8010540:	f102 0814 	add.w	r8, r2, #20
 8010544:	46c2      	mov	sl, r8
 8010546:	f04f 0c00 	mov.w	ip, #0
 801054a:	6927      	ldr	r7, [r4, #16]
 801054c:	60c6      	str	r6, [r0, #12]
 801054e:	692e      	ldr	r6, [r5, #16]
 8010550:	f104 0014 	add.w	r0, r4, #20
 8010554:	f105 0914 	add.w	r9, r5, #20
 8010558:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 801055c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010560:	3410      	adds	r4, #16
 8010562:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8010566:	f859 3b04 	ldr.w	r3, [r9], #4
 801056a:	fa1f f18b 	uxth.w	r1, fp
 801056e:	448c      	add	ip, r1
 8010570:	b299      	uxth	r1, r3
 8010572:	0c1b      	lsrs	r3, r3, #16
 8010574:	ebac 0101 	sub.w	r1, ip, r1
 8010578:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801057c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010580:	b289      	uxth	r1, r1
 8010582:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8010586:	454e      	cmp	r6, r9
 8010588:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801058c:	f84a 3b04 	str.w	r3, [sl], #4
 8010590:	d8e7      	bhi.n	8010562 <__mdiff+0x7e>
 8010592:	1b73      	subs	r3, r6, r5
 8010594:	3b15      	subs	r3, #21
 8010596:	f023 0303 	bic.w	r3, r3, #3
 801059a:	3515      	adds	r5, #21
 801059c:	3304      	adds	r3, #4
 801059e:	42ae      	cmp	r6, r5
 80105a0:	bf38      	it	cc
 80105a2:	2304      	movcc	r3, #4
 80105a4:	4418      	add	r0, r3
 80105a6:	4443      	add	r3, r8
 80105a8:	461e      	mov	r6, r3
 80105aa:	4605      	mov	r5, r0
 80105ac:	4575      	cmp	r5, lr
 80105ae:	d30e      	bcc.n	80105ce <__mdiff+0xea>
 80105b0:	f10e 0103 	add.w	r1, lr, #3
 80105b4:	1a09      	subs	r1, r1, r0
 80105b6:	f021 0103 	bic.w	r1, r1, #3
 80105ba:	3803      	subs	r0, #3
 80105bc:	4586      	cmp	lr, r0
 80105be:	bf38      	it	cc
 80105c0:	2100      	movcc	r1, #0
 80105c2:	4419      	add	r1, r3
 80105c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80105c8:	b18b      	cbz	r3, 80105ee <__mdiff+0x10a>
 80105ca:	6117      	str	r7, [r2, #16]
 80105cc:	e7a4      	b.n	8010518 <__mdiff+0x34>
 80105ce:	f855 8b04 	ldr.w	r8, [r5], #4
 80105d2:	fa1f f188 	uxth.w	r1, r8
 80105d6:	4461      	add	r1, ip
 80105d8:	140c      	asrs	r4, r1, #16
 80105da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80105de:	b289      	uxth	r1, r1
 80105e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80105e4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80105e8:	f846 1b04 	str.w	r1, [r6], #4
 80105ec:	e7de      	b.n	80105ac <__mdiff+0xc8>
 80105ee:	3f01      	subs	r7, #1
 80105f0:	e7e8      	b.n	80105c4 <__mdiff+0xe0>
 80105f2:	bf00      	nop
 80105f4:	08011557 	.word	0x08011557
 80105f8:	08011568 	.word	0x08011568

080105fc <__d2b>:
 80105fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010600:	2101      	movs	r1, #1
 8010602:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010606:	4690      	mov	r8, r2
 8010608:	461d      	mov	r5, r3
 801060a:	f7ff fcd1 	bl	800ffb0 <_Balloc>
 801060e:	4604      	mov	r4, r0
 8010610:	b930      	cbnz	r0, 8010620 <__d2b+0x24>
 8010612:	4602      	mov	r2, r0
 8010614:	f240 310a 	movw	r1, #778	; 0x30a
 8010618:	4b24      	ldr	r3, [pc, #144]	; (80106ac <__d2b+0xb0>)
 801061a:	4825      	ldr	r0, [pc, #148]	; (80106b0 <__d2b+0xb4>)
 801061c:	f000 fa14 	bl	8010a48 <__assert_func>
 8010620:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010624:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010628:	bb2d      	cbnz	r5, 8010676 <__d2b+0x7a>
 801062a:	9301      	str	r3, [sp, #4]
 801062c:	f1b8 0300 	subs.w	r3, r8, #0
 8010630:	d026      	beq.n	8010680 <__d2b+0x84>
 8010632:	4668      	mov	r0, sp
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	f7ff fd83 	bl	8010140 <__lo0bits>
 801063a:	9900      	ldr	r1, [sp, #0]
 801063c:	b1f0      	cbz	r0, 801067c <__d2b+0x80>
 801063e:	9a01      	ldr	r2, [sp, #4]
 8010640:	f1c0 0320 	rsb	r3, r0, #32
 8010644:	fa02 f303 	lsl.w	r3, r2, r3
 8010648:	430b      	orrs	r3, r1
 801064a:	40c2      	lsrs	r2, r0
 801064c:	6163      	str	r3, [r4, #20]
 801064e:	9201      	str	r2, [sp, #4]
 8010650:	9b01      	ldr	r3, [sp, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	bf14      	ite	ne
 8010656:	2102      	movne	r1, #2
 8010658:	2101      	moveq	r1, #1
 801065a:	61a3      	str	r3, [r4, #24]
 801065c:	6121      	str	r1, [r4, #16]
 801065e:	b1c5      	cbz	r5, 8010692 <__d2b+0x96>
 8010660:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010664:	4405      	add	r5, r0
 8010666:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801066a:	603d      	str	r5, [r7, #0]
 801066c:	6030      	str	r0, [r6, #0]
 801066e:	4620      	mov	r0, r4
 8010670:	b002      	add	sp, #8
 8010672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801067a:	e7d6      	b.n	801062a <__d2b+0x2e>
 801067c:	6161      	str	r1, [r4, #20]
 801067e:	e7e7      	b.n	8010650 <__d2b+0x54>
 8010680:	a801      	add	r0, sp, #4
 8010682:	f7ff fd5d 	bl	8010140 <__lo0bits>
 8010686:	2101      	movs	r1, #1
 8010688:	9b01      	ldr	r3, [sp, #4]
 801068a:	6121      	str	r1, [r4, #16]
 801068c:	6163      	str	r3, [r4, #20]
 801068e:	3020      	adds	r0, #32
 8010690:	e7e5      	b.n	801065e <__d2b+0x62>
 8010692:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010696:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801069a:	6038      	str	r0, [r7, #0]
 801069c:	6918      	ldr	r0, [r3, #16]
 801069e:	f7ff fd2f 	bl	8010100 <__hi0bits>
 80106a2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80106a6:	6031      	str	r1, [r6, #0]
 80106a8:	e7e1      	b.n	801066e <__d2b+0x72>
 80106aa:	bf00      	nop
 80106ac:	08011557 	.word	0x08011557
 80106b0:	08011568 	.word	0x08011568

080106b4 <_calloc_r>:
 80106b4:	b570      	push	{r4, r5, r6, lr}
 80106b6:	fba1 5402 	umull	r5, r4, r1, r2
 80106ba:	b934      	cbnz	r4, 80106ca <_calloc_r+0x16>
 80106bc:	4629      	mov	r1, r5
 80106be:	f7fd ff23 	bl	800e508 <_malloc_r>
 80106c2:	4606      	mov	r6, r0
 80106c4:	b928      	cbnz	r0, 80106d2 <_calloc_r+0x1e>
 80106c6:	4630      	mov	r0, r6
 80106c8:	bd70      	pop	{r4, r5, r6, pc}
 80106ca:	220c      	movs	r2, #12
 80106cc:	2600      	movs	r6, #0
 80106ce:	6002      	str	r2, [r0, #0]
 80106d0:	e7f9      	b.n	80106c6 <_calloc_r+0x12>
 80106d2:	462a      	mov	r2, r5
 80106d4:	4621      	mov	r1, r4
 80106d6:	f7fd feee 	bl	800e4b6 <memset>
 80106da:	e7f4      	b.n	80106c6 <_calloc_r+0x12>

080106dc <_free_r>:
 80106dc:	b538      	push	{r3, r4, r5, lr}
 80106de:	4605      	mov	r5, r0
 80106e0:	2900      	cmp	r1, #0
 80106e2:	d040      	beq.n	8010766 <_free_r+0x8a>
 80106e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106e8:	1f0c      	subs	r4, r1, #4
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	bfb8      	it	lt
 80106ee:	18e4      	addlt	r4, r4, r3
 80106f0:	f7ff fc52 	bl	800ff98 <__malloc_lock>
 80106f4:	4a1c      	ldr	r2, [pc, #112]	; (8010768 <_free_r+0x8c>)
 80106f6:	6813      	ldr	r3, [r2, #0]
 80106f8:	b933      	cbnz	r3, 8010708 <_free_r+0x2c>
 80106fa:	6063      	str	r3, [r4, #4]
 80106fc:	6014      	str	r4, [r2, #0]
 80106fe:	4628      	mov	r0, r5
 8010700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010704:	f7ff bc4e 	b.w	800ffa4 <__malloc_unlock>
 8010708:	42a3      	cmp	r3, r4
 801070a:	d908      	bls.n	801071e <_free_r+0x42>
 801070c:	6820      	ldr	r0, [r4, #0]
 801070e:	1821      	adds	r1, r4, r0
 8010710:	428b      	cmp	r3, r1
 8010712:	bf01      	itttt	eq
 8010714:	6819      	ldreq	r1, [r3, #0]
 8010716:	685b      	ldreq	r3, [r3, #4]
 8010718:	1809      	addeq	r1, r1, r0
 801071a:	6021      	streq	r1, [r4, #0]
 801071c:	e7ed      	b.n	80106fa <_free_r+0x1e>
 801071e:	461a      	mov	r2, r3
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	b10b      	cbz	r3, 8010728 <_free_r+0x4c>
 8010724:	42a3      	cmp	r3, r4
 8010726:	d9fa      	bls.n	801071e <_free_r+0x42>
 8010728:	6811      	ldr	r1, [r2, #0]
 801072a:	1850      	adds	r0, r2, r1
 801072c:	42a0      	cmp	r0, r4
 801072e:	d10b      	bne.n	8010748 <_free_r+0x6c>
 8010730:	6820      	ldr	r0, [r4, #0]
 8010732:	4401      	add	r1, r0
 8010734:	1850      	adds	r0, r2, r1
 8010736:	4283      	cmp	r3, r0
 8010738:	6011      	str	r1, [r2, #0]
 801073a:	d1e0      	bne.n	80106fe <_free_r+0x22>
 801073c:	6818      	ldr	r0, [r3, #0]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	4401      	add	r1, r0
 8010742:	6011      	str	r1, [r2, #0]
 8010744:	6053      	str	r3, [r2, #4]
 8010746:	e7da      	b.n	80106fe <_free_r+0x22>
 8010748:	d902      	bls.n	8010750 <_free_r+0x74>
 801074a:	230c      	movs	r3, #12
 801074c:	602b      	str	r3, [r5, #0]
 801074e:	e7d6      	b.n	80106fe <_free_r+0x22>
 8010750:	6820      	ldr	r0, [r4, #0]
 8010752:	1821      	adds	r1, r4, r0
 8010754:	428b      	cmp	r3, r1
 8010756:	bf01      	itttt	eq
 8010758:	6819      	ldreq	r1, [r3, #0]
 801075a:	685b      	ldreq	r3, [r3, #4]
 801075c:	1809      	addeq	r1, r1, r0
 801075e:	6021      	streq	r1, [r4, #0]
 8010760:	6063      	str	r3, [r4, #4]
 8010762:	6054      	str	r4, [r2, #4]
 8010764:	e7cb      	b.n	80106fe <_free_r+0x22>
 8010766:	bd38      	pop	{r3, r4, r5, pc}
 8010768:	20001c68 	.word	0x20001c68

0801076c <__ssputs_r>:
 801076c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010770:	688e      	ldr	r6, [r1, #8]
 8010772:	4682      	mov	sl, r0
 8010774:	429e      	cmp	r6, r3
 8010776:	460c      	mov	r4, r1
 8010778:	4690      	mov	r8, r2
 801077a:	461f      	mov	r7, r3
 801077c:	d838      	bhi.n	80107f0 <__ssputs_r+0x84>
 801077e:	898a      	ldrh	r2, [r1, #12]
 8010780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010784:	d032      	beq.n	80107ec <__ssputs_r+0x80>
 8010786:	6825      	ldr	r5, [r4, #0]
 8010788:	6909      	ldr	r1, [r1, #16]
 801078a:	3301      	adds	r3, #1
 801078c:	eba5 0901 	sub.w	r9, r5, r1
 8010790:	6965      	ldr	r5, [r4, #20]
 8010792:	444b      	add	r3, r9
 8010794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801079c:	106d      	asrs	r5, r5, #1
 801079e:	429d      	cmp	r5, r3
 80107a0:	bf38      	it	cc
 80107a2:	461d      	movcc	r5, r3
 80107a4:	0553      	lsls	r3, r2, #21
 80107a6:	d531      	bpl.n	801080c <__ssputs_r+0xa0>
 80107a8:	4629      	mov	r1, r5
 80107aa:	f7fd fead 	bl	800e508 <_malloc_r>
 80107ae:	4606      	mov	r6, r0
 80107b0:	b950      	cbnz	r0, 80107c8 <__ssputs_r+0x5c>
 80107b2:	230c      	movs	r3, #12
 80107b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107b8:	f8ca 3000 	str.w	r3, [sl]
 80107bc:	89a3      	ldrh	r3, [r4, #12]
 80107be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107c2:	81a3      	strh	r3, [r4, #12]
 80107c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107c8:	464a      	mov	r2, r9
 80107ca:	6921      	ldr	r1, [r4, #16]
 80107cc:	f7fd fe65 	bl	800e49a <memcpy>
 80107d0:	89a3      	ldrh	r3, [r4, #12]
 80107d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80107d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107da:	81a3      	strh	r3, [r4, #12]
 80107dc:	6126      	str	r6, [r4, #16]
 80107de:	444e      	add	r6, r9
 80107e0:	6026      	str	r6, [r4, #0]
 80107e2:	463e      	mov	r6, r7
 80107e4:	6165      	str	r5, [r4, #20]
 80107e6:	eba5 0509 	sub.w	r5, r5, r9
 80107ea:	60a5      	str	r5, [r4, #8]
 80107ec:	42be      	cmp	r6, r7
 80107ee:	d900      	bls.n	80107f2 <__ssputs_r+0x86>
 80107f0:	463e      	mov	r6, r7
 80107f2:	4632      	mov	r2, r6
 80107f4:	4641      	mov	r1, r8
 80107f6:	6820      	ldr	r0, [r4, #0]
 80107f8:	f000 f968 	bl	8010acc <memmove>
 80107fc:	68a3      	ldr	r3, [r4, #8]
 80107fe:	2000      	movs	r0, #0
 8010800:	1b9b      	subs	r3, r3, r6
 8010802:	60a3      	str	r3, [r4, #8]
 8010804:	6823      	ldr	r3, [r4, #0]
 8010806:	4433      	add	r3, r6
 8010808:	6023      	str	r3, [r4, #0]
 801080a:	e7db      	b.n	80107c4 <__ssputs_r+0x58>
 801080c:	462a      	mov	r2, r5
 801080e:	f000 f977 	bl	8010b00 <_realloc_r>
 8010812:	4606      	mov	r6, r0
 8010814:	2800      	cmp	r0, #0
 8010816:	d1e1      	bne.n	80107dc <__ssputs_r+0x70>
 8010818:	4650      	mov	r0, sl
 801081a:	6921      	ldr	r1, [r4, #16]
 801081c:	f7ff ff5e 	bl	80106dc <_free_r>
 8010820:	e7c7      	b.n	80107b2 <__ssputs_r+0x46>
	...

08010824 <_svfiprintf_r>:
 8010824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010828:	4698      	mov	r8, r3
 801082a:	898b      	ldrh	r3, [r1, #12]
 801082c:	4607      	mov	r7, r0
 801082e:	061b      	lsls	r3, r3, #24
 8010830:	460d      	mov	r5, r1
 8010832:	4614      	mov	r4, r2
 8010834:	b09d      	sub	sp, #116	; 0x74
 8010836:	d50e      	bpl.n	8010856 <_svfiprintf_r+0x32>
 8010838:	690b      	ldr	r3, [r1, #16]
 801083a:	b963      	cbnz	r3, 8010856 <_svfiprintf_r+0x32>
 801083c:	2140      	movs	r1, #64	; 0x40
 801083e:	f7fd fe63 	bl	800e508 <_malloc_r>
 8010842:	6028      	str	r0, [r5, #0]
 8010844:	6128      	str	r0, [r5, #16]
 8010846:	b920      	cbnz	r0, 8010852 <_svfiprintf_r+0x2e>
 8010848:	230c      	movs	r3, #12
 801084a:	603b      	str	r3, [r7, #0]
 801084c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010850:	e0d1      	b.n	80109f6 <_svfiprintf_r+0x1d2>
 8010852:	2340      	movs	r3, #64	; 0x40
 8010854:	616b      	str	r3, [r5, #20]
 8010856:	2300      	movs	r3, #0
 8010858:	9309      	str	r3, [sp, #36]	; 0x24
 801085a:	2320      	movs	r3, #32
 801085c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010860:	2330      	movs	r3, #48	; 0x30
 8010862:	f04f 0901 	mov.w	r9, #1
 8010866:	f8cd 800c 	str.w	r8, [sp, #12]
 801086a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010a10 <_svfiprintf_r+0x1ec>
 801086e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010872:	4623      	mov	r3, r4
 8010874:	469a      	mov	sl, r3
 8010876:	f813 2b01 	ldrb.w	r2, [r3], #1
 801087a:	b10a      	cbz	r2, 8010880 <_svfiprintf_r+0x5c>
 801087c:	2a25      	cmp	r2, #37	; 0x25
 801087e:	d1f9      	bne.n	8010874 <_svfiprintf_r+0x50>
 8010880:	ebba 0b04 	subs.w	fp, sl, r4
 8010884:	d00b      	beq.n	801089e <_svfiprintf_r+0x7a>
 8010886:	465b      	mov	r3, fp
 8010888:	4622      	mov	r2, r4
 801088a:	4629      	mov	r1, r5
 801088c:	4638      	mov	r0, r7
 801088e:	f7ff ff6d 	bl	801076c <__ssputs_r>
 8010892:	3001      	adds	r0, #1
 8010894:	f000 80aa 	beq.w	80109ec <_svfiprintf_r+0x1c8>
 8010898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801089a:	445a      	add	r2, fp
 801089c:	9209      	str	r2, [sp, #36]	; 0x24
 801089e:	f89a 3000 	ldrb.w	r3, [sl]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f000 80a2 	beq.w	80109ec <_svfiprintf_r+0x1c8>
 80108a8:	2300      	movs	r3, #0
 80108aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108b2:	f10a 0a01 	add.w	sl, sl, #1
 80108b6:	9304      	str	r3, [sp, #16]
 80108b8:	9307      	str	r3, [sp, #28]
 80108ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108be:	931a      	str	r3, [sp, #104]	; 0x68
 80108c0:	4654      	mov	r4, sl
 80108c2:	2205      	movs	r2, #5
 80108c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108c8:	4851      	ldr	r0, [pc, #324]	; (8010a10 <_svfiprintf_r+0x1ec>)
 80108ca:	f7ff fb57 	bl	800ff7c <memchr>
 80108ce:	9a04      	ldr	r2, [sp, #16]
 80108d0:	b9d8      	cbnz	r0, 801090a <_svfiprintf_r+0xe6>
 80108d2:	06d0      	lsls	r0, r2, #27
 80108d4:	bf44      	itt	mi
 80108d6:	2320      	movmi	r3, #32
 80108d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108dc:	0711      	lsls	r1, r2, #28
 80108de:	bf44      	itt	mi
 80108e0:	232b      	movmi	r3, #43	; 0x2b
 80108e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108e6:	f89a 3000 	ldrb.w	r3, [sl]
 80108ea:	2b2a      	cmp	r3, #42	; 0x2a
 80108ec:	d015      	beq.n	801091a <_svfiprintf_r+0xf6>
 80108ee:	4654      	mov	r4, sl
 80108f0:	2000      	movs	r0, #0
 80108f2:	f04f 0c0a 	mov.w	ip, #10
 80108f6:	9a07      	ldr	r2, [sp, #28]
 80108f8:	4621      	mov	r1, r4
 80108fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108fe:	3b30      	subs	r3, #48	; 0x30
 8010900:	2b09      	cmp	r3, #9
 8010902:	d94e      	bls.n	80109a2 <_svfiprintf_r+0x17e>
 8010904:	b1b0      	cbz	r0, 8010934 <_svfiprintf_r+0x110>
 8010906:	9207      	str	r2, [sp, #28]
 8010908:	e014      	b.n	8010934 <_svfiprintf_r+0x110>
 801090a:	eba0 0308 	sub.w	r3, r0, r8
 801090e:	fa09 f303 	lsl.w	r3, r9, r3
 8010912:	4313      	orrs	r3, r2
 8010914:	46a2      	mov	sl, r4
 8010916:	9304      	str	r3, [sp, #16]
 8010918:	e7d2      	b.n	80108c0 <_svfiprintf_r+0x9c>
 801091a:	9b03      	ldr	r3, [sp, #12]
 801091c:	1d19      	adds	r1, r3, #4
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	9103      	str	r1, [sp, #12]
 8010922:	2b00      	cmp	r3, #0
 8010924:	bfbb      	ittet	lt
 8010926:	425b      	neglt	r3, r3
 8010928:	f042 0202 	orrlt.w	r2, r2, #2
 801092c:	9307      	strge	r3, [sp, #28]
 801092e:	9307      	strlt	r3, [sp, #28]
 8010930:	bfb8      	it	lt
 8010932:	9204      	strlt	r2, [sp, #16]
 8010934:	7823      	ldrb	r3, [r4, #0]
 8010936:	2b2e      	cmp	r3, #46	; 0x2e
 8010938:	d10c      	bne.n	8010954 <_svfiprintf_r+0x130>
 801093a:	7863      	ldrb	r3, [r4, #1]
 801093c:	2b2a      	cmp	r3, #42	; 0x2a
 801093e:	d135      	bne.n	80109ac <_svfiprintf_r+0x188>
 8010940:	9b03      	ldr	r3, [sp, #12]
 8010942:	3402      	adds	r4, #2
 8010944:	1d1a      	adds	r2, r3, #4
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	9203      	str	r2, [sp, #12]
 801094a:	2b00      	cmp	r3, #0
 801094c:	bfb8      	it	lt
 801094e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010952:	9305      	str	r3, [sp, #20]
 8010954:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010a14 <_svfiprintf_r+0x1f0>
 8010958:	2203      	movs	r2, #3
 801095a:	4650      	mov	r0, sl
 801095c:	7821      	ldrb	r1, [r4, #0]
 801095e:	f7ff fb0d 	bl	800ff7c <memchr>
 8010962:	b140      	cbz	r0, 8010976 <_svfiprintf_r+0x152>
 8010964:	2340      	movs	r3, #64	; 0x40
 8010966:	eba0 000a 	sub.w	r0, r0, sl
 801096a:	fa03 f000 	lsl.w	r0, r3, r0
 801096e:	9b04      	ldr	r3, [sp, #16]
 8010970:	3401      	adds	r4, #1
 8010972:	4303      	orrs	r3, r0
 8010974:	9304      	str	r3, [sp, #16]
 8010976:	f814 1b01 	ldrb.w	r1, [r4], #1
 801097a:	2206      	movs	r2, #6
 801097c:	4826      	ldr	r0, [pc, #152]	; (8010a18 <_svfiprintf_r+0x1f4>)
 801097e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010982:	f7ff fafb 	bl	800ff7c <memchr>
 8010986:	2800      	cmp	r0, #0
 8010988:	d038      	beq.n	80109fc <_svfiprintf_r+0x1d8>
 801098a:	4b24      	ldr	r3, [pc, #144]	; (8010a1c <_svfiprintf_r+0x1f8>)
 801098c:	bb1b      	cbnz	r3, 80109d6 <_svfiprintf_r+0x1b2>
 801098e:	9b03      	ldr	r3, [sp, #12]
 8010990:	3307      	adds	r3, #7
 8010992:	f023 0307 	bic.w	r3, r3, #7
 8010996:	3308      	adds	r3, #8
 8010998:	9303      	str	r3, [sp, #12]
 801099a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099c:	4433      	add	r3, r6
 801099e:	9309      	str	r3, [sp, #36]	; 0x24
 80109a0:	e767      	b.n	8010872 <_svfiprintf_r+0x4e>
 80109a2:	460c      	mov	r4, r1
 80109a4:	2001      	movs	r0, #1
 80109a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80109aa:	e7a5      	b.n	80108f8 <_svfiprintf_r+0xd4>
 80109ac:	2300      	movs	r3, #0
 80109ae:	f04f 0c0a 	mov.w	ip, #10
 80109b2:	4619      	mov	r1, r3
 80109b4:	3401      	adds	r4, #1
 80109b6:	9305      	str	r3, [sp, #20]
 80109b8:	4620      	mov	r0, r4
 80109ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109be:	3a30      	subs	r2, #48	; 0x30
 80109c0:	2a09      	cmp	r2, #9
 80109c2:	d903      	bls.n	80109cc <_svfiprintf_r+0x1a8>
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d0c5      	beq.n	8010954 <_svfiprintf_r+0x130>
 80109c8:	9105      	str	r1, [sp, #20]
 80109ca:	e7c3      	b.n	8010954 <_svfiprintf_r+0x130>
 80109cc:	4604      	mov	r4, r0
 80109ce:	2301      	movs	r3, #1
 80109d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80109d4:	e7f0      	b.n	80109b8 <_svfiprintf_r+0x194>
 80109d6:	ab03      	add	r3, sp, #12
 80109d8:	9300      	str	r3, [sp, #0]
 80109da:	462a      	mov	r2, r5
 80109dc:	4638      	mov	r0, r7
 80109de:	4b10      	ldr	r3, [pc, #64]	; (8010a20 <_svfiprintf_r+0x1fc>)
 80109e0:	a904      	add	r1, sp, #16
 80109e2:	f7fd fea3 	bl	800e72c <_printf_float>
 80109e6:	1c42      	adds	r2, r0, #1
 80109e8:	4606      	mov	r6, r0
 80109ea:	d1d6      	bne.n	801099a <_svfiprintf_r+0x176>
 80109ec:	89ab      	ldrh	r3, [r5, #12]
 80109ee:	065b      	lsls	r3, r3, #25
 80109f0:	f53f af2c 	bmi.w	801084c <_svfiprintf_r+0x28>
 80109f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109f6:	b01d      	add	sp, #116	; 0x74
 80109f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fc:	ab03      	add	r3, sp, #12
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	462a      	mov	r2, r5
 8010a02:	4638      	mov	r0, r7
 8010a04:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <_svfiprintf_r+0x1fc>)
 8010a06:	a904      	add	r1, sp, #16
 8010a08:	f7fe f92c 	bl	800ec64 <_printf_i>
 8010a0c:	e7eb      	b.n	80109e6 <_svfiprintf_r+0x1c2>
 8010a0e:	bf00      	nop
 8010a10:	080116c4 	.word	0x080116c4
 8010a14:	080116ca 	.word	0x080116ca
 8010a18:	080116ce 	.word	0x080116ce
 8010a1c:	0800e72d 	.word	0x0800e72d
 8010a20:	0801076d 	.word	0x0801076d

08010a24 <_read_r>:
 8010a24:	b538      	push	{r3, r4, r5, lr}
 8010a26:	4604      	mov	r4, r0
 8010a28:	4608      	mov	r0, r1
 8010a2a:	4611      	mov	r1, r2
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	4d05      	ldr	r5, [pc, #20]	; (8010a44 <_read_r+0x20>)
 8010a30:	602a      	str	r2, [r5, #0]
 8010a32:	461a      	mov	r2, r3
 8010a34:	f7f1 fc4b 	bl	80022ce <_read>
 8010a38:	1c43      	adds	r3, r0, #1
 8010a3a:	d102      	bne.n	8010a42 <_read_r+0x1e>
 8010a3c:	682b      	ldr	r3, [r5, #0]
 8010a3e:	b103      	cbz	r3, 8010a42 <_read_r+0x1e>
 8010a40:	6023      	str	r3, [r4, #0]
 8010a42:	bd38      	pop	{r3, r4, r5, pc}
 8010a44:	20001c70 	.word	0x20001c70

08010a48 <__assert_func>:
 8010a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a4a:	4614      	mov	r4, r2
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	4b09      	ldr	r3, [pc, #36]	; (8010a74 <__assert_func+0x2c>)
 8010a50:	4605      	mov	r5, r0
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	68d8      	ldr	r0, [r3, #12]
 8010a56:	b14c      	cbz	r4, 8010a6c <__assert_func+0x24>
 8010a58:	4b07      	ldr	r3, [pc, #28]	; (8010a78 <__assert_func+0x30>)
 8010a5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a5e:	9100      	str	r1, [sp, #0]
 8010a60:	462b      	mov	r3, r5
 8010a62:	4906      	ldr	r1, [pc, #24]	; (8010a7c <__assert_func+0x34>)
 8010a64:	f000 f80e 	bl	8010a84 <fiprintf>
 8010a68:	f000 fa9e 	bl	8010fa8 <abort>
 8010a6c:	4b04      	ldr	r3, [pc, #16]	; (8010a80 <__assert_func+0x38>)
 8010a6e:	461c      	mov	r4, r3
 8010a70:	e7f3      	b.n	8010a5a <__assert_func+0x12>
 8010a72:	bf00      	nop
 8010a74:	200000d8 	.word	0x200000d8
 8010a78:	080116d5 	.word	0x080116d5
 8010a7c:	080116e2 	.word	0x080116e2
 8010a80:	08011710 	.word	0x08011710

08010a84 <fiprintf>:
 8010a84:	b40e      	push	{r1, r2, r3}
 8010a86:	b503      	push	{r0, r1, lr}
 8010a88:	4601      	mov	r1, r0
 8010a8a:	ab03      	add	r3, sp, #12
 8010a8c:	4805      	ldr	r0, [pc, #20]	; (8010aa4 <fiprintf+0x20>)
 8010a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a92:	6800      	ldr	r0, [r0, #0]
 8010a94:	9301      	str	r3, [sp, #4]
 8010a96:	f000 f889 	bl	8010bac <_vfiprintf_r>
 8010a9a:	b002      	add	sp, #8
 8010a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010aa0:	b003      	add	sp, #12
 8010aa2:	4770      	bx	lr
 8010aa4:	200000d8 	.word	0x200000d8

08010aa8 <__ascii_mbtowc>:
 8010aa8:	b082      	sub	sp, #8
 8010aaa:	b901      	cbnz	r1, 8010aae <__ascii_mbtowc+0x6>
 8010aac:	a901      	add	r1, sp, #4
 8010aae:	b142      	cbz	r2, 8010ac2 <__ascii_mbtowc+0x1a>
 8010ab0:	b14b      	cbz	r3, 8010ac6 <__ascii_mbtowc+0x1e>
 8010ab2:	7813      	ldrb	r3, [r2, #0]
 8010ab4:	600b      	str	r3, [r1, #0]
 8010ab6:	7812      	ldrb	r2, [r2, #0]
 8010ab8:	1e10      	subs	r0, r2, #0
 8010aba:	bf18      	it	ne
 8010abc:	2001      	movne	r0, #1
 8010abe:	b002      	add	sp, #8
 8010ac0:	4770      	bx	lr
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	e7fb      	b.n	8010abe <__ascii_mbtowc+0x16>
 8010ac6:	f06f 0001 	mvn.w	r0, #1
 8010aca:	e7f8      	b.n	8010abe <__ascii_mbtowc+0x16>

08010acc <memmove>:
 8010acc:	4288      	cmp	r0, r1
 8010ace:	b510      	push	{r4, lr}
 8010ad0:	eb01 0402 	add.w	r4, r1, r2
 8010ad4:	d902      	bls.n	8010adc <memmove+0x10>
 8010ad6:	4284      	cmp	r4, r0
 8010ad8:	4623      	mov	r3, r4
 8010ada:	d807      	bhi.n	8010aec <memmove+0x20>
 8010adc:	1e43      	subs	r3, r0, #1
 8010ade:	42a1      	cmp	r1, r4
 8010ae0:	d008      	beq.n	8010af4 <memmove+0x28>
 8010ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010aea:	e7f8      	b.n	8010ade <memmove+0x12>
 8010aec:	4601      	mov	r1, r0
 8010aee:	4402      	add	r2, r0
 8010af0:	428a      	cmp	r2, r1
 8010af2:	d100      	bne.n	8010af6 <memmove+0x2a>
 8010af4:	bd10      	pop	{r4, pc}
 8010af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010afa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010afe:	e7f7      	b.n	8010af0 <memmove+0x24>

08010b00 <_realloc_r>:
 8010b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b04:	4680      	mov	r8, r0
 8010b06:	4614      	mov	r4, r2
 8010b08:	460e      	mov	r6, r1
 8010b0a:	b921      	cbnz	r1, 8010b16 <_realloc_r+0x16>
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b12:	f7fd bcf9 	b.w	800e508 <_malloc_r>
 8010b16:	b92a      	cbnz	r2, 8010b24 <_realloc_r+0x24>
 8010b18:	f7ff fde0 	bl	80106dc <_free_r>
 8010b1c:	4625      	mov	r5, r4
 8010b1e:	4628      	mov	r0, r5
 8010b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b24:	f000 faac 	bl	8011080 <_malloc_usable_size_r>
 8010b28:	4284      	cmp	r4, r0
 8010b2a:	4607      	mov	r7, r0
 8010b2c:	d802      	bhi.n	8010b34 <_realloc_r+0x34>
 8010b2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b32:	d812      	bhi.n	8010b5a <_realloc_r+0x5a>
 8010b34:	4621      	mov	r1, r4
 8010b36:	4640      	mov	r0, r8
 8010b38:	f7fd fce6 	bl	800e508 <_malloc_r>
 8010b3c:	4605      	mov	r5, r0
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d0ed      	beq.n	8010b1e <_realloc_r+0x1e>
 8010b42:	42bc      	cmp	r4, r7
 8010b44:	4622      	mov	r2, r4
 8010b46:	4631      	mov	r1, r6
 8010b48:	bf28      	it	cs
 8010b4a:	463a      	movcs	r2, r7
 8010b4c:	f7fd fca5 	bl	800e49a <memcpy>
 8010b50:	4631      	mov	r1, r6
 8010b52:	4640      	mov	r0, r8
 8010b54:	f7ff fdc2 	bl	80106dc <_free_r>
 8010b58:	e7e1      	b.n	8010b1e <_realloc_r+0x1e>
 8010b5a:	4635      	mov	r5, r6
 8010b5c:	e7df      	b.n	8010b1e <_realloc_r+0x1e>

08010b5e <__sfputc_r>:
 8010b5e:	6893      	ldr	r3, [r2, #8]
 8010b60:	b410      	push	{r4}
 8010b62:	3b01      	subs	r3, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	6093      	str	r3, [r2, #8]
 8010b68:	da07      	bge.n	8010b7a <__sfputc_r+0x1c>
 8010b6a:	6994      	ldr	r4, [r2, #24]
 8010b6c:	42a3      	cmp	r3, r4
 8010b6e:	db01      	blt.n	8010b74 <__sfputc_r+0x16>
 8010b70:	290a      	cmp	r1, #10
 8010b72:	d102      	bne.n	8010b7a <__sfputc_r+0x1c>
 8010b74:	bc10      	pop	{r4}
 8010b76:	f000 b949 	b.w	8010e0c <__swbuf_r>
 8010b7a:	6813      	ldr	r3, [r2, #0]
 8010b7c:	1c58      	adds	r0, r3, #1
 8010b7e:	6010      	str	r0, [r2, #0]
 8010b80:	7019      	strb	r1, [r3, #0]
 8010b82:	4608      	mov	r0, r1
 8010b84:	bc10      	pop	{r4}
 8010b86:	4770      	bx	lr

08010b88 <__sfputs_r>:
 8010b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8a:	4606      	mov	r6, r0
 8010b8c:	460f      	mov	r7, r1
 8010b8e:	4614      	mov	r4, r2
 8010b90:	18d5      	adds	r5, r2, r3
 8010b92:	42ac      	cmp	r4, r5
 8010b94:	d101      	bne.n	8010b9a <__sfputs_r+0x12>
 8010b96:	2000      	movs	r0, #0
 8010b98:	e007      	b.n	8010baa <__sfputs_r+0x22>
 8010b9a:	463a      	mov	r2, r7
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ba2:	f7ff ffdc 	bl	8010b5e <__sfputc_r>
 8010ba6:	1c43      	adds	r3, r0, #1
 8010ba8:	d1f3      	bne.n	8010b92 <__sfputs_r+0xa>
 8010baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010bac <_vfiprintf_r>:
 8010bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb0:	460d      	mov	r5, r1
 8010bb2:	4614      	mov	r4, r2
 8010bb4:	4698      	mov	r8, r3
 8010bb6:	4606      	mov	r6, r0
 8010bb8:	b09d      	sub	sp, #116	; 0x74
 8010bba:	b118      	cbz	r0, 8010bc4 <_vfiprintf_r+0x18>
 8010bbc:	6983      	ldr	r3, [r0, #24]
 8010bbe:	b90b      	cbnz	r3, 8010bc4 <_vfiprintf_r+0x18>
 8010bc0:	f7fd fba6 	bl	800e310 <__sinit>
 8010bc4:	4b89      	ldr	r3, [pc, #548]	; (8010dec <_vfiprintf_r+0x240>)
 8010bc6:	429d      	cmp	r5, r3
 8010bc8:	d11b      	bne.n	8010c02 <_vfiprintf_r+0x56>
 8010bca:	6875      	ldr	r5, [r6, #4]
 8010bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bce:	07d9      	lsls	r1, r3, #31
 8010bd0:	d405      	bmi.n	8010bde <_vfiprintf_r+0x32>
 8010bd2:	89ab      	ldrh	r3, [r5, #12]
 8010bd4:	059a      	lsls	r2, r3, #22
 8010bd6:	d402      	bmi.n	8010bde <_vfiprintf_r+0x32>
 8010bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bda:	f7fd fc5c 	bl	800e496 <__retarget_lock_acquire_recursive>
 8010bde:	89ab      	ldrh	r3, [r5, #12]
 8010be0:	071b      	lsls	r3, r3, #28
 8010be2:	d501      	bpl.n	8010be8 <_vfiprintf_r+0x3c>
 8010be4:	692b      	ldr	r3, [r5, #16]
 8010be6:	b9eb      	cbnz	r3, 8010c24 <_vfiprintf_r+0x78>
 8010be8:	4629      	mov	r1, r5
 8010bea:	4630      	mov	r0, r6
 8010bec:	f000 f96e 	bl	8010ecc <__swsetup_r>
 8010bf0:	b1c0      	cbz	r0, 8010c24 <_vfiprintf_r+0x78>
 8010bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bf4:	07dc      	lsls	r4, r3, #31
 8010bf6:	d50e      	bpl.n	8010c16 <_vfiprintf_r+0x6a>
 8010bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bfc:	b01d      	add	sp, #116	; 0x74
 8010bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c02:	4b7b      	ldr	r3, [pc, #492]	; (8010df0 <_vfiprintf_r+0x244>)
 8010c04:	429d      	cmp	r5, r3
 8010c06:	d101      	bne.n	8010c0c <_vfiprintf_r+0x60>
 8010c08:	68b5      	ldr	r5, [r6, #8]
 8010c0a:	e7df      	b.n	8010bcc <_vfiprintf_r+0x20>
 8010c0c:	4b79      	ldr	r3, [pc, #484]	; (8010df4 <_vfiprintf_r+0x248>)
 8010c0e:	429d      	cmp	r5, r3
 8010c10:	bf08      	it	eq
 8010c12:	68f5      	ldreq	r5, [r6, #12]
 8010c14:	e7da      	b.n	8010bcc <_vfiprintf_r+0x20>
 8010c16:	89ab      	ldrh	r3, [r5, #12]
 8010c18:	0598      	lsls	r0, r3, #22
 8010c1a:	d4ed      	bmi.n	8010bf8 <_vfiprintf_r+0x4c>
 8010c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c1e:	f7fd fc3b 	bl	800e498 <__retarget_lock_release_recursive>
 8010c22:	e7e9      	b.n	8010bf8 <_vfiprintf_r+0x4c>
 8010c24:	2300      	movs	r3, #0
 8010c26:	9309      	str	r3, [sp, #36]	; 0x24
 8010c28:	2320      	movs	r3, #32
 8010c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c2e:	2330      	movs	r3, #48	; 0x30
 8010c30:	f04f 0901 	mov.w	r9, #1
 8010c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010df8 <_vfiprintf_r+0x24c>
 8010c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c40:	4623      	mov	r3, r4
 8010c42:	469a      	mov	sl, r3
 8010c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c48:	b10a      	cbz	r2, 8010c4e <_vfiprintf_r+0xa2>
 8010c4a:	2a25      	cmp	r2, #37	; 0x25
 8010c4c:	d1f9      	bne.n	8010c42 <_vfiprintf_r+0x96>
 8010c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8010c52:	d00b      	beq.n	8010c6c <_vfiprintf_r+0xc0>
 8010c54:	465b      	mov	r3, fp
 8010c56:	4622      	mov	r2, r4
 8010c58:	4629      	mov	r1, r5
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	f7ff ff94 	bl	8010b88 <__sfputs_r>
 8010c60:	3001      	adds	r0, #1
 8010c62:	f000 80aa 	beq.w	8010dba <_vfiprintf_r+0x20e>
 8010c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c68:	445a      	add	r2, fp
 8010c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8010c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	f000 80a2 	beq.w	8010dba <_vfiprintf_r+0x20e>
 8010c76:	2300      	movs	r3, #0
 8010c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c80:	f10a 0a01 	add.w	sl, sl, #1
 8010c84:	9304      	str	r3, [sp, #16]
 8010c86:	9307      	str	r3, [sp, #28]
 8010c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8010c8e:	4654      	mov	r4, sl
 8010c90:	2205      	movs	r2, #5
 8010c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c96:	4858      	ldr	r0, [pc, #352]	; (8010df8 <_vfiprintf_r+0x24c>)
 8010c98:	f7ff f970 	bl	800ff7c <memchr>
 8010c9c:	9a04      	ldr	r2, [sp, #16]
 8010c9e:	b9d8      	cbnz	r0, 8010cd8 <_vfiprintf_r+0x12c>
 8010ca0:	06d1      	lsls	r1, r2, #27
 8010ca2:	bf44      	itt	mi
 8010ca4:	2320      	movmi	r3, #32
 8010ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010caa:	0713      	lsls	r3, r2, #28
 8010cac:	bf44      	itt	mi
 8010cae:	232b      	movmi	r3, #43	; 0x2b
 8010cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8010cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8010cba:	d015      	beq.n	8010ce8 <_vfiprintf_r+0x13c>
 8010cbc:	4654      	mov	r4, sl
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	f04f 0c0a 	mov.w	ip, #10
 8010cc4:	9a07      	ldr	r2, [sp, #28]
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ccc:	3b30      	subs	r3, #48	; 0x30
 8010cce:	2b09      	cmp	r3, #9
 8010cd0:	d94e      	bls.n	8010d70 <_vfiprintf_r+0x1c4>
 8010cd2:	b1b0      	cbz	r0, 8010d02 <_vfiprintf_r+0x156>
 8010cd4:	9207      	str	r2, [sp, #28]
 8010cd6:	e014      	b.n	8010d02 <_vfiprintf_r+0x156>
 8010cd8:	eba0 0308 	sub.w	r3, r0, r8
 8010cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8010ce0:	4313      	orrs	r3, r2
 8010ce2:	46a2      	mov	sl, r4
 8010ce4:	9304      	str	r3, [sp, #16]
 8010ce6:	e7d2      	b.n	8010c8e <_vfiprintf_r+0xe2>
 8010ce8:	9b03      	ldr	r3, [sp, #12]
 8010cea:	1d19      	adds	r1, r3, #4
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	9103      	str	r1, [sp, #12]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	bfbb      	ittet	lt
 8010cf4:	425b      	neglt	r3, r3
 8010cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8010cfa:	9307      	strge	r3, [sp, #28]
 8010cfc:	9307      	strlt	r3, [sp, #28]
 8010cfe:	bfb8      	it	lt
 8010d00:	9204      	strlt	r2, [sp, #16]
 8010d02:	7823      	ldrb	r3, [r4, #0]
 8010d04:	2b2e      	cmp	r3, #46	; 0x2e
 8010d06:	d10c      	bne.n	8010d22 <_vfiprintf_r+0x176>
 8010d08:	7863      	ldrb	r3, [r4, #1]
 8010d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8010d0c:	d135      	bne.n	8010d7a <_vfiprintf_r+0x1ce>
 8010d0e:	9b03      	ldr	r3, [sp, #12]
 8010d10:	3402      	adds	r4, #2
 8010d12:	1d1a      	adds	r2, r3, #4
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	9203      	str	r2, [sp, #12]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	bfb8      	it	lt
 8010d1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010d20:	9305      	str	r3, [sp, #20]
 8010d22:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010dfc <_vfiprintf_r+0x250>
 8010d26:	2203      	movs	r2, #3
 8010d28:	4650      	mov	r0, sl
 8010d2a:	7821      	ldrb	r1, [r4, #0]
 8010d2c:	f7ff f926 	bl	800ff7c <memchr>
 8010d30:	b140      	cbz	r0, 8010d44 <_vfiprintf_r+0x198>
 8010d32:	2340      	movs	r3, #64	; 0x40
 8010d34:	eba0 000a 	sub.w	r0, r0, sl
 8010d38:	fa03 f000 	lsl.w	r0, r3, r0
 8010d3c:	9b04      	ldr	r3, [sp, #16]
 8010d3e:	3401      	adds	r4, #1
 8010d40:	4303      	orrs	r3, r0
 8010d42:	9304      	str	r3, [sp, #16]
 8010d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d48:	2206      	movs	r2, #6
 8010d4a:	482d      	ldr	r0, [pc, #180]	; (8010e00 <_vfiprintf_r+0x254>)
 8010d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d50:	f7ff f914 	bl	800ff7c <memchr>
 8010d54:	2800      	cmp	r0, #0
 8010d56:	d03f      	beq.n	8010dd8 <_vfiprintf_r+0x22c>
 8010d58:	4b2a      	ldr	r3, [pc, #168]	; (8010e04 <_vfiprintf_r+0x258>)
 8010d5a:	bb1b      	cbnz	r3, 8010da4 <_vfiprintf_r+0x1f8>
 8010d5c:	9b03      	ldr	r3, [sp, #12]
 8010d5e:	3307      	adds	r3, #7
 8010d60:	f023 0307 	bic.w	r3, r3, #7
 8010d64:	3308      	adds	r3, #8
 8010d66:	9303      	str	r3, [sp, #12]
 8010d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d6a:	443b      	add	r3, r7
 8010d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8010d6e:	e767      	b.n	8010c40 <_vfiprintf_r+0x94>
 8010d70:	460c      	mov	r4, r1
 8010d72:	2001      	movs	r0, #1
 8010d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d78:	e7a5      	b.n	8010cc6 <_vfiprintf_r+0x11a>
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	f04f 0c0a 	mov.w	ip, #10
 8010d80:	4619      	mov	r1, r3
 8010d82:	3401      	adds	r4, #1
 8010d84:	9305      	str	r3, [sp, #20]
 8010d86:	4620      	mov	r0, r4
 8010d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d8c:	3a30      	subs	r2, #48	; 0x30
 8010d8e:	2a09      	cmp	r2, #9
 8010d90:	d903      	bls.n	8010d9a <_vfiprintf_r+0x1ee>
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d0c5      	beq.n	8010d22 <_vfiprintf_r+0x176>
 8010d96:	9105      	str	r1, [sp, #20]
 8010d98:	e7c3      	b.n	8010d22 <_vfiprintf_r+0x176>
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010da2:	e7f0      	b.n	8010d86 <_vfiprintf_r+0x1da>
 8010da4:	ab03      	add	r3, sp, #12
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	462a      	mov	r2, r5
 8010daa:	4630      	mov	r0, r6
 8010dac:	4b16      	ldr	r3, [pc, #88]	; (8010e08 <_vfiprintf_r+0x25c>)
 8010dae:	a904      	add	r1, sp, #16
 8010db0:	f7fd fcbc 	bl	800e72c <_printf_float>
 8010db4:	4607      	mov	r7, r0
 8010db6:	1c78      	adds	r0, r7, #1
 8010db8:	d1d6      	bne.n	8010d68 <_vfiprintf_r+0x1bc>
 8010dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010dbc:	07d9      	lsls	r1, r3, #31
 8010dbe:	d405      	bmi.n	8010dcc <_vfiprintf_r+0x220>
 8010dc0:	89ab      	ldrh	r3, [r5, #12]
 8010dc2:	059a      	lsls	r2, r3, #22
 8010dc4:	d402      	bmi.n	8010dcc <_vfiprintf_r+0x220>
 8010dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010dc8:	f7fd fb66 	bl	800e498 <__retarget_lock_release_recursive>
 8010dcc:	89ab      	ldrh	r3, [r5, #12]
 8010dce:	065b      	lsls	r3, r3, #25
 8010dd0:	f53f af12 	bmi.w	8010bf8 <_vfiprintf_r+0x4c>
 8010dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dd6:	e711      	b.n	8010bfc <_vfiprintf_r+0x50>
 8010dd8:	ab03      	add	r3, sp, #12
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	462a      	mov	r2, r5
 8010dde:	4630      	mov	r0, r6
 8010de0:	4b09      	ldr	r3, [pc, #36]	; (8010e08 <_vfiprintf_r+0x25c>)
 8010de2:	a904      	add	r1, sp, #16
 8010de4:	f7fd ff3e 	bl	800ec64 <_printf_i>
 8010de8:	e7e4      	b.n	8010db4 <_vfiprintf_r+0x208>
 8010dea:	bf00      	nop
 8010dec:	08011460 	.word	0x08011460
 8010df0:	08011480 	.word	0x08011480
 8010df4:	08011440 	.word	0x08011440
 8010df8:	080116c4 	.word	0x080116c4
 8010dfc:	080116ca 	.word	0x080116ca
 8010e00:	080116ce 	.word	0x080116ce
 8010e04:	0800e72d 	.word	0x0800e72d
 8010e08:	08010b89 	.word	0x08010b89

08010e0c <__swbuf_r>:
 8010e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e0e:	460e      	mov	r6, r1
 8010e10:	4614      	mov	r4, r2
 8010e12:	4605      	mov	r5, r0
 8010e14:	b118      	cbz	r0, 8010e1e <__swbuf_r+0x12>
 8010e16:	6983      	ldr	r3, [r0, #24]
 8010e18:	b90b      	cbnz	r3, 8010e1e <__swbuf_r+0x12>
 8010e1a:	f7fd fa79 	bl	800e310 <__sinit>
 8010e1e:	4b21      	ldr	r3, [pc, #132]	; (8010ea4 <__swbuf_r+0x98>)
 8010e20:	429c      	cmp	r4, r3
 8010e22:	d12b      	bne.n	8010e7c <__swbuf_r+0x70>
 8010e24:	686c      	ldr	r4, [r5, #4]
 8010e26:	69a3      	ldr	r3, [r4, #24]
 8010e28:	60a3      	str	r3, [r4, #8]
 8010e2a:	89a3      	ldrh	r3, [r4, #12]
 8010e2c:	071a      	lsls	r2, r3, #28
 8010e2e:	d52f      	bpl.n	8010e90 <__swbuf_r+0x84>
 8010e30:	6923      	ldr	r3, [r4, #16]
 8010e32:	b36b      	cbz	r3, 8010e90 <__swbuf_r+0x84>
 8010e34:	6923      	ldr	r3, [r4, #16]
 8010e36:	6820      	ldr	r0, [r4, #0]
 8010e38:	b2f6      	uxtb	r6, r6
 8010e3a:	1ac0      	subs	r0, r0, r3
 8010e3c:	6963      	ldr	r3, [r4, #20]
 8010e3e:	4637      	mov	r7, r6
 8010e40:	4283      	cmp	r3, r0
 8010e42:	dc04      	bgt.n	8010e4e <__swbuf_r+0x42>
 8010e44:	4621      	mov	r1, r4
 8010e46:	4628      	mov	r0, r5
 8010e48:	f7ff f83e 	bl	800fec8 <_fflush_r>
 8010e4c:	bb30      	cbnz	r0, 8010e9c <__swbuf_r+0x90>
 8010e4e:	68a3      	ldr	r3, [r4, #8]
 8010e50:	3001      	adds	r0, #1
 8010e52:	3b01      	subs	r3, #1
 8010e54:	60a3      	str	r3, [r4, #8]
 8010e56:	6823      	ldr	r3, [r4, #0]
 8010e58:	1c5a      	adds	r2, r3, #1
 8010e5a:	6022      	str	r2, [r4, #0]
 8010e5c:	701e      	strb	r6, [r3, #0]
 8010e5e:	6963      	ldr	r3, [r4, #20]
 8010e60:	4283      	cmp	r3, r0
 8010e62:	d004      	beq.n	8010e6e <__swbuf_r+0x62>
 8010e64:	89a3      	ldrh	r3, [r4, #12]
 8010e66:	07db      	lsls	r3, r3, #31
 8010e68:	d506      	bpl.n	8010e78 <__swbuf_r+0x6c>
 8010e6a:	2e0a      	cmp	r6, #10
 8010e6c:	d104      	bne.n	8010e78 <__swbuf_r+0x6c>
 8010e6e:	4621      	mov	r1, r4
 8010e70:	4628      	mov	r0, r5
 8010e72:	f7ff f829 	bl	800fec8 <_fflush_r>
 8010e76:	b988      	cbnz	r0, 8010e9c <__swbuf_r+0x90>
 8010e78:	4638      	mov	r0, r7
 8010e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e7c:	4b0a      	ldr	r3, [pc, #40]	; (8010ea8 <__swbuf_r+0x9c>)
 8010e7e:	429c      	cmp	r4, r3
 8010e80:	d101      	bne.n	8010e86 <__swbuf_r+0x7a>
 8010e82:	68ac      	ldr	r4, [r5, #8]
 8010e84:	e7cf      	b.n	8010e26 <__swbuf_r+0x1a>
 8010e86:	4b09      	ldr	r3, [pc, #36]	; (8010eac <__swbuf_r+0xa0>)
 8010e88:	429c      	cmp	r4, r3
 8010e8a:	bf08      	it	eq
 8010e8c:	68ec      	ldreq	r4, [r5, #12]
 8010e8e:	e7ca      	b.n	8010e26 <__swbuf_r+0x1a>
 8010e90:	4621      	mov	r1, r4
 8010e92:	4628      	mov	r0, r5
 8010e94:	f000 f81a 	bl	8010ecc <__swsetup_r>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	d0cb      	beq.n	8010e34 <__swbuf_r+0x28>
 8010e9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010ea0:	e7ea      	b.n	8010e78 <__swbuf_r+0x6c>
 8010ea2:	bf00      	nop
 8010ea4:	08011460 	.word	0x08011460
 8010ea8:	08011480 	.word	0x08011480
 8010eac:	08011440 	.word	0x08011440

08010eb0 <__ascii_wctomb>:
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	4608      	mov	r0, r1
 8010eb4:	b141      	cbz	r1, 8010ec8 <__ascii_wctomb+0x18>
 8010eb6:	2aff      	cmp	r2, #255	; 0xff
 8010eb8:	d904      	bls.n	8010ec4 <__ascii_wctomb+0x14>
 8010eba:	228a      	movs	r2, #138	; 0x8a
 8010ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ec0:	601a      	str	r2, [r3, #0]
 8010ec2:	4770      	bx	lr
 8010ec4:	2001      	movs	r0, #1
 8010ec6:	700a      	strb	r2, [r1, #0]
 8010ec8:	4770      	bx	lr
	...

08010ecc <__swsetup_r>:
 8010ecc:	4b32      	ldr	r3, [pc, #200]	; (8010f98 <__swsetup_r+0xcc>)
 8010ece:	b570      	push	{r4, r5, r6, lr}
 8010ed0:	681d      	ldr	r5, [r3, #0]
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	460c      	mov	r4, r1
 8010ed6:	b125      	cbz	r5, 8010ee2 <__swsetup_r+0x16>
 8010ed8:	69ab      	ldr	r3, [r5, #24]
 8010eda:	b913      	cbnz	r3, 8010ee2 <__swsetup_r+0x16>
 8010edc:	4628      	mov	r0, r5
 8010ede:	f7fd fa17 	bl	800e310 <__sinit>
 8010ee2:	4b2e      	ldr	r3, [pc, #184]	; (8010f9c <__swsetup_r+0xd0>)
 8010ee4:	429c      	cmp	r4, r3
 8010ee6:	d10f      	bne.n	8010f08 <__swsetup_r+0x3c>
 8010ee8:	686c      	ldr	r4, [r5, #4]
 8010eea:	89a3      	ldrh	r3, [r4, #12]
 8010eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ef0:	0719      	lsls	r1, r3, #28
 8010ef2:	d42c      	bmi.n	8010f4e <__swsetup_r+0x82>
 8010ef4:	06dd      	lsls	r5, r3, #27
 8010ef6:	d411      	bmi.n	8010f1c <__swsetup_r+0x50>
 8010ef8:	2309      	movs	r3, #9
 8010efa:	6033      	str	r3, [r6, #0]
 8010efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f04:	81a3      	strh	r3, [r4, #12]
 8010f06:	e03e      	b.n	8010f86 <__swsetup_r+0xba>
 8010f08:	4b25      	ldr	r3, [pc, #148]	; (8010fa0 <__swsetup_r+0xd4>)
 8010f0a:	429c      	cmp	r4, r3
 8010f0c:	d101      	bne.n	8010f12 <__swsetup_r+0x46>
 8010f0e:	68ac      	ldr	r4, [r5, #8]
 8010f10:	e7eb      	b.n	8010eea <__swsetup_r+0x1e>
 8010f12:	4b24      	ldr	r3, [pc, #144]	; (8010fa4 <__swsetup_r+0xd8>)
 8010f14:	429c      	cmp	r4, r3
 8010f16:	bf08      	it	eq
 8010f18:	68ec      	ldreq	r4, [r5, #12]
 8010f1a:	e7e6      	b.n	8010eea <__swsetup_r+0x1e>
 8010f1c:	0758      	lsls	r0, r3, #29
 8010f1e:	d512      	bpl.n	8010f46 <__swsetup_r+0x7a>
 8010f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f22:	b141      	cbz	r1, 8010f36 <__swsetup_r+0x6a>
 8010f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f28:	4299      	cmp	r1, r3
 8010f2a:	d002      	beq.n	8010f32 <__swsetup_r+0x66>
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	f7ff fbd5 	bl	80106dc <_free_r>
 8010f32:	2300      	movs	r3, #0
 8010f34:	6363      	str	r3, [r4, #52]	; 0x34
 8010f36:	89a3      	ldrh	r3, [r4, #12]
 8010f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f3c:	81a3      	strh	r3, [r4, #12]
 8010f3e:	2300      	movs	r3, #0
 8010f40:	6063      	str	r3, [r4, #4]
 8010f42:	6923      	ldr	r3, [r4, #16]
 8010f44:	6023      	str	r3, [r4, #0]
 8010f46:	89a3      	ldrh	r3, [r4, #12]
 8010f48:	f043 0308 	orr.w	r3, r3, #8
 8010f4c:	81a3      	strh	r3, [r4, #12]
 8010f4e:	6923      	ldr	r3, [r4, #16]
 8010f50:	b94b      	cbnz	r3, 8010f66 <__swsetup_r+0x9a>
 8010f52:	89a3      	ldrh	r3, [r4, #12]
 8010f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f5c:	d003      	beq.n	8010f66 <__swsetup_r+0x9a>
 8010f5e:	4621      	mov	r1, r4
 8010f60:	4630      	mov	r0, r6
 8010f62:	f000 f84d 	bl	8011000 <__smakebuf_r>
 8010f66:	89a0      	ldrh	r0, [r4, #12]
 8010f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f6c:	f010 0301 	ands.w	r3, r0, #1
 8010f70:	d00a      	beq.n	8010f88 <__swsetup_r+0xbc>
 8010f72:	2300      	movs	r3, #0
 8010f74:	60a3      	str	r3, [r4, #8]
 8010f76:	6963      	ldr	r3, [r4, #20]
 8010f78:	425b      	negs	r3, r3
 8010f7a:	61a3      	str	r3, [r4, #24]
 8010f7c:	6923      	ldr	r3, [r4, #16]
 8010f7e:	b943      	cbnz	r3, 8010f92 <__swsetup_r+0xc6>
 8010f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f84:	d1ba      	bne.n	8010efc <__swsetup_r+0x30>
 8010f86:	bd70      	pop	{r4, r5, r6, pc}
 8010f88:	0781      	lsls	r1, r0, #30
 8010f8a:	bf58      	it	pl
 8010f8c:	6963      	ldrpl	r3, [r4, #20]
 8010f8e:	60a3      	str	r3, [r4, #8]
 8010f90:	e7f4      	b.n	8010f7c <__swsetup_r+0xb0>
 8010f92:	2000      	movs	r0, #0
 8010f94:	e7f7      	b.n	8010f86 <__swsetup_r+0xba>
 8010f96:	bf00      	nop
 8010f98:	200000d8 	.word	0x200000d8
 8010f9c:	08011460 	.word	0x08011460
 8010fa0:	08011480 	.word	0x08011480
 8010fa4:	08011440 	.word	0x08011440

08010fa8 <abort>:
 8010fa8:	2006      	movs	r0, #6
 8010faa:	b508      	push	{r3, lr}
 8010fac:	f000 f898 	bl	80110e0 <raise>
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	f7f1 f982 	bl	80022ba <_exit>

08010fb6 <__swhatbuf_r>:
 8010fb6:	b570      	push	{r4, r5, r6, lr}
 8010fb8:	460e      	mov	r6, r1
 8010fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fbe:	4614      	mov	r4, r2
 8010fc0:	2900      	cmp	r1, #0
 8010fc2:	461d      	mov	r5, r3
 8010fc4:	b096      	sub	sp, #88	; 0x58
 8010fc6:	da08      	bge.n	8010fda <__swhatbuf_r+0x24>
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010fce:	602a      	str	r2, [r5, #0]
 8010fd0:	061a      	lsls	r2, r3, #24
 8010fd2:	d410      	bmi.n	8010ff6 <__swhatbuf_r+0x40>
 8010fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fd8:	e00e      	b.n	8010ff8 <__swhatbuf_r+0x42>
 8010fda:	466a      	mov	r2, sp
 8010fdc:	f000 f89c 	bl	8011118 <_fstat_r>
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	dbf1      	blt.n	8010fc8 <__swhatbuf_r+0x12>
 8010fe4:	9a01      	ldr	r2, [sp, #4]
 8010fe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010fea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010fee:	425a      	negs	r2, r3
 8010ff0:	415a      	adcs	r2, r3
 8010ff2:	602a      	str	r2, [r5, #0]
 8010ff4:	e7ee      	b.n	8010fd4 <__swhatbuf_r+0x1e>
 8010ff6:	2340      	movs	r3, #64	; 0x40
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	6023      	str	r3, [r4, #0]
 8010ffc:	b016      	add	sp, #88	; 0x58
 8010ffe:	bd70      	pop	{r4, r5, r6, pc}

08011000 <__smakebuf_r>:
 8011000:	898b      	ldrh	r3, [r1, #12]
 8011002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011004:	079d      	lsls	r5, r3, #30
 8011006:	4606      	mov	r6, r0
 8011008:	460c      	mov	r4, r1
 801100a:	d507      	bpl.n	801101c <__smakebuf_r+0x1c>
 801100c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011010:	6023      	str	r3, [r4, #0]
 8011012:	6123      	str	r3, [r4, #16]
 8011014:	2301      	movs	r3, #1
 8011016:	6163      	str	r3, [r4, #20]
 8011018:	b002      	add	sp, #8
 801101a:	bd70      	pop	{r4, r5, r6, pc}
 801101c:	466a      	mov	r2, sp
 801101e:	ab01      	add	r3, sp, #4
 8011020:	f7ff ffc9 	bl	8010fb6 <__swhatbuf_r>
 8011024:	9900      	ldr	r1, [sp, #0]
 8011026:	4605      	mov	r5, r0
 8011028:	4630      	mov	r0, r6
 801102a:	f7fd fa6d 	bl	800e508 <_malloc_r>
 801102e:	b948      	cbnz	r0, 8011044 <__smakebuf_r+0x44>
 8011030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011034:	059a      	lsls	r2, r3, #22
 8011036:	d4ef      	bmi.n	8011018 <__smakebuf_r+0x18>
 8011038:	f023 0303 	bic.w	r3, r3, #3
 801103c:	f043 0302 	orr.w	r3, r3, #2
 8011040:	81a3      	strh	r3, [r4, #12]
 8011042:	e7e3      	b.n	801100c <__smakebuf_r+0xc>
 8011044:	4b0d      	ldr	r3, [pc, #52]	; (801107c <__smakebuf_r+0x7c>)
 8011046:	62b3      	str	r3, [r6, #40]	; 0x28
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	6020      	str	r0, [r4, #0]
 801104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011050:	81a3      	strh	r3, [r4, #12]
 8011052:	9b00      	ldr	r3, [sp, #0]
 8011054:	6120      	str	r0, [r4, #16]
 8011056:	6163      	str	r3, [r4, #20]
 8011058:	9b01      	ldr	r3, [sp, #4]
 801105a:	b15b      	cbz	r3, 8011074 <__smakebuf_r+0x74>
 801105c:	4630      	mov	r0, r6
 801105e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011062:	f000 f86b 	bl	801113c <_isatty_r>
 8011066:	b128      	cbz	r0, 8011074 <__smakebuf_r+0x74>
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	f023 0303 	bic.w	r3, r3, #3
 801106e:	f043 0301 	orr.w	r3, r3, #1
 8011072:	81a3      	strh	r3, [r4, #12]
 8011074:	89a0      	ldrh	r0, [r4, #12]
 8011076:	4305      	orrs	r5, r0
 8011078:	81a5      	strh	r5, [r4, #12]
 801107a:	e7cd      	b.n	8011018 <__smakebuf_r+0x18>
 801107c:	0800e2a9 	.word	0x0800e2a9

08011080 <_malloc_usable_size_r>:
 8011080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011084:	1f18      	subs	r0, r3, #4
 8011086:	2b00      	cmp	r3, #0
 8011088:	bfbc      	itt	lt
 801108a:	580b      	ldrlt	r3, [r1, r0]
 801108c:	18c0      	addlt	r0, r0, r3
 801108e:	4770      	bx	lr

08011090 <_raise_r>:
 8011090:	291f      	cmp	r1, #31
 8011092:	b538      	push	{r3, r4, r5, lr}
 8011094:	4604      	mov	r4, r0
 8011096:	460d      	mov	r5, r1
 8011098:	d904      	bls.n	80110a4 <_raise_r+0x14>
 801109a:	2316      	movs	r3, #22
 801109c:	6003      	str	r3, [r0, #0]
 801109e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110a2:	bd38      	pop	{r3, r4, r5, pc}
 80110a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80110a6:	b112      	cbz	r2, 80110ae <_raise_r+0x1e>
 80110a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110ac:	b94b      	cbnz	r3, 80110c2 <_raise_r+0x32>
 80110ae:	4620      	mov	r0, r4
 80110b0:	f000 f830 	bl	8011114 <_getpid_r>
 80110b4:	462a      	mov	r2, r5
 80110b6:	4601      	mov	r1, r0
 80110b8:	4620      	mov	r0, r4
 80110ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110be:	f000 b817 	b.w	80110f0 <_kill_r>
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	d00a      	beq.n	80110dc <_raise_r+0x4c>
 80110c6:	1c59      	adds	r1, r3, #1
 80110c8:	d103      	bne.n	80110d2 <_raise_r+0x42>
 80110ca:	2316      	movs	r3, #22
 80110cc:	6003      	str	r3, [r0, #0]
 80110ce:	2001      	movs	r0, #1
 80110d0:	e7e7      	b.n	80110a2 <_raise_r+0x12>
 80110d2:	2400      	movs	r4, #0
 80110d4:	4628      	mov	r0, r5
 80110d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80110da:	4798      	blx	r3
 80110dc:	2000      	movs	r0, #0
 80110de:	e7e0      	b.n	80110a2 <_raise_r+0x12>

080110e0 <raise>:
 80110e0:	4b02      	ldr	r3, [pc, #8]	; (80110ec <raise+0xc>)
 80110e2:	4601      	mov	r1, r0
 80110e4:	6818      	ldr	r0, [r3, #0]
 80110e6:	f7ff bfd3 	b.w	8011090 <_raise_r>
 80110ea:	bf00      	nop
 80110ec:	200000d8 	.word	0x200000d8

080110f0 <_kill_r>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	2300      	movs	r3, #0
 80110f4:	4d06      	ldr	r5, [pc, #24]	; (8011110 <_kill_r+0x20>)
 80110f6:	4604      	mov	r4, r0
 80110f8:	4608      	mov	r0, r1
 80110fa:	4611      	mov	r1, r2
 80110fc:	602b      	str	r3, [r5, #0]
 80110fe:	f7f1 f8cc 	bl	800229a <_kill>
 8011102:	1c43      	adds	r3, r0, #1
 8011104:	d102      	bne.n	801110c <_kill_r+0x1c>
 8011106:	682b      	ldr	r3, [r5, #0]
 8011108:	b103      	cbz	r3, 801110c <_kill_r+0x1c>
 801110a:	6023      	str	r3, [r4, #0]
 801110c:	bd38      	pop	{r3, r4, r5, pc}
 801110e:	bf00      	nop
 8011110:	20001c70 	.word	0x20001c70

08011114 <_getpid_r>:
 8011114:	f7f1 b8ba 	b.w	800228c <_getpid>

08011118 <_fstat_r>:
 8011118:	b538      	push	{r3, r4, r5, lr}
 801111a:	2300      	movs	r3, #0
 801111c:	4d06      	ldr	r5, [pc, #24]	; (8011138 <_fstat_r+0x20>)
 801111e:	4604      	mov	r4, r0
 8011120:	4608      	mov	r0, r1
 8011122:	4611      	mov	r1, r2
 8011124:	602b      	str	r3, [r5, #0]
 8011126:	f7f1 f916 	bl	8002356 <_fstat>
 801112a:	1c43      	adds	r3, r0, #1
 801112c:	d102      	bne.n	8011134 <_fstat_r+0x1c>
 801112e:	682b      	ldr	r3, [r5, #0]
 8011130:	b103      	cbz	r3, 8011134 <_fstat_r+0x1c>
 8011132:	6023      	str	r3, [r4, #0]
 8011134:	bd38      	pop	{r3, r4, r5, pc}
 8011136:	bf00      	nop
 8011138:	20001c70 	.word	0x20001c70

0801113c <_isatty_r>:
 801113c:	b538      	push	{r3, r4, r5, lr}
 801113e:	2300      	movs	r3, #0
 8011140:	4d05      	ldr	r5, [pc, #20]	; (8011158 <_isatty_r+0x1c>)
 8011142:	4604      	mov	r4, r0
 8011144:	4608      	mov	r0, r1
 8011146:	602b      	str	r3, [r5, #0]
 8011148:	f7f1 f914 	bl	8002374 <_isatty>
 801114c:	1c43      	adds	r3, r0, #1
 801114e:	d102      	bne.n	8011156 <_isatty_r+0x1a>
 8011150:	682b      	ldr	r3, [r5, #0]
 8011152:	b103      	cbz	r3, 8011156 <_isatty_r+0x1a>
 8011154:	6023      	str	r3, [r4, #0]
 8011156:	bd38      	pop	{r3, r4, r5, pc}
 8011158:	20001c70 	.word	0x20001c70

0801115c <_init>:
 801115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115e:	bf00      	nop
 8011160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011162:	bc08      	pop	{r3}
 8011164:	469e      	mov	lr, r3
 8011166:	4770      	bx	lr

08011168 <_fini>:
 8011168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116a:	bf00      	nop
 801116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801116e:	bc08      	pop	{r3}
 8011170:	469e      	mov	lr, r3
 8011172:	4770      	bx	lr
